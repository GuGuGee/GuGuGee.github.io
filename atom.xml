<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我不是咕咕鸽</title>
  
  <subtitle>VPS折腾不完全记录</subtitle>
  <link href="https://blog.laoda.de/atom.xml" rel="self"/>
  
  <link href="https://blog.laoda.de/"/>
  <updated>2023-09-22T09:53:13.191Z</updated>
  <id>https://blog.laoda.de/</id>
  
  <author>
    <name>咕咕鸽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分享一下自己在VPS/NAS/本地电脑上是怎么备份数据的</title>
    <link href="https://blog.laoda.de/archives/321-backup/"/>
    <id>https://blog.laoda.de/archives/321-backup/</id>
    <published>2023-09-22T09:41:03.000Z</published>
    <updated>2023-09-22T09:53:13.191Z</updated>
    
    <content type="html"><![CDATA[<p>今天在整理文件，正好稍微梳理一下自己在不同设备上的备份方法，简单和大家分享下。（有不对的地方或者更好的建议欢迎评论区指出～）</p><p>先简单介绍一个ChatGPT给出的321备份策略（有很多种说法，这个是其中一种）：</p><img src="https://img.laoda.de/i/2023/09/22/spa8o4-0.webp" alt="8f3274298133f20b777c479310e1df5b.png" style="zoom:50%;" /><blockquote><p>321备份原则是一种数据备份策略，旨在防止数据丢失。具体来说，它建议按照以下方式备份数据：</p><ul><li>3份备份：也就是最少拥有你数据的三个副本。比如说，一个在你的电脑硬盘上（原始数据），剩下的两个在其他不同的存储媒介上。</li><li>2种不同的存储类型：这意味着你不能把所有的备份都放在同一种存储设备上，例如仅使用硬盘做备份。第二份备份应储存在不同的设备或系统上，比如外部硬盘，网络附加存储（NAS），DVD，云存储等。</li><li>1份离线（或离站）备份：这意味着你需要有一份备份是存储在离开你的日常工作区域的区域中的，最好是在完全不同的地理位置。这是为了防止像火灾、洪水这种可能摧毁你现场数据和备份的灾难。</li></ul></blockquote><p>按照321备份原则做好数据备份，你就具备了充分保护数据，防止灾难性数据丢失的准备。</p><h2 id="服务器上的数据备份"><a href="#服务器上的数据备份" class="headerlink" title="服务器上的数据备份"></a>服务器上的数据备份</h2><img src="https://img.laoda.de/i/2023/09/22/spbwf8-0.webp" alt="5fed802585c251d8d30d5536f32b9a8e.png" style="zoom: 67%;" /><p>这个适合那些手头上VPS不止一台的小伙伴使用。（最好有一台机器硬盘大一点）</p><p>其实之前也和大家已经介绍过了——<a href="https://blog.laoda.de/archives/chatgpt-script-about-vps-backup/index.html">用ChatGPT帮你写一个VPS定时自动备份脚本</a>，不少小伙伴总喜欢尝试一些奇奇怪怪的VPS商家，这些商家说不定哪天就跑路了，但是架不住人家便宜啊，就是忍不住剁手要买，搭配这个脚本，可以让你少丢失一些数据。（开玩笑，任何VPS商家都有丢失数据的可能性，如果你觉得你的数据重要，就一定记得备份）</p><p>这边以Debian 11 系统为例子，如果看咕咕视频比较多的，应该都知道咕咕推荐大家玩docker把各个项目都放<code>/root/data/docker_data</code>目录下（其实更好的是把配置文件和数据分开放），这个脚本就是备份我们的docker项目的，实现的功能如下：</p><p>把A服务器上的<code>/root/data/docker_data</code>目录下的文件每天早上4点钟定时备份到B服务器的<code>/root/data/backup_data</code>文件夹下，</p><ul><li>备份文件在B服务器上最多保存3份，并以时间戳命名。</li><li>B服务器的IP地址是：<code>150.117.211.107</code>, ssh端口是<code>222</code>。（按需修改）</li><li>备份的日志保存在A服务器的<code>/root/logs</code>文件夹下，并且日志包含时间信息</li><li>备份和传输的过程可以显示进度条，并且有提示信息，并且进度条最多显示100%（安装好pv，临时备份文件放在<code>/tmp</code>目录下，上传完成之后可以删掉）</li><li>保留文件原有的属性（所有者等信息）</li><li>恢复备份的时候，只有<code>/root/data/docker_data</code>中的内容而不包括<code>/root/data/...</code>完整路径</li></ul><p>咕咕这边用的备份服务器是<a href="https://blog.laoda.de/archives/vps-hosthatch/index.html">Hosthatch</a>家的大盘鸡，当时65刀&#x2F;3年的价格，有1T的硬盘，还有无限流量的BUG（标的20T，实际不统计流量），还不错的。（他家有过丢数据的情况，所以这个机器咕咕就用来跑下载和备份用了）</p><img src="https://img.laoda.de/i/2023/09/22/spmiwk-0.webp" alt="df9c744aa798d9df038870d916816c2c.png" style="zoom:33%;" /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">cd ~</span><br><span class="line">apt update -y &amp;&amp; apt upgrade -y </span><br><span class="line">apt install pv rsync -y    # 注意A、B服务器上都装上rsync</span><br><span class="line">mkdir script</span><br><span class="line">vim backup.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variables</span></span><br><span class="line">SOURCE_DIR=<span class="string">&quot;/root/data/docker_data/&quot;</span></span><br><span class="line">DEST_DIR=<span class="string">&quot;/root/data/backup_data/&quot;</span></span><br><span class="line">REMOTE_IP=<span class="string">&quot;150.117.211.107&quot;</span></span><br><span class="line">SSH_PORT=222</span><br><span class="line">TMP_BACKUP=<span class="string">&quot;/tmp/data_backup_<span class="subst">$(date +&#x27;%Y%m%d%H%M%S&#x27;)</span>.tar.gz&quot;</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/root/logs/backup_<span class="subst">$(date +&#x27;%Y%m%d&#x27;)</span>.log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start backup</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> - Starting backup...&quot;</span> | <span class="built_in">tee</span> -a <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the backup with tar, display progress with pv</span></span><br><span class="line">tar czfP - <span class="variable">$SOURCE_DIR</span> --absolute-names --transform <span class="string">&#x27;s|^/root/data/||&#x27;</span> | pv -p -t -e -r -s $(<span class="built_in">du</span> -sb <span class="variable">$SOURCE_DIR</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>) &gt; <span class="variable">$TMP_BACKUP</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rsync the backup to the remote server, displaying progress</span></span><br><span class="line">rsync -avhP --remove-source-files -e <span class="string">&quot;ssh -p <span class="variable">$SSH_PORT</span>&quot;</span> <span class="variable">$TMP_BACKUP</span> root@<span class="variable">$REMOTE_IP</span>:<span class="variable">$DEST_DIR</span> | <span class="built_in">tee</span> -a <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove backups in B server exceeding 3</span></span><br><span class="line">ssh -p <span class="variable">$SSH_PORT</span> root@<span class="variable">$REMOTE_IP</span> <span class="string">&quot;cd <span class="variable">$DEST_DIR</span> &amp;&amp; (ls -t | head -n 3; ls) | sort | uniq -u | xargs rm -f&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cleanup temp file in case rsync failed to remove it</span></span><br><span class="line"><span class="built_in">rm</span> -f <span class="variable">$TMP_BACKUP</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date)</span> - Backup completed.&quot;</span> | <span class="built_in">tee</span> -a <span class="variable">$LOG_FILE</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x backup.sh</span><br></pre></td></tr></table></figure><p>A服务器创建好文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> logs</span><br></pre></td></tr></table></figure><p>B服务器创建好文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/data/backup_data/</span><br></pre></td></tr></table></figure><p>A、B服务器之间创建免密码登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在A服务器上</span></span><br><span class="line"></span><br><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line">ssh-keygen    <span class="comment"># 一路回车即可</span></span><br><span class="line"></span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub -p 222 root@150.117.211.107</span><br></pre></td></tr></table></figure><p>每天早上4点执行备份：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>在crontab界面中输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 4 * * * /root/script/backup.sh</span><br></pre></td></tr></table></figure><blockquote><p>脚本操作包含敏感操作，如远程登录、文件传输等，在执行前，应确保所有操作、路径和细节均无问题。<br>可以根据需要修改脚本，比如修改备份文件名、备份路径、备份文件最多保留数目等参数。</p></blockquote><p>咕咕的站点都在<a href="https://blog.laoda.de/archives/vps-bandwagonhost/index.html">搬瓦工</a>和<a href="https://blog.laoda.de/archives/vps-hetzner/index.html">Hetzner</a>上，其中搬瓦工有免费的自动备份，Hetzner也有收费的自动备份功能，咕咕都用上了，搭配这个脚本，一定程度上减少了数据丢失的风险。</p><h2 id="NAS的数据备份"><a href="#NAS的数据备份" class="headerlink" title="NAS的数据备份"></a>NAS的数据备份</h2><img src="https://img.laoda.de/i/2023/09/22/spokpd-0.webp" alt="37f639a2a4f8f78bbdf60881c93d9d9d.png" style="zoom: 33%;" /><p>咕咕之前用的威联通TS-453BMini（8G版本），系统还是比较复杂的（上周挂了小黄鱼打算出掉，有想要接盘的吗）</p><p>前俩周淘了一台群晖的Synology DS920+，发现这个系统才友好嘛。这边就以群晖来举例子。</p><p>首先说说RAID的事情。</p><p>这边直接放出我自己个人的做法：</p><p>不组RAID，不做SHR，全部四块硬盘用的都是BASIC。</p><p>简单聊一下为啥。</p><ul><li>SHR 群晖自己的RAID模式，适合小白，本质上是根据硬盘数量帮你自动组RAID1、RAID5之类的</li><li>RAID0 读写速度翻倍，享受全部硬盘容量，但是一块坏了，数据就全丢了，风险太高（如果你是纯搞PT刷流量可以考虑）</li><li>RAID1 其实本质就是一块硬盘完全同步另一块硬盘的数据，同步的作用，的确是可以一定程度帮忙恢复数据的（一块硬盘坏了），但是对我来说，重要的数据即使丢了一点也很可惜，还是得备份，而且RAID1还损失了一半的硬盘空间。</li><li>RAID5 也有一定的容错能力，但是据说恢复数据非常非常慢，而且最好等你新硬盘到了再拆坏掉的硬盘，不然期间又坏了一块硬盘，你的数据就都没了。而且恢复期间服务用不了，比较讨厌。</li><li>JBOD 这个曾经是咕咕在类似OVH和HZ独立服务器上最想要弄的模式，因为搞PT下载，一个盘只有2T不够用（qb挂载的问题只能有一个路径，换另一个路径似乎这个路径下就做不了种了），把4块2T合在一起，直接变8T就很爽了。最近才知道原来这种情况下万一有一块硬盘坏了，数据也是全丢的，那不如直接上RAID0 了（如果有错误，欢迎评论区指出）</li></ul><p>所以咕咕最后的选择是全部BASIC模式，类似Windows上的CDEF盘一样，彼此不干扰，重要的数据自己再备份。</p><p>备份方案：</p><p>Cloud Sync 挂载 Onedrive备份重要文件（强烈建议大家可以搞一个office365的家庭版）</p><img src="https://img.laoda.de/i/2023/09/22/sppms8-0.webp" alt="5173fadaa9fd2565de71f60e5420355e.png" style="zoom:33%;" /><p>再用 USB Copy，备份一份到移动硬盘上。（咕咕用的是很多年以前的LaCie 1T版本，但是花了529 &#x3D; &#x3D; 没怎么关注移动硬盘了，欢迎大家在评论区推荐性价比高的）</p><img src="https://img.laoda.de/i/2023/09/22/spqu2n-0.webp" alt="a19985c50a9eb7654adcedf0a97845af.png" style="zoom: 33%;" /><p>这样一来，也符合321备份原则，可以放心数据安全问题了。</p><blockquote><p>PS：其实不管是群晖还是威联通，本质都是Linux系统，也都能算“服务器”，完全也可以用前面服务器备份的方法来搞，不过既然这边有现成的套件，咕咕就用套件了</p></blockquote><h2 id="本地电脑的数据备份"><a href="#本地电脑的数据备份" class="headerlink" title="本地电脑的数据备份"></a>本地电脑的数据备份</h2><img src="https://img.laoda.de/i/2023/09/22/sps79s-0.webp" alt="a942fdeea69f1f44966d93cfa84f4cf2.png" style="zoom:80%;" /><p>这边咕咕用的就比较多了，咕咕日常使用的是MacBook Air，我开通了iCloud的2T套餐，手上又有家庭版的1T的Onedrive还有<a href="https://blog.laoda.de/archives/docker-compose-install-nextcloud-aio/index.html">自建的Nextcloud</a></p><p>这边我都用了 &#x3D; &#x3D;</p><p>文稿和桌面文件夹用iCloud同步，和家里的MacMini配合使用起来还不错。</p><p>工作的文件大部分都在Onedrive里头，这个Windows电脑、Mac电脑都能同步，上下班不用再背电脑回去了。</p><p>挂载Nextcloud一般放一些个人的资料。Nextcloud有一个问题就是它没办法和iCloud和Onedrive一样有个“释放本地空间”的功能，这样会比较占本地的空间，没法想下载下载想释放空间释放空间，有点遗憾。</p><p>以上。写的有点粗糙，希望能够给大家有所启发。</p><p>有问题，或者文中有什么错误的地方也欢迎大家在评论区交流指正。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天在整理文件，正好稍微梳理一下自己在不同设备上的备份方法，简单和大家分享下。（有不对的地方或者更好的建议欢迎评论区指出～）&lt;/p&gt;
&lt;p&gt;先简单介绍一个ChatGPT给出的321备份策略（有很多种说法，这个是其中一种）：&lt;/p&gt;
&lt;img src=&quot;https://img</summary>
      
    
    
    
    <category term="有用的小知识" scheme="https://blog.laoda.de/categories/%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="备份" scheme="https://blog.laoda.de/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="NAS" scheme="https://blog.laoda.de/tags/NAS/"/>
    
    <category term="iCloud" scheme="https://blog.laoda.de/tags/iCloud/"/>
    
    <category term="Onedrive" scheme="https://blog.laoda.de/tags/Onedrive/"/>
    
  </entry>
  
  <entry>
    <title>下架多年，重磅回归！搬瓦工传家宝49美元 CN2 GIA套餐回来了！这次还有限量版免费更换IP套餐！</title>
    <link href="https://blog.laoda.de/archives/bwg-promotion-2023/"/>
    <id>https://blog.laoda.de/archives/bwg-promotion-2023/</id>
    <published>2023-09-12T13:05:23.000Z</published>
    <updated>2023-09-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>车已经开走了！</strong></p><p>非常建议大家使用新邮箱购买！万一不要了可以出手。（49刀这款之前二手市场溢价贼高 &#x3D; &#x3D;）</p><p>咕咕已经入手一个了 &#x3D; &#x3D;</p><p><img src="https://img.laoda.de/i/2023/09/12/zmh8f5-0.webp" alt="image-20230912215404833"></p><p>一张图告诉你为啥要买：</p><img src="https://img.laoda.de/i/2023/09/13/tyk9g9-0.webp" alt="image-20230913181155450" style="zoom:67%;" /><p>偷懒，以下是ChatGPT生成的：</p><p>亲爱的网络爱好者们，搬瓦工正在推出他们的全新套餐——FREEDOM PLAN。这个精心打造的计划，仅适用于 DC2 AO Coresite 机房，只需$89&#x2F;年，就可以享受2核 CPU、2GB 内存、40GB SSD 硬盘、2000GB 流量以及高达2.5Gbps的带宽——这是你所需要的一切，尽在这个包里！</p><p>最值得一提的是，此套餐独有的优惠——每两周都可以免费更换一次 IP 地址。想象一下这样的自由和便利，每14天，都有新的开始等你接受。更为独特的是，你无需为更换 IP 换得头痛而烦恼，一切都已在这份套餐里包含了。</p><p>不仅如此，今天是个特殊的日子，搬瓦工正与前所未有的慷慨心情为你重新上架一款备受热爱的产品——洛杉矶DC6 CN2 GIA-E限量版。这款产品已经下架多年，如今又重磅回归，仅需$46.59&#x2F;年。别忘了，还有 DC9、日本软银等多款限量版套餐都重新上架了。</p><p>这是一个不可多得的机会，无论你是刚入手的初学者，还是寻求网络性能升级的专业人士，我们的新款优化线路的产品都能满足你的需求。如果你一直在寻找一款性价比高的机器，那么今天就是你找寻的那一天。别犹豫！立即享受搬瓦工为你实现的一切网络自由的可能性吧。</p><p><img src="https://img.laoda.de/i/2023/09/12/xx85tb-0.webp" alt="搬瓦工，上架两周免费更换IP套餐年付89美元，并补货美西DC6/DC9/日本软银等限量套餐/年付49美元起"></p><h4 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h4><p><strong>网址</strong>： <strong><a href="https://bwh81.net/aff.php?aff=67086">https://bwh81.net</a></strong></p><p>日常6.81%优惠码：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV</a></p><p>搬瓦工介绍：<a href="https://blog.laoda.de/archives/vps-bandwagonhost">https://blog.laoda.de/archives/vps-bandwagonhost</a></p><h4 id="2、搬瓦工年付-49-99美元-CN2-GIA套餐补货（最推荐！！！）"><a href="#2、搬瓦工年付-49-99美元-CN2-GIA套餐补货（最推荐！！！）" class="headerlink" title="2、搬瓦工年付$49.99美元 CN2 GIA套餐补货（最推荐！！！）"></a>2、搬瓦工年付$49.99美元 CN2 GIA套餐补货（最推荐！！！）</h4><p>SPECIAL 10G KVM PROMO V5 - LOS ANGELES - CN2 GIA LIMITED EDITION</p><p>三网CN2 GIA（移动去程直连）线路。可选 DC6 CN2 GIA-E、DC9 CN2 GIA、日本软银、荷兰联通 9929 等机房。</p><p>可用机房预览：</p><p><img src="https://img.laoda.de/i/2023/09/13/91awo-0.webp" alt="image-20230913001515552"></p><p>测试IP：65.49.131.102</p><ul><li>内存：512M</li><li>CPU：1核</li><li>硬盘：10G SSD</li><li>流量：500G&#x2F;月</li><li>带宽：1Gbps</li><li>价格：$49.99&#x2F;年（可使用：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV</a>）</li><li><a href="https://bwh81.net/aff.php?aff=67086&pid=94"><strong>购买链接</strong></a></li></ul><h4 id="3、FREEDOM-PLAN-限量版套餐-不可切换机房（对IP有需求的推荐！！！）"><a href="#3、FREEDOM-PLAN-限量版套餐-不可切换机房（对IP有需求的推荐！！！）" class="headerlink" title="3、FREEDOM PLAN 限量版套餐 -不可切换机房（对IP有需求的推荐！！！）"></a>3、FREEDOM PLAN 限量版套餐 -不可切换机房（对IP有需求的推荐！！！）</h4><p>特色：每两周可免费更换一次 IP 地址。</p><p>网络：三网双程直连，走的都是各自的骨干线路。</p><p>测试 IP：65.49.198.195</p><ul><li>内存：2G</li><li>CPU：2核</li><li>硬盘：40G SSD</li><li>流量：2000G&#x2F;月</li><li>带宽：2.5Gbps</li><li>价格：$89&#x2F;年（可使用：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV</a> 优惠6.81%，折后价$82.94美元。）</li><li><a href="https://bwh81.net/aff.php?aff=67086&pid=133"><strong>购买链接</strong></a></li></ul><h4 id="4、DC9-CN2-GIA-限量版-VPS补货"><a href="#4、DC9-CN2-GIA-限量版-VPS补货" class="headerlink" title="4、DC9 CN2 GIA 限量版 VPS补货"></a>4、DC9 CN2 GIA 限量版 VPS补货</h4><p>SPECIAL 20G KVM PROMO V3 - LOS ANGELES - CN2 GIA LIMITED EDITION DC9 VPS</p><p>三网CN2 GIA（移动去程直连）线路。可使用 DC9 CN2 GIA、DC3 CN2 等机房（不能用 DC6、软银、EUNL_9）</p><p>测试IP：65.49.131.102</p><ul><li>内存：1G</li><li>CPU：1核</li><li>硬盘：20G SSD</li><li>流量：500G&#x2F;月</li><li>带宽：1Gbps</li><li>价格：$79.99&#x2F;年（可使用：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV </a> 优惠6.58%，折后 $74.73&#x2F;年）</li><li><a href="https://bwh81.net/aff.php?aff=67086&pid=112"><strong>购买链接</strong></a></li></ul><h4 id="4、DC6-CN2-GIA-E-限量版-VPS-89-9美元款（建站推荐！！！）"><a href="#4、DC6-CN2-GIA-E-限量版-VPS-89-9美元款（建站推荐！！！）" class="headerlink" title="4、DC6 CN2 GIA-E 限量版 VPS - 89.9美元款（建站推荐！！！）"></a>4、DC6 CN2 GIA-E 限量版 VPS - 89.9美元款（建站推荐！！！）</h4><p>三网CN2 GIA（移动去程直连）线路。可切换机房：美西DC6（USCA_6）、DC9（USCA_9）、日本软银 (JPOS_1)、荷兰（EUNL_9）等</p><blockquote><p>目前可在购买后升级到 CN2 GIA-E 40G 限量版，仅需10美元配置翻倍。</p></blockquote><ul><li>内存：1G</li><li>CPU：1核</li><li>硬盘：20G SSD</li><li>流量：500G&#x2F;月</li><li>带宽：1Gbps</li><li>价格：$89.99&#x2F;年（可使用：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV</a> 优惠6.81%，折后价83.86美元。）</li><li><a href="https://bwh81.net/aff.php?aff=67086&pid=105"><strong>购买链接</strong></a></li></ul><h4 id="5、日本软银限量版套餐补货"><a href="#5、日本软银限量版套餐补货" class="headerlink" title="5、日本软银限量版套餐补货"></a>5、日本软银限量版套餐补货</h4><p>三网双程都是走的日本软银，此外移动去程为cmi线路。日本软银 (JPOS_1)，不可更换机房。</p><ul><li>内存：512M</li><li>CPU：1核</li><li>硬盘：10G SSD（RAID-10）</li><li>流量：500G&#x2F;月</li><li>带宽：1Gbps</li><li>价格：$69.99&#x2F;年（可使用：<a href="https://bwh81.net/aff.php?aff=67086">BWHNCXNVXV </a> 优惠6.58%）</li><li><a href="https://bwh81.net/aff.php?aff=67086&pid=104"><strong>购买链接</strong></a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;车已经开走了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;非常建议大家使用新邮箱购买！万一不要了可以出手。（49刀这款之前二手市场溢价贼高 &amp;#x3D; &amp;#x3D;）&lt;/p&gt;
&lt;p&gt;咕咕已经入手一个了 &amp;#x3D; &amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    <category term="VPS推荐" scheme="https://blog.laoda.de/categories/VPS%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="CN2 GIA" scheme="https://blog.laoda.de/tags/CN2-GIA/"/>
    
    <category term="搬瓦工" scheme="https://blog.laoda.de/tags/%E6%90%AC%E7%93%A6%E5%B7%A5/"/>
    
  </entry>
  
  <entry>
    <title>无惧DDOS，无需开放额外端口，无需服务器，随时随地访问局域网Web应用——Cloudflare Tunnel</title>
    <link href="https://blog.laoda.de/archives/cloudflare-tunnel/"/>
    <id>https://blog.laoda.de/archives/cloudflare-tunnel/</id>
    <published>2023-09-09T12:18:19.000Z</published>
    <updated>2023-09-09T13:22:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>利用这个方法，可以让你在局域网（尤其是NAS）上搭建的web应用支持公网访问，成本低而且操作简单！</p><p>如果是博客的话还可以有效防止DDOS攻击！</p><blockquote><p>对于联通用户可能不太友好，据咕咕所知很多地区联通用户访问不了Cloudflare的节点</p></blockquote><h2 id="1-视频"><a href="#1-视频" class="headerlink" title="1. 视频"></a>1. 视频</h2><p>文字比较简略，强烈建议搭配视频食用！</p><p>YouTube：<a href="https://youtu.be/Q_xB3433WTg">https://youtu.be/Q_xB3433WTg</a></p><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV1pj411C78j/">https://www.bilibili.com/video/BV1pj411C78j/</a></p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul><li>一个域名（推荐<a href="https://loll/cc.ns">Namesilo</a>注册，输入优惠码<code>laodade</code>或者<code>gugugee</code>可以便宜1美元）</li><li>一张外币信用卡或者PayPal</li></ul><h2 id="3-配置域名"><a href="#3-配置域名" class="headerlink" title="3. 配置域名"></a>3. 配置域名</h2><h3 id="3-1-注册Namesilo"><a href="#3-1-注册Namesilo" class="headerlink" title="3.1 注册Namesilo"></a>3.1 注册Namesilo</h3><p><img src="https://img.laoda.de/i/2023/09/09/vq76zf-0.webp" alt="fea8081ce89bea90ea01ef29cd2fce7a.png"></p><h3 id="3-2-注册CloudFlare"><a href="#3-2-注册CloudFlare" class="headerlink" title="3.2 注册CloudFlare"></a>3.2 注册CloudFlare</h3><p><img src="https://img.laoda.de/i/2023/09/09/vr7bz2-0.webp" alt="ab221202a98a188093d1ed8bf1630f5c.png"></p><h3 id="3-3-更换DNS解析"><a href="#3-3-更换DNS解析" class="headerlink" title="3.3 更换DNS解析"></a>3.3 更换DNS解析</h3><p><img src="https://img.laoda.de/i/2023/09/09/w1lfqa-0.webp" alt="image-20230909193757157"></p><h2 id="4-开通CloudFlare-Tunnel"><a href="#4-开通CloudFlare-Tunnel" class="headerlink" title="4. 开通CloudFlare Tunnel"></a>4. 开通CloudFlare Tunnel</h2><p>绑定一个支付方式，实际CF并不会扣钱。</p><p><img src="https://img.laoda.de/i/2023/09/09/xrzzrt-0.webp" alt="2023-09-09-0002"></p><h2 id="5-群晖配置Cloudflared"><a href="#5-群晖配置Cloudflared" class="headerlink" title="5. 群晖配置Cloudflared"></a>5. 群晖配置Cloudflared</h2><h3 id="5-1-使用图形化界面安装Cloudflared"><a href="#5-1-使用图形化界面安装Cloudflared" class="headerlink" title="5.1 使用图形化界面安装Cloudflared"></a>5.1 使用图形化界面安装Cloudflared</h3><p><img src="https://img.laoda.de/i/2023/09/09/vszu81-0.webp" alt="image-20230909192313776"></p><p><img src="https://img.laoda.de/i/2023/09/09/vt5hum-0.webp" alt="image-20230909192339730"></p><p><img src="https://img.laoda.de/i/2023/09/09/vtlx6v-0.webp" alt="image-20230909192415905"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiNGQ4ZGY0ZjVjODJjYmY0MmUwNjg3NmRmZWZmZmZlODIieLCJ0IjoiODY3YjgzNGMtNWFkYy00O0TI3LTkyN2MtYmQyNWUzYzk5MTUyIiwicyI6Ik1EVmpaalEwT0RVdE1URmlPUzAwTW1JeExUZ3wlOVGNr0TjJFeU9EZzFNV1kxTTJNMyJ9</span><br></pre></td></tr></table></figure><p>命令填：<code>tunnel run --token eyJhIjoiNGQ4ZGY0ZjVjODJjYmY0MmUwNjg3NmRmZWZmZmZlODIieLCJ0IjoiODY3YjgzNGMtNWFkYy00O0TI3LTkyN2MtYmQyNWUzYzk5MTUyIiwicyI6Ik1EVmpaalEwT0RVdE1URmlPUzAwTW1JeExUZ3wlOVGNr0TjJFeU9EZzFNV1kxTTJNMyJ9</code>即可。</p><h3 id="5-2-使用命令行安装Cloudflared（推荐）"><a href="#5-2-使用命令行安装Cloudflared（推荐）" class="headerlink" title="5.2 使用命令行安装Cloudflared（推荐）"></a>5.2 使用命令行安装Cloudflared（推荐）</h3><h4 id="5-2-1-打开SSH"><a href="#5-2-1-打开SSH" class="headerlink" title="5.2.1 打开SSH"></a>5.2.1 打开SSH</h4><p><img src="https://img.laoda.de/i/2023/09/09/vrewat-0.webp" alt="f319dbbe140bba2de1c8672eb28adea3.png"></p><h4 id="5-2-2-运行"><a href="#5-2-2-运行" class="headerlink" title="5.2.2 运行"></a>5.2.2 运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiNGQ4ZGY0ZjVjODJjYmY0MmUwNjg3NmRmZWZmZmZlODIieLCJ0IjoiODY3YjgzNGMtNWFkYy00O0TI3LTkyN2MtYmQyNWUzYzk5MTUyIiwicyI6Ik1EVmpaalEwT0RVdE1URmlPUzAwTW1JeExUZ3wlOVGNr0TjJFeU9EZzFNV1kxTTJNMyJ9</span><br></pre></td></tr></table></figure><p>这条命令的完整解释如下：</p><ul><li><p><code>docker run</code>: 这是用来启动一个新容器的命令。</p></li><li><p><code>-d</code>: 这个选项让 Docker 在后台运行这个容器，并且返回容器 ID。</p></li><li><p><code>--restart=always</code>: 如上所述，这将设置容器的重启策略为始终重启。</p></li><li><p><code>cloudflare/cloudflared:latest</code>: 这是你想运行的 Docker 镜像。具体来说，你正在运行 Cloudflare 的 <code>cloudflared</code> 镜像的最新版本。</p></li><li><p><code>tunnel --no-autoupdate run --token eyJhI...J9</code>: 这些是传递给 <code>cloudflared</code> 镜像的参数，用于配置和运行你的 tunnel。</p></li></ul><p>这条命令将启动一个新的 <code>cloudflared</code> 容器，这个容器将始终在后台运行，并在停止后自动重新启动。</p><h2 id="6-CF后台配置"><a href="#6-CF后台配置" class="headerlink" title="6. CF后台配置"></a>6. CF后台配置</h2><p><img src="https://img.laoda.de/i/2023/09/09/w6c4s4-0.webp" alt="tunnel-0001"></p><p><img src="https://img.laoda.de/i/2023/09/09/w6o85h-0.webp" alt="tunnel-0003"></p><p><img src="https://img.laoda.de/i/2023/09/09/w6u68w-0.webp" alt="tunnel-0004"></p><p><img src="https://img.laoda.de/i/2023/09/09/w6wb6z-0.webp" alt="tunnel-0005"></p><p><img src="https://img.laoda.de/i/2023/09/09/w78iec-0.webp" alt="tunnel-0006"></p><p><img src="https://img.laoda.de/i/2023/09/09/w7b09s-0.webp" alt="tunnel-0007"></p><h2 id="7-添加额外认证"><a href="#7-添加额外认证" class="headerlink" title="7. 添加额外认证"></a>7. 添加额外认证</h2><p><img src="https://img.laoda.de/i/2023/09/09/w7e4k8-0.webp" alt="tunnel-0008"></p><p><img src="https://img.laoda.de/i/2023/09/09/w7ifp5-0.webp" alt="tunnel-0009"></p><p><img src="https://img.laoda.de/i/2023/09/09/w7suox-0.webp" alt="tunnel-0011"></p><p><img src="https://img.laoda.de/i/2023/09/09/w7uoar-0.webp" alt="tunnel-0012"></p><p><img src="https://img.laoda.de/i/2023/09/09/w7wkpv-0.webp" alt="tunnel-0013"></p><p><img src="https://img.laoda.de/i/2023/09/09/w8195d-0.webp" alt="tunnel-0017"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;利用这个方法，可以让你在局域网（尤其是NAS）上搭建的web应用支持公网访问，成本低而且操作简单！&lt;/p&gt;
&lt;p&gt;如果是博客的话还可以有效防止DDOS攻击！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于联通用户可能不太友好，据咕咕所知很多地区联通用户访问不了Cloudfla</summary>
      
    
    
    
    <category term="有用的小知识" scheme="https://blog.laoda.de/categories/%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="NAS" scheme="https://blog.laoda.de/tags/NAS/"/>
    
    <category term="Cloudflare Tunnel" scheme="https://blog.laoda.de/tags/Cloudflare-Tunnel/"/>
    
  </entry>
  
  <entry>
    <title>【好玩儿的Docker项目】Nextcloud All-in-One 全新搭建分享，拒绝繁琐配置，开箱即用！维护简单！</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-nextcloud-aio/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-nextcloud-aio/</id>
    <published>2023-08-26T01:20:35.000Z</published>
    <updated>2023-09-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><img src="https://img.laoda.de/i/2023/08/25/rbpf7g-0.webp" alt="IMG_9771C6762B1A-1.jpeg" style="zoom:33%;" /><p>百度网盘，咕咕已经好久没用了，准确来说，百度的产品，咕咕已经好久没用了，今天收到了这条短信，打算偷偷用公司的百度会员把之前存的一些老古董学习资料转移备份一波。</p><p>问题来了，东西放哪？</p><p>咕咕目前用的主力存储空间是：</p><ul><li>1T的office 365的Onedrive</li><li>1T的Google One</li><li>2T的iCloud 家庭组</li></ul><p>这些都是第三方的大厂，而且相对来说比较靠谱。</p><p>然而，谷歌也不乏因为用户图库里面有小孩子下体的照片，误判为儿童色情内容，把用户账号封禁的例子。要想要真正把数据掌握在自己手里，还是得多备份。</p><p>或者说，自建一个网盘，多备份。</p><p>Nextcloud是非常有名的开源网盘，功能丰富。</p><p>之前和大家介绍过Nextcloud的搭建方法：</p><p>宝塔版本：</p><p><a href="https://blog.laoda.de/archives/nextcloud-aapanel-install/index.html">【好玩的项目】可能是史上最全的基于宝塔面板（海外版 aapanel）的 Nextcloud 网盘搭建教程！</a></p><p>无面板版本：<br><a href="https://blog.laoda.de/archives/docker-compose-install-nextcloud/index.html">【好玩儿的 Docker 项目】可能是目前全网最完整的 Docker 搭建 Nextcloud 教程（包含安全与设置警告报错信息的解决方法）</a></p><p>以上任意一个搭建方法，搭完之后都要处理一堆的问题，很是累人。</p><p>根据小伙伴们的反馈，用上述方法搭建完成之后，想要装onlyoffice等一些插件也会多多少少遇到一些奇奇怪怪的问题。</p><p>今天我们就来分享如何彻底解决以上安装Nextcloud的痛点。</p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><img src="https://img.laoda.de/i/2023/08/25/rbrisj-0.webp" alt="5d00cf8124b264eacc182aba357bd3fd.png" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/08/25/rbugyf-0.webp" alt="2fb495fb09994de60f232fff0335b16b.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rbvqbx-0.webp" alt="e0ddba048766714b8c2f66c8bfa58369.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rc5xl9-0.webp" alt="348e8be10f8ee969184740aae3df03b9.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rc7cu0-0.webp" alt="4d4f7027061390bac462a74e8f0b6a11.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rc9g7x-0.webp" alt="1b6cf331c449698c1cf0c812814767a6.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcaz1j-0.webp" alt="f9015a710ade4e45cc21e94b37fa2765.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rccdiu-0.webp" alt="039659b98a430182355bcbd237cd502a.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcdn10-0.webp" alt="5955d14f93f6f115c6cb83eb83b6e2ba.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcesnv-0.webp" alt="18bb49ff699fe6c4e401837fa89f96d4.png" style="zoom:33%;" /><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>支持docker一键部署，用容器部署容器</li><li>更新简单</li><li>高性能后端</li><li>支持全局搜索</li><li>支持Nextcloud Talk</li><li>支持ClamAV（Nextcloud的杀毒软件后端）</li><li>支持全套办公套件</li><li>支持备份（基于BorgBackup）</li><li>省心省力</li><li>文档及其丰富（各种地方的搭建教程均有）<br>……</li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>GitHub官方仓库：<a href="https://github.com/nextcloud/all-in-one">https://github.com/nextcloud/all-in-one</a><br>官方Docker镜像：<a href="https://hub.docker.com/r/nextcloud/all-in-one">https://hub.docker.com/r/nextcloud/all-in-one</a><br>官方反代相关文档地址：<a href="https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md">https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md</a> （支持各种反代）</p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕演示搭建用的是香港的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择<a href="https://blog.laoda.de/vps/">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script/">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker/">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议2G以上，越大越好！硬盘也是越大越好</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube"><a href="#5-1-YouTube" class="headerlink" title="5.1 YouTube"></a>5.1 YouTube</h3><p>视频地址：<a href="https://youtu.be/CapStYi-Djs">https://youtu.be/CapStYi-Djs</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV1Yu4y1X7yX">https://www.bilibili.com/video/BV1Yu4y1X7yX</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png" style="zoom:33%;" /><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不建议用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png" style="zoom:25%;" /><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager/">https://blog.laoda.de/archives/nginxproxymanager/</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/aio-nextcloud</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/aio-nextcloud</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><p>以下是咕咕修改的，可以看看有啥不一样（具体见视频）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="attr">nextcloud_aio_mastercontainer:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">nextcloud_aio_mastercontainer</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> <span class="attr">nextcloud:</span></span><br><span class="line">   <span class="attr">image:</span> <span class="string">nextcloud/all-in-one:latest</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">nextcloud-aio-mastercontainer</span></span><br><span class="line">   <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">nextcloud_aio_mastercontainer:/mnt/docker-aio-config</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line">   <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8080</span> <span class="comment"># change the port on the left side if it&#x27;s already in use on your host system.</span></span><br><span class="line">   <span class="attr">environment:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">APACHE_PORT=11000</span>  <span class="comment"># change this port number if 11000 is already in use on your host system.</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">APACHE_DISABLE_REWRITE_IP=1</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">NEXTCLOUD_TRUSTED_DOMAINS=pan.gugu.ovh</span> <span class="number">31.22</span><span class="number">.109</span><span class="number">.18</span> <span class="comment"># Your domain name + proxy host IP</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">TRUSTED_PROXIES=31.22.109.18</span> <span class="comment"># proxy host IP</span></span><br></pre></td></tr></table></figure><p>大家修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code>和<code>11000</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom: 25%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom: 25%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>aio-nextcloud</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom: 25%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问了。</p><p>但是这边我们需要先搞一下反向代理！</p><p>做反向代理前，你需要一个域名！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo/">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282" style="zoom:33%;" /><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2023/08/25/rcrfvt-0.webp" alt="c1352ab7d41b750af109fe70df9838fb.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcsx5o-0.webp" alt="a289ca549a9d1d79348aefac66486f2e.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcuk4b-0.webp" alt="e1f240a840f498e5869a29dc0f9348bd.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/rcvy7u-0.webp" alt="b8c1b61838dc0ca9a2c6d8d220fb97d5.png" style="zoom:33%;" /><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">client_body_buffer_size</span> <span class="number">512k</span>;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">86400s</span>;</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>11000</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 aio-nextcloud 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>aio-nextcloud</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>然后输入：<a href="https://ip:8090/">https://ip:8090</a> 进入安装页面。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom: 33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:11000/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom: 33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D;</p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>建议参考视频，或者结合官方文档食用：<a href="https://github.com/nextcloud/all-in-one">https://github.com/nextcloud/all-in-one</a></p><h3 id="8-1-登录"><a href="#8-1-登录" class="headerlink" title="8.1 登录"></a>8.1 登录</h3><p>输入<code>https://ip:8090</code>，登录nextcloud后台安装页面。</p><p>记住这个密码：</p><img src="https://img.laoda.de/i/2023/08/25/rddvv2-0.webp" alt="403eecf1f240d71c1fb50ed58b6bc92e.png" style="zoom: 33%;" /><p>输入密码：</p><img src="https://img.laoda.de/i/2023/08/25/rdflfi-0.webp" alt="04a2c5341a79f40a5452faa45c466001.png" style="zoom:33%;" /><p>输入你在<code>docker-compose.yml</code>填的域名：</p><img src="https://img.laoda.de/i/2023/08/25/rdi7xw-0.webp" alt="692c6b9a57842b0f893f68d83bb3ac26.png" style="zoom:33%;" /><p>选择想要额外安装的容器（我这边全选了，注意全选的话内存官方建议8G以上）</p><img src="https://img.laoda.de/i/2023/08/25/rdjszs-0.webp" alt="ed7035cb2b4d39a1aecf14b03880bc09.png" style="zoom:33%;" /><p>等全绿了说明安装好了，这个过程根据你服务器的性能时间长短不一，慢的可能要10分钟。</p><img src="https://img.laoda.de/i/2023/08/25/re5x6j-0.webp" alt="2ee0014bea22791be8fea1c10aa99044.png" style="zoom:33%;" /><p>耐心等待之后，搞定啦！</p><img src="https://img.laoda.de/i/2023/08/25/re7vkj-0.webp" alt="21bdcf0cb22e65f6a1b42efd6a835eef.png" style="zoom:33%;" /><h3 id="8-2-更新-aio-nextcloud"><a href="#8-2-更新-aio-nextcloud" class="headerlink" title="8.2 更新 aio-nextcloud"></a>8.2 更新 aio-nextcloud</h3><p>同样进入安装页面，点击更新即可。</p><h3 id="8-3-卸载-aio-nextcloud"><a href="#8-3-卸载-aio-nextcloud" class="headerlink" title="8.3 卸载 aio-nextcloud"></a>8.3 卸载 aio-nextcloud</h3><p>同样进入安装页面，先停止所有容器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/aio-nextcloud</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/aio-nextcloud  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>你还需要查看一下volume，删除volume。</p><p>可以卸载得很干净。</p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><h3 id="9-1-导出数据插件似乎有问题"><a href="#9-1-导出数据插件似乎有问题" class="headerlink" title="9.1 导出数据插件似乎有问题"></a>9.1 导出数据插件似乎有问题</h3><img src="https://img.laoda.de/i/2023/08/25/reaatk-0.webp" alt="b280834aa5396bbb25e508e1c999eed1.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/s4haku-0.webp" alt="3d2724e28a18c0fafb237ec58880c923.png" style="zoom:33%;" /><h3 id="9-2-迁移服务器很丝滑"><a href="#9-2-迁移服务器很丝滑" class="headerlink" title="9.2 迁移服务器很丝滑"></a>9.2 迁移服务器很丝滑</h3><p>咕咕实测很顺利，主要就是找到你备份的那个borg文件夹位置（备份的密码也千万记得），把他迁移到新的服务器上，然后重新运行一下<code>docker-compose.yml</code>文件即可</p><p>登录安装页面之后，选择恢复文件（注意选对borg的路径），输入密码，后台就会先起一个borg的容器，等备份恢复了之后，再次登录安装页面，再启动其他的容器即可。</p><p>下面是几张咕咕自测的参考图：</p><img src="https://img.laoda.de/i/2023/08/25/s4x05z-0.webp" alt="002f91235efbdd321995f71877645c16.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/s6tp39-0.webp" alt="1f7eeac788a7110a479e7238ab2512e2.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/25/s74w6e-0.webp" alt="17348b5f7579b56c827631cf75fbfe47.png" style="zoom:33%;" /><p>9.3 删除备份（更换备份文件夹路径）</p><p>本地先删除原来的borg文件夹，然后在服务器输入<code>sudo docker exec nextcloud-aio-mastercontainer rm /mnt/docker-aio-config/data/borg.config</code> 之后通过Nextcloud后台进入管理页面：</p><img src="https://img.laoda.de/i/2023/09/19/nnja10-0.webp" alt="image-20230919143024342" style="zoom:50%;" /><p>就可以重新设置一个备份目录了。</p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/nextcloud/all-in-one/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/nextcloud/all-in-one">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub官方仓库：<a href="https://github.com/nextcloud/all-in-one">https://github.com/nextcloud/all-in-one</a><br>官方Docker镜像地址：hub.docker.com&#x2F;r&#x2F;nextcloud&#x2F;all-in-one</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;img src=&quot;https://img.laoda.de/i/2023/08/25/rbpf7g-0.webp&quot; alt=&quot;I</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="DockerCompose" scheme="https://blog.laoda.de/tags/DockerCompose/"/>
    
    <category term="Docker部署" scheme="https://blog.laoda.de/tags/Docker%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Nextcloud" scheme="https://blog.laoda.de/tags/Nextcloud/"/>
    
    <category term="开源网盘" scheme="https://blog.laoda.de/tags/%E5%BC%80%E6%BA%90%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Hetzner独立服务器（拍卖机）测评及折腾不完全指南</title>
    <link href="https://blog.laoda.de/archives/hetzner-dedicated-sb/"/>
    <id>https://blog.laoda.de/archives/hetzner-dedicated-sb/</id>
    <published>2023-08-24T10:00:30.000Z</published>
    <updated>2023-08-24T10:34:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕斥巨资买了一台Hetzner的独立服务器（<a href="https://www.hetzner.com/sb">拍卖机</a>），官方售价27.7欧&#x2F;月。</p><img src="https://img.laoda.de/i/2023/08/24/rc87dd-0.webp" alt="image.png" style="zoom:50%;" /><p>下面就来简单测评一下，供大家参考。</p><p>关于Hetzner的介绍，大家可以移步至：<a href="https://blog.laoda.de/archives/vps-hetzner/index.html">【VPS 选购分享】Hetzner—— 欧洲阿里云！性能小钢炮！非常适合跑业务，还有适合刷 PT 的神鸡！</a></p><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p>首先还是请出秋水的 bench.sh 脚本，这个脚本可以查看 Linux 系统信息，还可以测试网络带宽及硬盘读写速率。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure><p>运行后如图：</p><img src="https://img.laoda.de/i/2023/08/23/sjs0x8-0.webp" alt="image.png" style="zoom:33%;" /><p>上图第一部分就是 Linux 的详细信息，可以看到 CPU 型号、8核心、内存64G、硬盘买的时候是说512Gx2也就是1T（但是显示是936.7G）、Dedicated 杜甫、Hz自建机房，机房位置纽伦堡等信息。</p><p>第二部分也就是硬盘读写速率，硬盘一般分为 HHD、SSD、NVMe 三类， 正常 SSD 硬盘的 IO 一般在 300MB&#x2F;S 左右，差一点 200MB&#x2F;S 左右，100MB&#x2F;S 以下这种的就是石头盘了，没法用。这边咕咕的是NVMe的盘，正常应该就是900-1000MB&#x2F;S。</p><p>第三部分就是上传下载速率了，这个可以看出服务器的带宽，上传下载的速率，这个机器是 1G 口的基本也跑满了，国内稍微有点差。</p><p>总结一下，上面大家要注意的几个点：</p><p>1、如果是VPS，虚拟方式一定注意是不是 KVM，因为有些商家用的 OpenVZ 虚拟技术而故意不说明，OpenVZ 的缺点是不能修改内核也就不能开启 BBR 和可以随意超售。独立服务器的话，一般就是显示Dedicated了。</p><p>2、硬盘的 IO 差，一般是因为母鸡超售过多造成了，看 IO 数值就可以看出 VPS 有没有超售。独立服务器的话没有超售一说，如果你选的HDD硬盘（假设两块硬盘），觉得IO速度实在过低，还可以选择组raid 0，这样速度会翻倍，但是raid 0 只要有一块硬盘坏了，数据都会丢失，这个得权衡考量。</p><p>3、Speed 测速可以直观地看出 VPS 的带宽，一般G口就是 1000Mbps，百兆口也就是 100Mbps，10G 口也就是高于10000Mbps</p><h3 id="线路测试"><a href="#线路测试" class="headerlink" title="线路测试"></a>线路测试</h3><p>线路测试包括去程和回程，去程是针对的上传数据，回程一般是指下载数据也就是 VPS 回传数据。因此一个 IP 的路由好坏，看回程才有参考价值，去程反而不是那么重要了。</p><p>下面就看看回程路由：</p><h4 id="回程测试"><a href="#回程测试" class="headerlink" title="回程测试"></a>回程测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- git.io/besttrace | bash</span><br></pre></td></tr></table></figure><img src="https://img.laoda.de/i/2023/08/23/snxui6-0.webp" alt="image.png" style="zoom:33%;" /><p>这个机器电信回程是直连的，移动和联通脚本问题没测，回程应该不是很理想，线路不咋地，这也是这台机器最大的缺点。（一般这种情况下，会考虑套CloudFlare的CDN使用，所谓带上套，大家都一样，众生平等。）</p><h4 id="去程测试"><a href="#去程测试" class="headerlink" title="去程测试"></a>去程测试</h4><p>下面看看去程，一般来说流量是不对等的，回复流量基本上是请求流量的数倍。</p><p>就比如，你浏览本站的文章，点击一个网址就可以了，电脑把网址发到本博位于国外的服务器，数据一般小于 1KB。但是本站回复你文章内容，里面的文字、图片、脚本等各种资源，压缩后至少也是几十KB，这个过程中去程和回程数据有数倍的差异。如果你看的是油管的视频，出国的流量可能就几兆，但是传过来的视频可能上G，数据相差上百倍。</p><p>所以你应该明白了上面为什么说去程没啥参考价值，因为它压根就不堵。当然，既然写到了去程这个话题，还是留下测试去程的方法：</p><p>打开下面的网址，左边选择你附近的服务器，然后右边填上你的 VPS IP 就可以查看去程路由了：</p><p><a href="https://tools.ipip.net/traceroute.php">https://tools.ipip.net/traceroute.php</a></p><p>上海电信</p><img src="https://img.laoda.de/i/2023/08/24/pgiamt-0.webp" alt="image.png" style="zoom:33%;" />上海联通<img src="https://img.laoda.de/i/2023/08/24/ph1aif-0.webp" alt="image.png" style="zoom:33%;" />上海移动<img src="https://img.laoda.de/i/2023/08/24/phimjb-0.webp" alt="image.png" style="zoom:33%;" /><h4 id="ping值查询"><a href="#ping值查询" class="headerlink" title="ping值查询"></a>ping值查询</h4><p>当然，不能忘了各运营商的 ping 值查询，这算是一个直观且简单的查询方式，如图，如果下面国内部分全线飘红，说明丢包严重，ping 值亚洲 VPS 在 100ms 左右属正常范围，美帝 VPS 在 250ms 左右属正常范围，欧洲在250-300ms左右。</p><p>当然，这些数值受时段的影响比较大，建议北京时间 22：00 - 23：00 高峰期（俗称晚高峰）测试。</p><p><a href="https://ping.pe/">https://ping.pe</a></p><img src="https://img.laoda.de/i/2023/08/24/pgd2k1-0.webp" alt="image.png" style="zoom:33%;" /><p>国内惨不忍睹 &#x3D; &#x3D;</p><h3 id="CPU性能测试"><a href="#CPU性能测试" class="headerlink" title="CPU性能测试"></a>CPU性能测试</h3><p>还是请出秋水的 UnixBench 脚本来测试。</p><p>UnixBench 是一个类 Unix 系（Unix，BSD，Linux）统下的性能测试工具，一个开源工具，被广泛用与测试 Linux 系统主机的性能。UnixBench 的主要测试项目有：系统调用、读写、进程、管道、运算、C库等系统基准性能提供测试数据。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.sh &amp;&amp; <span class="built_in">chmod</span> +x unixbench.sh &amp;&amp; ./unixbench.sh</span><br></pre></td></tr></table></figure><p>上面脚本运行需要1个小时左右，运行完会显示类似下面的数据：</p><img src="https://img.laoda.de/i/2023/08/24/pdjnqs-0.webp" alt="image.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/08/24/pdml4w-0.webp" alt="image.png" style="zoom:33%;" /><p>上部分是单核跑分数据，下部分是多核跑分数据。VPS的话单核跑分有500分以上属于正常水平，低于500分就属于性能很弱了。这边独立服务器跑这个分还凑合。</p><h3 id="取消RAID"><a href="#取消RAID" class="headerlink" title="取消RAID"></a>取消RAID</h3><p>默认两块硬盘的话，Hz会自动给你装raid1，即只有一块硬盘的容量，另一块硬盘相当于是备份用的，如果不是特别重要的数据的话，一般会考虑不组raid，这样我们硬盘空间就能完整利用起来了。（除非你是刷PT，不然不建议组raid0）</p><p>首先进入Hetzner的控制后台，找到服务器，选择Rescue (救援模式)，设置完成后重启服务器：</p><img src="https://img.laoda.de/i/2023/08/24/stv0vm-0.webp" alt="db415600eb005d470c09fd338f7f27be.png" style="zoom: 50%;" /><img src="https://img.laoda.de/i/2023/08/24/stw94z-0.webp" alt="236306b87b7c8295cc25c721d6a46561.png" style="zoom:50%;" /><img src="https://img.laoda.de/i/2023/08/24/stx8ap-0.webp" alt="5c7acaad58ed198ac754cb94e74f614a.png" style="zoom: 33%;" /><p>重启完成后登录服务器，现在看到的就是救援模式；</p><p><img src="https://img.laoda.de/i/2023/08/24/szy5ss-0.webp" alt="9dc758f8e60573ffe32cdf0e1fb44dd6.png"></p><p>在救援模式下输入下面命令后按回车</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">installimage</span><br></pre></td></tr></table></figure><p>然后选择你需要安装的系统</p><img src="https://img.laoda.de/i/2023/08/24/stz8g5-0.webp" alt="06c362326cabb91bd216ae76ee798f14.png" style="zoom: 67%;" /><img src="https://img.laoda.de/i/2023/08/24/su02er-0.webp" alt="8d9d81282bce722db89e7e7ac4e50ec7.png" style="zoom:67%;" /><img src="https://img.laoda.de/i/2023/08/24/su0y4v-0.webp" alt="c461ed3a9c975677bd038f827098197c.png" style="zoom:67%;" /><p>选择完成后编辑配置文件；</p><img src="https://img.laoda.de/i/2023/08/24/su26pp-0.webp" alt="abdc141b5e5dfc486318cbf763ce1f9e.png" style="zoom:67%;" /><img src="https://img.laoda.de/i/2023/08/24/su37zd-0.webp" alt="d0f924a8fd74f22a9dbe66fb0ca95c86.png" style="zoom:67%;" /><p>RAID设置区分</p><blockquote><p>NO RIAD：一般情况建议不设置RAID，这样既保证空间大小，也保证了安全性.；<br>RIAD 0：好处：速度快，合并容量，缺点：两个硬盘只要挂一个，那么文件全都挂了；<br>RIAD 1：好处：同时把文件写入到两个硬盘，坏一个也没事，缺点：浪费空间，读写速度稍微有降低；</p></blockquote><p>编辑完成后按<code>F10</code> 保存配置文件；</p><img src="https://img.laoda.de/i/2023/08/24/sud8iq-0.webp" alt="c19dc65b5c83a0c3d03ab736157776d6.png" style="zoom:67%;" /><p>选择<code>yes</code>回车</p><img src="https://img.laoda.de/i/2023/08/24/sueih2-0.webp" alt="6e66366167554e244f22932995008919.png" style="zoom:67%;" /><p>等待程序执行完毕：</p><img src="https://img.laoda.de/i/2023/08/24/sug4lq-0.webp" alt="4f76ddbe0e13c78abc3292f036583b8d.png" style="zoom:67%;" /><p>程序执行完成后输入<code>reboot</code>重启即可：</p><p><img src="https://img.laoda.de/i/2023/08/24/szyi1k-0.webp" alt="be0a4c045730c8b0514dc9bd992b685e.png"></p><p>重启后登录新系统可以查看之前的分区情况</p><p><img src="https://img.laoda.de/i/2023/08/24/szylul-0.webp" alt="d5505acc2f1effc967dd3f2bebb34fa3.png"></p><p><code>RAID 0</code>和<code>RAID 1</code>的测试对比</p><p>RAID 0</p><p><img src="https://img.laoda.de/i/2023/08/24/szyzeg-0.webp" alt="87c7f18154d25fd529849906175821b2.png"></p><p>RAID 1</p><p><img src="https://img.laoda.de/i/2023/08/24/szzayf-0.webp" alt="25a31dcba8adf129773f98274fea79bc.png"></p><p>无RAID</p><p><img src="https://img.laoda.de/i/2023/08/24/szzjl3-0.webp" alt="adbfd0ca48584412ad41baa6bb7a8fbf.png"></p><h3 id="installimage命令一把梭"><a href="#installimage命令一把梭" class="headerlink" title="installimage命令一把梭"></a>installimage命令一把梭</h3><p>上面的方法是图形化一步一步来搞的，其实你也可以直接用一条命令直接自动安装。</p><p>还是利用官方的installimage命令。</p><p>一般你想要知道一个命令支持哪些参数，都可以用<code>命令 -h</code>或者<code>命令 --help</code>来查看。</p><p>比如</p><p><code>installimage -h</code> 或者 <code>installimage --help</code></p><p>以下是installimage命令的参数：</p><p>这是 <code>installimage</code> 的使用说明，该脚本支持多种参数，以下是每个参数的简要描述：</p><ol><li><code>-h</code>: 显示帮助信息。</li><li><code>-a</code>: 自动模式 &#x2F; 批处理模式 - 结合下面的选项使用可以无需进一步交互地进行安装。</li><li><code>-c &lt;configfile&gt;</code>: 使用指定的配置文件进行自动设置。</li><li><code>-x &lt;post-install&gt;</code>: 使用此文件作为安装后脚本，安装完成后在 chroot 环境中执行。</li><li><code>-n &lt;hostname&gt;</code>: 设置指定的主机名。</li><li><code>-r &lt;yes|no&gt;</code>: 是否激活软件 RAID。</li><li><code>-l &lt;0|1|5|6|10&gt;</code>: 设置指定的 RAID 级别。</li><li><code>-i &lt;imagepath&gt;</code>: 使用指定的 IMAGE 进行安装。</li><li><code>-g</code>: 强制验证带有分离的 GPG 签名的图像文件。如果图像无效，安装将中止。</li><li><code>-p &lt;partitions&gt;</code>: 定义要创建的分区。</li><li><code>-v &lt;logical volumes&gt;</code>: 定义要创建的逻辑卷。</li><li><code>-d &lt;drives&gt;</code>: 要使用的驱动器的 &#x2F;dev 名称。</li><li><code>-f &lt;yes|no&gt;</code>: 是否格式化第二块驱动器（如果不用于 RAID）。</li><li><code>-s &lt;de|en&gt;</code>: 用于不同事务的语言（例如 PLESK）。</li><li><code>-z PLESK_&lt;Version&gt;</code>: 安装像 PLESK 这样的可选软件。</li><li><code>-K &lt;path/url&gt;</code>: 从文件&#x2F;URL 安装 SSH 密钥。</li><li><code>-t &lt;yes|no&gt;</code>: 接管救援系统的 SSH 公钥。</li><li><code>-u &lt;yes|no&gt;</code>: 是否允许 USB 驱动器。</li><li><code>-G &lt;yes|no&gt;</code>: 是否生成新的 SSH 主机密钥（默认为 yes）。</li></ol><p>这些选项允许用户在不进入交互式模式的情况下，通过指定适当的参数来自动化服务器的安装过程。在实际使用中，您需要根据具体需求选择和组合这些参数。</p><h4 id="installimage命令设置raid安装"><a href="#installimage命令设置raid安装" class="headerlink" title="installimage命令设置raid安装"></a>installimage命令设置raid安装</h4><p>直接对话<a href="https://blog.laoda.de/archives/chatgpt-plus-depay/index.html">ChatGPT</a>，让它帮个小忙。</p><p>问：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">`installimage -n hostname -a -r 0 -d sda,sdb -p /boot:ext3:1024M,/:ext4:all -i /root/images/Debian-1101-bullseye-amd64-base.tar.gz`所以这个命令写的有问题吗</span><br></pre></td></tr></table></figure><p>答：</p><p>让我们逐一检查您给出的 <code>installimage</code> 命令的参数：</p><ol><li><code>-n hostname</code>: 设置主机名为 “hostname”。</li><li><code>-a</code>: 启用自动模式。</li><li><code>-r 0</code>: 指定 RAID 类型为 RAID 0。</li><li><code>-d sda,sdb</code>: 指定两个设备 <code>/dev/sda</code> 和 <code>/dev/sdb</code> 用于 RAID 0。</li><li><code>-p /boot:ext3:1024M,/:ext4:all</code>: 分区信息，其中 <code>/boot</code> 分区使用 <code>ext3</code> 文件系统大小为 1024M，<code>/</code> 根分区使用 <code>ext4</code> 文件系统，占据所有剩余空间。</li><li><code>-i /root/images/Debian-1101-bullseye-amd64-base.tar.gz</code>: 指定安装镜像路径。</li></ol><p>从给出的使用说明中，这些参数似乎都是正确的。但有一点需要注意：</p><p>在使用 RAID 0 时，您指定了 <code>-r 0</code>，这是正确的，但根据使用说明，还需要指定 RAID 级别 <code>-l</code>。尽管在您的命令中没有明确使用 <code>-l</code>，但由于您使用了 <code>-r 0</code>，这可能意味着 RAID 0 是默认选项。然而，为了确保没有遗漏或误解，建议明确指定 RAID 级别，即添加 <code>-l 0</code>。</p><p>所以，更完整的命令可能是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">installimage -n hostname -a -r yes -l 0 -d sda,sdb -p /boot:ext3:1024M,/:ext4:all -i /root/images/Debian-1101-bullseye-amd64-base.tar.gz</span><br></pre></td></tr></table></figure><p>但再次，这取决于 <code>installimage</code> 的具体实现和版本。上述命令应该是正确的，但在真正执行之前，建议再次检查您的具体环境和文档以确保一切正确。</p><h4 id="installimage命令不设置raid安装"><a href="#installimage命令不设置raid安装" class="headerlink" title="installimage命令不设置raid安装"></a>installimage命令不设置raid安装</h4><p>同理，如果你不想做raid，假设你有sda、sdb还有一块nvme0n1，你打算把系统装在nvme0n1上（靠谱一些），然后把sda和sdb当作存储盘之后单独挂载，你可以用诸如下面的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">installimage -n hz -a -d nvme0n1 -p /boot:ext3:1024M,/:ext4:all -i /root/images/Debian-stable-64-minimal.tar.gz</span><br></pre></td></tr></table></figure><p>这个路径可能要根据实际情况修改一下<code>/root/images/Debian-stable-64-minimal.tar.gz</code></p><p>你可以在救援模式中输入:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al /root/images/</span><br></pre></td></tr></table></figure><p>查看你想要的系统版本然后替换到上面命令中。</p><p>这样你安装完之后，系统就在<code>nvme0n1</code>盘上了，另外两块硬盘需要你手动格式化并挂载。</p><h3 id="硬盘挂载"><a href="#硬盘挂载" class="headerlink" title="硬盘挂载"></a>硬盘挂载</h3><p>好的，下面是详细的步骤，描述如何为 <code>/dev/nvme1n1</code> 创建一个分区并挂载它。请注意，这些操作可能导致数据丢失，所以在开始前，请确保已备份所有重要数据。</p><p>这边以<code>nvme1n1</code>这块硬盘为例子，有可能你的是<code>/dev/sdb</code> 、<code>/dev/sda</code>  这种，其实是一样的，以此类推。</p><p>具体你的硬盘叫啥，可以登录到救援模式查看（一登录成功上方就有提示）</p><img src="https://img.laoda.de/i/2023/08/24/u1b4za-0.webp" alt="image-20230824181616538" style="zoom:50%;" /><h4 id="1-创建分区"><a href="#1-创建分区" class="headerlink" title="1. 创建分区"></a>1. 创建分区</h4><p>使用 <code>fdisk</code> 命令为 <code>/dev/nvme1n1</code> 创建一个新分区。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo fdisk /dev/nvme1n1</span><br></pre></td></tr></table></figure><p>在 <code>fdisk</code> 命令界面:</p><ol><li>输入 <code>p</code> 并回车，以查看现有分区。</li><li>输入 <code>n</code> 并回车，开始创建新分区。</li><li>选择分区类型（主分区或逻辑分区）。通常，输入 <code>p</code> 选择主分区。</li><li>选择分区号。通常情况下，默认选项应该是可以的。</li><li>为起始和结束扇区选择默认值，这将使用整个磁盘。</li><li>输入 <code>w</code> 并回车，写入分区表并退出。</li></ol><h4 id="2-格式化分区"><a href="#2-格式化分区" class="headerlink" title="2. 格式化分区"></a>2. 格式化分区</h4><p>假设你创建的分区是 <code>/dev/nvme1n1p1</code>（这取决于你之前的选择和现有分区），你可以使用以下命令将其格式化为 <code>ext4</code> 文件系统：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/nvme1n1p1</span><br></pre></td></tr></table></figure><h4 id="3-挂载分区"><a href="#3-挂载分区" class="headerlink" title="3. 挂载分区"></a>3. 挂载分区</h4><p>首先，创建一个挂载点：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /mnt/mydrive</span><br></pre></td></tr></table></figure><p>然后，挂载新分区到这个挂载点：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/nvme1n1p1 /mnt/mydrive</span><br></pre></td></tr></table></figure><h4 id="4-开机自动挂载"><a href="#4-开机自动挂载" class="headerlink" title="4. 开机自动挂载"></a>4. 开机自动挂载</h4><p>要使得每次开机都自动挂载这个分区，需要修改 <code>/etc/fstab</code> 文件。首先，获取 UUID：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo blkid</span><br></pre></td></tr></table></figure><p>找到 <code>/dev/nvme1n1p1</code> 的 UUID。接着，编辑 <code>/etc/fstab</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/fstab</span><br></pre></td></tr></table></figure><p>在文件的底部添加以下内容（替换你的 UUID）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=你的UUID  /mnt/mydrive  ext4  defaults  0  2</span><br></pre></td></tr></table></figure><p>保存并退出。</p><p>这样，每次启动时，新分区都会自动挂载到 <code>/mnt/mydrive</code>。</p><p>以上就是创建、格式化和挂载新分区的步骤。确保每一步都仔细检查，避免任何可能的错误。</p><h4 id="合并sda和sdb（使用-LVM-将-sda-和-sdb-合并为一个逻辑卷）"><a href="#合并sda和sdb（使用-LVM-将-sda-和-sdb-合并为一个逻辑卷）" class="headerlink" title="合并sda和sdb（使用 LVM 将 sda 和 sdb 合并为一个逻辑卷）"></a>合并sda和sdb（使用 LVM 将 sda 和 sdb 合并为一个逻辑卷）</h4><p>假如想要把sda和sdb合并成一个硬盘，挂载，你可以：</p><p>问：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">我有一块nvme0n1,还有sda，sdb，我想把系统安装在nvme0n1上，然后把sda和sdb合并成一块硬盘，用来存放文件，我是不是要定义要创建的逻辑卷？请问我应该怎么做，帮我写一个完整的安装脚本</span><br></pre></td></tr></table></figure><p>答：</p><p>为了满足您的需求，我们可以使用以下策略：</p><ol><li>将操作系统安装在 <code>nvme0n1</code> 上。</li><li>使用 LVM 将 <code>sda</code> 和 <code>sdb</code> 合并为一个逻辑卷并用于存储。</li></ol><p>以下是您可以使用的 <code>installimage</code> 命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">installimage -n hostname -a -d nvme0n1 -p /boot:ext3:1024M,/:ext4:all -i /root/images/Debian-1101-bullseye-amd64-base.tar.gz</span><br></pre></td></tr></table></figure><p>此命令将 Debian 11.01 Bullseye 安装在 <code>nvme0n1</code> 上，其中 <code>/boot</code> 使用 <code>ext3</code> 文件系统，大小为 1024M，根 <code>/</code> 使用 <code>ext4</code> 文件系统，占据所有剩余空间。</p><p>安装操作系统后，您可以使用以下步骤将 <code>sda</code> 和 <code>sdb</code> 合并为一个 LVM 逻辑卷：</p><ol><li><p>创建物理卷：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pvcreate /dev/sda</span><br><span class="line">pvcreate /dev/sdb</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为 <code>myvg</code> 的卷组，其中包含 <code>sda</code> 和 <code>sdb</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vgcreate myvg /dev/sda /dev/sdb</span><br></pre></td></tr></table></figure></li><li><p>使用上面创建的卷组创建一个名为 <code>mylv</code> 的逻辑卷，占据所有可用空间：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lvcreate -l 100%FREE -n mylv myvg</span><br></pre></td></tr></table></figure></li><li><p>格式化逻辑卷并挂载它：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/myvg/mylv</span><br><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line">mount /dev/myvg/mylv /data</span><br></pre></td></tr></table></figure></li><li><p>为了确保每次启动时都能自动挂载，需要在 <code>/etc/fstab</code> 中添加一行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/myvg/mylv /data ext4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure></li></ol><p>以上步骤在操作系统安装后执行，可以将它们写入一个脚本中，然后在安装操作系统后手动运行。或者，您可以使用 <code>installimage</code> 的 <code>-x</code> 参数指定一个脚本，该脚本将在安装后自动执行上述步骤。</p><p>以下是一个脚本，名为 <code>post_install.sh</code>，用于在操作系统安装后设置和挂载逻辑卷：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建物理卷</span></span><br><span class="line">pvcreate /dev/sda</span><br><span class="line">pvcreate /dev/sdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为 `myvg` 的卷组</span></span><br><span class="line">vgcreate myvg /dev/sda /dev/sdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用上面创建的卷组创建一个名为 `mylv` 的逻辑卷</span></span><br><span class="line">lvcreate -l 100%FREE -n mylv myvg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化逻辑卷</span></span><br><span class="line">mkfs.ext4 /dev/myvg/mylv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录并挂载逻辑卷</span></span><br><span class="line"><span class="built_in">mkdir</span> /data</span><br><span class="line">mount /dev/myvg/mylv /data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新 /etc/fstab 以在启动时自动挂载逻辑卷</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/dev/myvg/mylv /data ext4 defaults 0 0&quot;</span> &gt;&gt; /etc/fstab</span><br></pre></td></tr></table></figure><p>您可以将上述脚本保存为 <code>post_install.sh</code>，然后为其赋予执行权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x post_install.sh</span><br></pre></td></tr></table></figure><p>然后，您可以使用以下 <code>installimage</code> 命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">installimage -n hostname -a -d nvme0n1 -p /boot:ext3:1024M,/:ext4:all -i /root/images/Debian-1101-bullseye-amd64-base.tar.gz -x /path/to/post_install.sh</span><br></pre></td></tr></table></figure><p>请确保将 <code>/path/to/</code> 替换为您保存 <code>post_install.sh</code> 脚本的实际路径。</p><p>这样，当 <code>installimage</code> 完成操作系统的安装后，它将自动运行 <code>post_install.sh</code> 脚本来设置和挂载逻辑卷。</p><h3 id="救援模式恢复密码"><a href="#救援模式恢复密码" class="headerlink" title="救援模式恢复密码"></a>救援模式恢复密码</h3><p>如果您在Hetzner使用独立服务器（Dedicated Server）并且忘记了root登录密码，您可以通过以下步骤重置密码：</p><ol><li><p><strong>登录Hetzner Robot控制面板</strong>:<br>打开浏览器，访问 <a href="https://robot.hetzner.com/">Hetzner Robot</a>，然后登录您的账户。</p></li><li><p><strong>选择您的服务器</strong>:<br>在控制面板中，找到并选择您需要重置密码的服务器。</p></li><li><p><strong>启动救援系统</strong>:<br>在服务器的管理页面上，找到“Rescue”或“救援系统”选项并启动它。Hetzner的救援系统允许您启动一个小型的Linux环境，这样您就可以访问服务器的硬盘并对其进行操作。</p></li><li><p><strong>重启服务器到救援系统</strong>:<br>一旦您启动了救援系统，需要重新启动服务器以进入该系统。您可以在Robot控制面板中找到并点击“重启”按钮。</p></li><li><p><strong>通过SSH登录到救援系统</strong>:<br>当服务器重启并运行救援系统时，您应该能够使用提供的SSH凭据（通常是root和一个临时密码）登录到服务器。</p></li><li><p><strong>挂载服务器的文件系统</strong>:<br>一旦您登录到救援系统，您需要挂载服务器的主文件系统。这通常可以通过以下命令完成（假设您的根文件系统在<code>/dev/sda1</code>上）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda1 /mnt</span><br></pre></td></tr></table></figure></li></ol><p>注意，如果取消挂载，试另一块硬盘的话，可以先执行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unmount /mnt</span><br></pre></td></tr></table></figure><ol start="7"><li><p><strong>重置root密码</strong>:<br>挂载文件系统后，您可以使用<code>chroot</code>命令更改root密码。如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chroot</span> /mnt</span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><p>按照提示输入新的密码。</p></li><li><p><strong>重启服务器到主系统</strong>:<br>一旦您完成了密码重置，退出chroot环境，然后从救援模式重启服务器回到主系统。您可以在Robot控制面板中完成这一步。</p></li><li><p><strong>登录并测试新密码</strong>:<br>当服务器重启并运行主系统时，尝试使用新的root密码登录。确保您可以成功登录并且所有服务都在正常运行。</p></li></ol><p>请注意，这些步骤是基于Hetzner的独立服务器的通常操作。具体的步骤可能会因Hetzner的系统更新或其他原因而有所不同。如果您遇到任何问题，建议联系Hetzner的技术支持以获得更多帮助。</p><p>输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>输出：</p><img src="https://img.laoda.de/i/2023/08/24/sc8bx4-0.webp" alt="image.png" style="zoom:50%;" /><p>从您提供的 <code>lsblk</code> 输出来看：</p><ul><li><code>sda</code> 磁盘只有一个分区 <code>sda1</code>，大小为 476.9G，目前已经挂载到 <code>/mnt</code>。</li><li><code>sdb</code> 磁盘有三个分区：<ul><li><code>sdb1</code> 大小为 32G</li><li><code>sdb2</code> 大小为 1G</li><li><code>sdb3</code> 大小为 443.9G</li></ul></li></ul><p>这里的关键是确定哪一个分区是您的根文件系统。考虑到 <code>sda1</code> 已经挂载到 <code>/mnt</code>，您可能已经检查了它。但我们还需要检查 <code>sdb</code> 的分区，尤其是 <code>sdb3</code>，因为它的大小与一个主要的文件系统相匹配。</p><p>下面是如何检查 <code>sdb</code> 的分区：</p><ol><li><p><strong>挂载并检查 <code>sdb1</code></strong>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sdb1 /mnt</span><br><span class="line"><span class="built_in">ls</span> /mnt</span><br></pre></td></tr></table></figure><p>如果这里有 <code>bin</code>, <code>etc</code>, <code>home</code>, <code>root</code>, <code>usr</code> 等目录，那么这可能是您的根文件系统。</p></li><li><p><strong>如果 <code>sdb1</code> 不是根文件系统，尝试挂载并检查 <code>sdb3</code></strong>:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount /mnt</span><br><span class="line">mount /dev/sdb3 /mnt</span><br><span class="line"><span class="built_in">ls</span> /mnt</span><br></pre></td></tr></table></figure><p>同样，查找典型的根文件系统目录。</p></li></ol><p>您提供的信息不足以确定哪个分区是引导分区或是否有单独的 <code>/home</code> 分区，但上述步骤应该可以帮助您确定哪个是根文件系统。如果您还不确定，请告诉我您在每个分区上看到的主要目录，这样我可以为您提供更多的指导。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>SunPma’Blog：<a href="https://sunpma.com/656.html">https://sunpma.com/656.html</a><br>主机会话：<a href="https://hostalk.net/posts/vps_test.html">https://hostalk.net/posts/vps_test.html</a><br><a href="https://www.openos.org/post/196/">https://www.openos.org/post/196/</a><br><a href="https://wiki.hetzner.de/index.php/Installimage/en">https://wiki.hetzner.de/index.php/Installimage/en</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;咕咕斥巨资买了一台Hetzner的独立服务器（&lt;a href=&quot;https://www.hetzner.com/sb&quot;&gt;拍卖机&lt;/a&gt;），官方售价27.7欧&amp;#x2F;月。&lt;/p&gt;
&lt;img src=&quot;https://img.laoda.de/i/2023/08/24/rc</summary>
      
    
    
    
    <category term="有用的小知识" scheme="https://blog.laoda.de/categories/%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="Hetzner" scheme="https://blog.laoda.de/tags/Hetzner/"/>
    
    <category term="服务器测评" scheme="https://blog.laoda.de/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B5%8B%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>【好玩儿的Docker项目】Umami替代品，又一款网站流量统计工具——Plausible</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-plausible/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-plausible/</id>
    <published>2023-08-13T04:37:21.000Z</published>
    <updated>2023-08-16T16:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>之前和大家介绍过一款精美的网站流量统计工具——<a href="https://blog.laoda.de/archives/umami/index.html">Umami</a></p><p><img src="https://img.laoda.de/i/2023/08/08/qhd3n3-0.webp"></p><p>最近，Umami爆出一个严重的安全漏洞（某位小伙伴在博客评论区提醒我的，感谢），</p><p><img src="https://img.laoda.de/i/2023/08/08/qhefts-0.webp" alt="4ce9d75b54d9ead867e1b5ea75f95fe2.png"></p><p>分享的网站数据链接可能会导致的你的网站统计数据被重置。</p><p>这个对个人来说还好，毕竟没多少访问量，但是对于小型团队，尤其是要做数据分析的（同比、环比）的用户来说，还是比较讨厌的。（希望社区的维护人员应该在尽力解决这个问题了。）</p><p>这一期，我们就趁着机会，来介绍另一个流量统计的项目——Plausible。</p><blockquote><p>Plausible Analytics 是一个简单、开源、轻量级（&lt; 1 KB）且注重隐私的 Google Analytics 替代品。Plausible 被超过10,000个付费订阅用户信任，用于提供他们网站和业务洞察力。我们完全独立、自筹资金并自给自足。</p></blockquote><p>来自<a href="https://plausible.io/docs">官方Docs</a></p><p><img src="https://img.laoda.de/i/2023/08/08/qhh4c5-0.webp" alt="f7d8459c33258f930f7b4fa230448ef8.png"></p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p><img src="https://img.laoda.de/i/2023/08/08/qhipan-0.webp" alt="62fead07032a298c61a3cb14f0300e4e.png"></p><p><img src="https://img.laoda.de/i/2023/08/08/qhsh9z-0.webp" alt="af05ea78d49628ae5e95ef7aa4fa0141.png"></p><p><img src="https://img.laoda.de/i/2023/08/08/qhtise-0.webp" alt="bcdabf1f64a40e3b128c36ba822978aa.png"></p><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>支持docker一键部署，轻量级Docker镜像（使用Alpine Linux）</li><li>支持谷歌API，链接谷歌分析、谷歌关键词工具</li><li>支持自定义事件</li><li>颜值高</li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>咕咕的Demo：<a href="https://plausible.laoda.de/share/blog.laoda.de?auth=hUyCbI97k9n5qouBij3N7">本站流量情况</a><br>GitHub官方仓库：<a href="https://github.com/plausible/analytics">https://github.com/plausible/analytics</a><br>官方文档地址：<a href="https://plausible.io/docs">https://plausible.io/docs</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是香港的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun/">点击查看</a>）或者<a href="https://blog.laoda.de/vps/">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script/">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker/">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G以上</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube"><a href="#5-1-YouTube" class="headerlink" title="5.1 YouTube"></a>5.1 YouTube</h3><p>视频地址：<a href="https://youtu.be/U0tXcsqVSMo">https://youtu.be/U0tXcsqVSMo</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV1Hh4y1Q7tH/">https://www.bilibili.com/video/BV1Hh4y1Q7tH/</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png" style="zoom:33%;" /><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不建议用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png" style="zoom:25%;" /><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager/">https://blog.laoda.de/archives/nginxproxymanager/</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/plausible</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/plausible</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/plausible/hosting</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> hosting</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><p>以下是咕咕修改的，可以看看有啥不一样（具体见视频）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bytemark/smtp</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plausible_db:</span></span><br><span class="line">    <span class="comment"># supported versions are 12, 13, and 14</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:14-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./db-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=postgres</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plausible_events_db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">clickhouse/clickhouse-server:23.3.7.5-alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./event-data:/var/lib/clickhouse</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.d/logging.xml:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./clickhouse/clickhouse-user-config.xml:/etc/clickhouse-server/users.d/logging.xml:ro</span></span><br><span class="line">    <span class="attr">ulimits:</span></span><br><span class="line">      <span class="attr">nofile:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">262144</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">262144</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">plausible:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plausible/analytics:v2.0</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&quot;sleep 10 &amp;&amp; /entrypoint.sh db createdb &amp;&amp; /entrypoint.sh db migrate &amp;&amp; /entrypoint.sh run&quot;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">plausible_db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">plausible_events_db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mail</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8000</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">plausible-conf.env</span></span><br></pre></td></tr></table></figure><p>大家可以用默认的设置，也可以和咕咕一样修改一下，修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand -<span class="built_in">base64</span> 64 | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span> ; <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>保存下来。</p><p>打开环境配置文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim plausible-conf.env</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASE_URL=填你打算给plausible准备的域名，比如https://analytics.baidu.com</span><br><span class="line">SECRET_KEY_BASE=填刚刚生成的那个密钥</span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>更多参数配置，请看文档：<a href="https://plausible.io/docs/self-hosting-configuration">https://plausible.io/docs/self-hosting-configuration</a></p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom: 25%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom: 25%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>plausible</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom: 25%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>一般情况下，我们都需要给网页加上https！让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo/">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282" style="zoom:33%;" /><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom: 33%;" /><blockquote><p>注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 plausible 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>plausible</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom: 33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom: 33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D;</p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>建议参考视频，或者结合官方文档食用：<a href="https://plausible.io/docs">https://plausible.io/docs</a></p><h3 id="8-1-登录"><a href="#8-1-登录" class="headerlink" title="8.1 登录"></a>8.1 登录</h3><p>输入域名，登录Plausible</p><p><img src="https://img.laoda.de/i/2023/08/08/qhx308-0.webp" alt="c3fea4fa25e9ee495bdb3c6395ff0519.png"></p><h3 id="8-2-填写需要统计的网站的名称"><a href="#8-2-填写需要统计的网站的名称" class="headerlink" title="8.2 填写需要统计的网站的名称"></a>8.2 填写需要统计的网站的名称</h3><p><img src="https://img.laoda.de/i/2023/08/08/qhycg6-0.webp" alt="d7aff08aa538238172bc5ad6de2186b5.png"></p><h3 id="8-3-获取统计代码"><a href="#8-3-获取统计代码" class="headerlink" title="8.3 获取统计代码"></a>8.3 获取统计代码</h3><p><img src="https://img.laoda.de/i/2023/08/08/qi00em-0.webp" alt="8e4030aabf1d1548446f1bd8f4f2b38c.png"></p><p>将这串js代码放到网站的<code>&lt;head&gt;&lt;/head&gt;</code>之间就行。</p><p>比如Hexo博客（以<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>主题为例子）：</p><p><img src="https://img.laoda.de/i/2023/08/08/qi1l4m-0.webp" alt="e51d8f5b49a4691a154abb5f565bb1ff.png"></p><p>Halo博客（以<a href="https://blog.laoda.de/archives/docker-compose-install-halo-version-2/">Halo 2.0</a>为例子）：</p><img src="https://img.laoda.de/i/2023/08/08/qi46fo-0.webp" alt="be1e31f92a0c393d793ca39209a15c36.png" style="zoom: 33%;" /><p>WordPress博客（以<a href="https://gao.ee/justnews">JustNews</a>主题为例子）：</p><img src="https://img.laoda.de/i/2023/08/08/qie8hb-0.webp" alt="b5341063d3728312825a8b3b1bb3b6cd.png" style="zoom:33%;" /><h3 id="8-4-查看统计数据"><a href="#8-4-查看统计数据" class="headerlink" title="8.4 查看统计数据"></a>8.4 查看统计数据</h3><p>没什么问题的话，访问一下你的网站，很快这边就能显示数据啦。</p><img src="https://img.laoda.de/i/2023/08/08/qifvmh-0.webp" alt="c3b71dbd83f26694dc82e8121269c8c3.png" style="zoom:33%;" /><p>更高级的功能，比如如何连接谷歌统计等等，请结合官方文档食用：<a href="https://plausible.io/docs">https://plausible.io/docs</a></p><h3 id="8-5-更新-plausible"><a href="#8-5-更新-plausible" class="headerlink" title="8.5 更新 plausible"></a>8.5 更新 plausible</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/plausible</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/plausible /root/data/docker_data/plausible.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="8-6-卸载-plausible"><a href="#8-6-卸载-plausible" class="headerlink" title="8.6 卸载 plausible"></a>8.6 卸载 plausible</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/plausible</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/plausible  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><p>如果不想让别人注册你的plausible，可以选择关闭注册功能，或者开启邀请注册，具体操作如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/plausible/hosting</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vim plausible-conf.env</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DISABLE_REGISTRATION=invite_only</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DISABLE_REGISTRATION=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>完整的env配置如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BASE_URL=填你打算给plausible准备的域名，比如https://analytics.baidu.com</span><br><span class="line">SECRET_KEY_BASE=填刚刚生成的那个密钥</span><br><span class="line">DISABLE_REGISTRATION=invite_only</span><br></pre></td></tr></table></figure><p>更多参数配置，请看文档：<a href="https://plausible.io/docs/self-hosting-configuration">https://plausible.io/docs/self-hosting-configuration</a></p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/plausible/analytics/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/plausible/analytics">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub官方仓库：<a href="https://github.com/plausible/analytics">https://github.com/plausible/analytics</a><br>官方文档地址：<a href="https://plausible.io/docs">https://plausible.io/docs</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;之前和大家介绍过一款精美的网站流量统计工具——&lt;a href=&quot;https://blog.laoda.de/archives</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Umami" scheme="https://blog.laoda.de/tags/Umami/"/>
    
    <category term="谷歌统计" scheme="https://blog.laoda.de/tags/%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A1/"/>
    
    <category term="百度统计" scheme="https://blog.laoda.de/tags/%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>免费12个月使用！体验AWS——目前世界上最大的云服务器提供商家！（含DD教程）</title>
    <link href="https://blog.laoda.de/archives/aws-free/"/>
    <id>https://blog.laoda.de/archives/aws-free/</id>
    <published>2023-08-03T13:55:12.000Z</published>
    <updated>2023-08-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>更新了文末使用注意事项。</p><p>更新了EC2 每个月可以用100G流量的说明。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><img src="https://img.laoda.de/i/2023/08/03/dy68sc-0.webp" alt="54f5c741679d226ad992c348d6bcca2e.png"></p><p>几乎每个大厂都可以免费体验一定时长的云服务，比如GCP、Azure，甲骨文甚至还有可以永久免费的服务器。</p><p><img src="https://img.laoda.de/i/2023/08/03/dzsptl-0.webp" alt="33bb560749fb4dc108fd22aa7efe27e3.png"></p><p>这一期，我们就来免费体验一下世界上最大的云服务器提供商——亚马逊的云服务 (<a href="https://gao.ee/aws">AWS</a>)</p><p><img src="https://img.laoda.de/i/2023/08/03/dyi6b7-0.webp" alt="a6008202f607ebee921a0e39d19cd8d6.png"></p><blockquote><p>世界上最大的云服务器提供商是亚马逊网络服务 (AWS)。AWS 是一家全球性云计算平台，提供计算、存储、数据库、网络、分析、机器学习、人工智能、移动、开发工具和企业应用等多种服务。AWS 在全球拥有超过 200 个区域和 70 多个国家&#x2F;地区的数据中心。</p><p>2022 年，AWS 的收入为 540.5 亿美元，比 2021 年增长了 37%。AWS 是世界上最受欢迎的云计算平台，拥有超过 300 万客户。AWS 的客户包括小型企业、中型企业和大型企业，以及政府机构和非营利组织。</p><p>AWS 的优势包括：</p><p>广泛的服务：AWS 提供广泛的服务，满足企业的各种需求。<br>可靠性：AWS 拥有全球最可靠的数据中心网络。<br>安全性：AWS 提供最先进的安全功能。<br>成本效益：AWS 的价格非常合理。</p></blockquote><p>来源：bard.google.com</p><p><a href="https://gao.ee/aws">AWS</a>其实可以免费<del>白嫖</del>体验很多产品，比如云服务器（ec2），云存储（S3），CDN相关产品（网站提速），lightsail（VPS,搭建远程桌面）SES (群发邮件)，Amazon Chime （视频会议）等等等等，大家可以随意尝试。</p><p>这边我们玩服务器多一些，就来白嫖12个月的EC2吧。</p><p><img src="https://img.laoda.de/i/2023/07/19/10w0lwk-0.webp" alt="74853af64cc16c50f361471e346b97ba.png"></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>AWS 免费体验地址：<a href="https://gao.ee/aws">https://gao.ee/aws</a></p><p>正式开始之前，建议你准备：</p><ul><li>一个邮箱</li><li>一个可以接受验证码的手机号（大家可以用自己的手机号接受验证码，正常国内的能收到码，也可以可以选择GV或者是到<a href="https://5sim.net/zh">5sim.net</a>上找接码，看是最低6卢布（大概5毛钱）一条）</li><li>一张信用卡（只是授权一下，并不会要你钱，可以是虚拟卡，比如咕咕用的<a href="https://blog.laoda.de/archives/onekey-card-tutorial">OneKey Card</a>）</li><li>注册账号的时候不要挂代理</li></ul><h2 id="开始注册"><a href="#开始注册" class="headerlink" title="开始注册"></a>开始注册</h2><p>点击创建<a href="https://gao.ee/aws">AWS账户</a>，一步一步完成注册即可，地址填拼音。</p><p>具体可以看视频。</p><p>YouTube视频地址：<a href="https://youtu.be/r6Mr5tBCnvc">https://youtu.be/r6Mr5tBCnvc</a></p><p>bilibili视频地址：<a href="https://www.bilibili.com/video/BV1VP411t7ia/">https://www.bilibili.com/video/BV1VP411t7ia/</a></p><img src="https://img.laoda.de/i/2023/07/19/10wadak-0.webp" alt="b16ce8b66a52d72e800af237395260e4.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10wbyp2-0.webp" alt="634cfafb4f2c40764ae6a21fa62f61ed.png" style="zoom:33%;" /><p>没什么问题的话，你会看到这个界面。</p><p><img src="https://img.laoda.de/i/2023/07/19/10wd9bi-0.webp" alt="d0ee6d255c695ffd6ac1b83c17fd3828.png"></p><p>信用卡验证预扣款截图：</p><p><img src="https://img.laoda.de/i/2023/07/19/10weg2q-0.webp" alt="517e9a1ec1a10e77e29c553d273b5a61.png"></p><h2 id="AWS后台概览"><a href="#AWS后台概览" class="headerlink" title="AWS后台概览"></a>AWS后台概览</h2><p>选择服务器地区：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wflzn-0.webp" alt="2c17a641badf9ab13cacc453ca4e1b65.png"></p><p>创建实例：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wgygv-0.webp" alt="1f331693624de7d3afb6c74212e785b9.png"></p><p>输入名称：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wiapn-0.webp" alt="6cfd3d5ecad6d7a995d653d6d2f23c48.png"></p><p>选择系统：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wkpgg-0.webp" alt="a8e3e0ba03287d2dbfb0676de8778316.png"></p><p>打开<code>22</code>、<code>80</code>、<code>443</code>端口：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wlpkr-0.webp" alt="9f49cf1bf1bd666895b1f4b56e6b57fe.png"></p><p>修改硬盘大小：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wvluk-0.webp" alt="1d90fc5f95ec2db36bbce5438f4703ba.png"> </p><p>启动实例失败，需要我们创建一个密钥对：</p><p><img src="https://img.laoda.de/i/2023/07/19/10wwvdi-0.webp" alt="de088cbcc6a9fd7008bef38acb241a5e.png"></p><img src="https://img.laoda.de/i/2023/07/19/10wybtd-0.webp" alt="b1067d9e84116a9eacf9ea05e4ea2ad3.png" style="zoom:33%;" /><p>再次启动实例：</p><img src="https://img.laoda.de/i/2023/07/19/10x04g2-0.webp" alt="a37dbccb9e3c3338ca3e036509a0e79f.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10x1vtf-0.webp" alt="e3767553bf2908ccc8dcf8bb86e41eec.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10x3gyw-0.webp" alt="df8ede3760eee791cf9fa7ca22974e98.png" style="zoom:33%;" /><p>连接服务器：</p><img src="https://img.laoda.de/i/2023/07/19/10x54lb-0.webp" alt="8370b0de6fdba51d82a7d5201b89fe20.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10x6if8-0.webp" alt="9754a9c6fab6875769d9229495dd5481.png" style="zoom:33%;" /><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 密钥地址</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i 密钥位置 admin@ip</span><br></pre></td></tr></table></figure><p>即可登录。</p><img src="https://img.laoda.de/i/2023/07/19/10x88my-0.webp" alt="d1a5f5fb28805e4c0cb7faa98c09f5c0.png" style="zoom:33%;" /><h2 id="DD一个干净的Debian-11"><a href="#DD一个干净的Debian-11" class="headerlink" title="DD一个干净的Debian 11"></a>DD一个干净的Debian 11</h2><p>默认的登录方式其实是最安全的，但是对我们来说难免太不方便了，我们希望可以随时随地用密钥登录，这边我们就来完全重装一下这台机器的系统吧。</p><p>dd 脚本（大概5-10分钟）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">&#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;</span>) -d 11 -v 64 -p <span class="string">&quot;自定义root密码&quot;</span> -port <span class="string">&quot;自定义ssh端口&quot;</span></span><br></pre></td></tr></table></figure><p>这边我的dd脚本是这样的：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(wget --no-check-certificate -qO- <span class="string">&#x27;https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh&#x27;</span>) -d 11 -v 64 -p <span class="string">&quot;password123&quot;</span> -port <span class="string">&quot;222&quot;</span></span><br></pre></td></tr></table></figure><p>我把密码改成了<code>password123</code>，SSH端口改成了<code>222</code></p><p>直接输入到命令行即可。</p><h2 id="AWS-开启后台端口的方法"><a href="#AWS-开启后台端口的方法" class="headerlink" title="AWS 开启后台端口的方法"></a>AWS 开启后台端口的方法</h2><p>默认我们的这台机器只开了22端口（我们视频里也勾选了80、443端口）</p><p>所以现在总共只打开了三个端口，我们还需要开启<code>222</code>端口，不然一会儿SSH连接不上。</p><p>这边我们尝试开启<code>222</code>端口。</p><img src="https://img.laoda.de/i/2023/07/19/10xityv-0.webp" alt="aa27bc877189bfa406ed75f1735b4338.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xk07i-0.webp" alt="144f461d39264ba6c24b52b745431063.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xlhrf-0.webp" alt="49ec2f94666cef05c6c7528b55482c7a.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xmzmx-0.webp" alt="078eac72fa962f787e6d4c2db2601b33.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xoe1m-0.webp" alt="123a36565da4b5ee0513e2a4d16d8841.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xpxss-0.webp" alt="2fae84dc62654a8a2420eb26dca2d8dc.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/07/19/10xr52a-0.webp" alt="940357987a82d82f77554bcbdd3e3060.png" style="zoom:33%;" /><p>开启之后，我们尝试登录机器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@ip -p 222</span><br></pre></td></tr></table></figure><p>成功登录！</p><img src="https://img.laoda.de/i/2023/07/19/10xslee-0.webp" alt="0472055b9aa4ee416dd36d594dda8f02.png" style="zoom:33%;" /><p>好了，现在你就有一台干净系统的机器啦，下一期我们介绍一下如何在这个机器上装一个好玩儿的Docker项目，在这个免费使用的12个月里面好好折腾它！</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>服务器免费政策是每月750小时，也就是说如果只开一个Instance，一个月最多只能开31天(744个小时)。如果起了好几个Instance，你就面临付款的风险了。</li><li>Instance计时是以小时做单位，如果你一个小时之内start &#x2F;stop 5次服务器的话，你会被记5个小时。</li><li>服务器使用过程中流量，I&#x2F;O次数等等很多信息都有免费的上限，一般个人学习实验是够的，如果乱用，也有需要付款的风险。</li><li>免费期是12个月，12月之内一定要终止你使用的AWS服务，否则会被计费。</li><li>不清楚的情况下，不要乱点其他服务，不然被收费了都不知道为什么</li><li>如果是自己的信用卡，记得给信用卡锁一下每日额度，避免不小心被乱扣费</li></ul><p>感谢<a href="https://www.jianshu.com/p/acc8b52b3c4f">@JamFF</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更新记录&quot;&gt;&lt;a href=&quot;#更新记录&quot; class=&quot;headerlink&quot; title=&quot;更新记录&quot;&gt;&lt;/a&gt;更新记录&lt;/h2&gt;&lt;p&gt;更新了文末使用注意事项。&lt;/p&gt;
&lt;p&gt;更新了EC2 每个月可以用100G流量的说明。&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="VPS推荐" scheme="https://blog.laoda.de/categories/VPS%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="AWS" scheme="https://blog.laoda.de/tags/AWS/"/>
    
    <category term="亚马逊云服务" scheme="https://blog.laoda.de/tags/%E4%BA%9A%E9%A9%AC%E9%80%8A%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="EC2" scheme="https://blog.laoda.de/tags/EC2/"/>
    
    <category term="免费服务器" scheme="https://blog.laoda.de/tags/%E5%85%8D%E8%B4%B9%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="新加坡服务器" scheme="https://blog.laoda.de/tags/%E6%96%B0%E5%8A%A0%E5%9D%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="亚太服务器" scheme="https://blog.laoda.de/tags/%E4%BA%9A%E5%A4%AA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="低延迟" scheme="https://blog.laoda.de/tags/%E4%BD%8E%E5%BB%B6%E8%BF%9F/"/>
    
    <category term="DD新系统" scheme="https://blog.laoda.de/tags/DD%E6%96%B0%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>【好玩儿的Docker项目】80、90回忆杀，10分钟搭建复古中文 DOS 游戏，最多畅玩1898款！</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-chinese-dos-games/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-chinese-dos-games/</id>
    <published>2023-07-24T13:36:56.000Z</published>
    <updated>2023-07-24T15:23:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>小学的时候，班上有几个同学家里比较富裕，爸爸妈妈给他们买了步步高电子词典，本来是学习的工具，但是有一天发现可以下载游戏，于是学习机就变成了游戏机。</p><p>我当时没有这个机器，只能看着他们玩，还记得又一次把作业给同学抄，然后借他的步步高玩了金庸群侠传，非常上头。后来还玩了伏魔记、魔塔……</p><p>一晃眼，现在都工作好多年了……</p><p>今天就让我们重温一下儿时的游戏吧。</p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p><img src="https://img.laoda.de/i/2023/07/22/10tjkvw-0.webp" alt="2d2152aefff4cd3ac04ecb2ecb40e274.png"></p><p><img src="https://img.laoda.de/i/2023/07/22/10tl4tg-0.webp" alt="0883c841c73871b1341edfd1e2599c3f.png"></p><p><img src="https://img.laoda.de/i/2023/07/22/10u0cnp-0.webp" alt="fb998df7fa96a7b4f8cdc8cf76faf7c8.png"></p><p><img src="https://img.laoda.de/i/2023/07/22/10u1g9d-0.webp" alt="7ea1d4f1b4afddf85ccf03e96fb99f3f.png"></p><p><img src="https://img.laoda.de/i/2023/07/22/10u2shj-0.webp" alt="b22232140b0564a01e554112536644dd.png"></p><img src="https://img.laoda.de/i/2023/07/22/118uku3-0.webp" alt="image-20230722225209477" style="zoom: 50%;" /><img src="https://img.laoda.de/i/2023/07/22/11931dd-0.webp" alt="image-20230722225248152" style="zoom:50%;" /><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>支持docker一键部署</li><li>中文 DOS 游戏合集，目前共有 1898 款游戏</li><li>支持存档</li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>咕咕的Demo：<a href="https://games.gugu.ovh/">https://games.gugu.ovh/</a><br>GitHub官方仓库：<a href="https://github.com/rwv/chinese-dos-games">https://github.com/rwv/chinese-dos-games</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是香港的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选带宽比较大的，而且线路还不错的机器）如果是小白刚开始玩的话，可以选择<a href="https://blog.laoda.de/vps/">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script/">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker/">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>）</li></ul><blockquote><p>服务器要求：带宽最好大一些，硬盘能大一些也最好，1898 款游戏大概36G，需要手动下载一下。</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube"><a href="#5-1-YouTube" class="headerlink" title="5.1 YouTube"></a>5.1 YouTube</h3><p>视频地址：<a href="https://youtu.be/B_tZLDbBN0I">https://youtu.be/B_tZLDbBN0I</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV1nc411w7JD/">https://www.bilibili.com/video/BV1nc411w7JD/</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png" style="zoom:33%;" /><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不建议用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png" style="zoom:25%;" /><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager/">https://blog.laoda.de/archives/nginxproxymanager/</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/games</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><p>这边有两种搭建方式，因为36G的游戏做成docker的镜像太大了，所以作者只是将40多个经典的DOS游戏封装到了docker的镜像里面，所以你的服务器如果硬盘不够大，可以直接用默认的方式安装。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">dosgame-web-docker:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">dosgame</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8090:262&#x27;</span>  <span class="comment">#8090可以改成其他服务器没被占用的端口</span></span><br><span class="line"><span class="comment">#         volumes:</span></span><br><span class="line"><span class="comment">#             - &#x27;/root/data/docker_data/games/chinese-dos-games:/app/static/games&#x27;</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;oldiy/dosgame-web-docker:latest&#x27;</span></span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>如果你的服务器硬盘大于36G，那你可以尝试直接装1989款游戏。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">dosgame-web-docker:</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">dosgame</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8090:262&#x27;</span>  <span class="comment">#8090可以改成其他服务器没被占用的端口</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;/root/data/docker_data/games/chinese-dos-games:/app/static/games&#x27;</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;oldiy/dosgame-web-docker:latest&#x27;</span></span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><p>然后在</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games/</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/rwv/chinese-dos-games.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> chinese-dos-games/</span><br><span class="line"></span><br><span class="line">python3 download_data.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.laoda.de/i/2023/07/24/s4abll-0.webp" alt="image-20230724170023076"></p><p>注意这边下载默认是下载1989款游戏的，总共36G左右，如果你的服务器的下载带宽不大的话，可能需要非常非常久。这也是这边推荐大家用海外的服务器的原因，带宽普遍较大，比如<a href="https://blog.laoda.de/vps/">Racknerd</a>（注意选美西地区），下载是G口的速度，理论值在128M&#x2F;s，下载起来相对较快。</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: git: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>输入:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update -y</span><br><span class="line">apt install git -y</span><br></pre></td></tr></table></figure><p>再重新运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/rwv/chinese-dos-games.git</span><br></pre></td></tr></table></figure><p>即可。</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: python: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>说明电脑上没装python，你需要装一个</p><p>这边还是以Debian系统为例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install python3</span><br><span class="line"></span><br><span class="line">python3 download_data.py</span><br></pre></td></tr></table></figure><p>即可。</p><p>如果你担心SSH断开，或者你不想一直等着，想让它后台慢慢下载，可以试试咕咕之前分享过的Screen的使用方法：<a href="https://blog.laoda.de/archives/how-to-use-linux-screen/">Linux 实用工具 Screen —— 再也不怕因为网络连接中断杀死任务了！</a></p><p>下载完成之后，你可以运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /root/data/docker_data/games/chinese-dos-games/bin | grep <span class="string">&quot;^-&quot;</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><p>查看文件夹中的文件数量。不出意外应该显示<code>1898</code></p><p>你也可以用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> -sh /root/data/docker_data/games</span><br></pre></td></tr></table></figure><p>计算文件夹的总大小，不出意外应该显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">36G /root/data/docker_data/games</span><br></pre></td></tr></table></figure><p>没什么问题的话，我们可以运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games</span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/root/data/docker_data/games</span><br><span class="line"></span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>取决于你的docker compose的版本，新的是没有<code>-</code>的</p><p>等待拉取镜像即可。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>如果你是阿里云、腾讯云、甲骨文、azure等大厂的机器，可能需要打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom: 25%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom: 25%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>games</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom: 25%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>理论上，等出现绿色的<code>done</code>字样，</p><p>我们就可以输入 <code>http://ip:8090</code> 访问了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>不过现在我们还是用IP+端口的方式访问的，不够优雅，一般情况下，我们都需要给网页加上https！让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>gugugege</code> 来获得 1 美元的优惠（失效的话可以评论区反馈一下～）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo/">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282" style="zoom:33%;" /><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom: 33%;" /><blockquote><p>注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 games 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>games</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom: 33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom: 33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D;</p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>参考视频。</p><h3 id="8-1-更新-games"><a href="#8-1-更新-games" class="headerlink" title="8.1 更新 games"></a>8.1 更新 games</h3><p>一般应该不需要怎么更新，作者停更很久了，不过这边还是提供一下docker-compose安装的应用的基本更新方法。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/games /root/data/docker_data/games.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="8-2-卸载-games"><a href="#8-2-卸载-games" class="headerlink" title="8.2 卸载 games"></a>8.2 卸载 games</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/games</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/games  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><ul><li><p>部分游戏没有按键说明，可能需要自己在键盘尝试一下，一般就是<code>shift</code>、<code>alt</code>、<code>enter</code>、<code>空格</code>、<code>command</code>、<code>z</code>、<code>x</code>这几个键，大家自己试试看。</p></li><li><p>部分游戏可能有bug，大家可以<a href="https://github.com/rwv/chinese-dos-games/issues">反馈一下</a>。</p></li></ul><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/rwv/chinese-dos-games/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/rwv/chinese-dos-games/">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub官方仓库：<a href="https://github.com/rwv/chinese-dos-games/">https://github.com/rwv/chinese-dos-games/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;小学的时候，班上有几个同学家里比较富裕，爸爸妈妈给他们买了步步高电子词典，本来是学习的工具，但是有一天发现可以下载游戏，于是</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="DockerCompose" scheme="https://blog.laoda.de/tags/DockerCompose/"/>
    
    <category term="Docker部署" scheme="https://blog.laoda.de/tags/Docker%E9%83%A8%E7%BD%B2/"/>
    
    <category term="DOS 游戏" scheme="https://blog.laoda.de/tags/DOS-%E6%B8%B8%E6%88%8F/"/>
    
    <category term="复古游戏" scheme="https://blog.laoda.de/tags/%E5%A4%8D%E5%8F%A4%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>【好玩儿的Docker项目】5分钟搭建一个又小又快的文本、代码粘贴工具—— Hasty Paste</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-hasty-paste/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-hasty-paste/</id>
    <published>2023-07-18T10:28:03.000Z</published>
    <updated>2023-07-19T05:05:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>Hasty Paste 是一个快速粘贴文本并共享的地方，主要用于共享调试日志等，以帮助开发人员提供技术支持。该项目的目标是既快又小。</p><p>之前介绍过的类似项目：<a href="https://blog.laoda.de/archives/docker-compose-install-microbin/">【好玩儿的 Docker 项目】10 分钟搭建一个巨好用的粘贴板工具 ——MicroBin</a></p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p><img src="https://img.laoda.de/i/2023/07/18/x2x1rn-0.webp" alt="361535150c7231d1b5defa5005cbd426.png"></p><p><img src="https://img.laoda.de/i/2023/07/18/x2vsm9-0.webp" alt="43c0d6c3ba13d306e53029e874caca1a.png"></p><p><img src="https://img.laoda.de/i/2023/07/18/x2usc3-0.webp" alt="7479c1257d5e50aec04b7e900d7b48cd.png"></p><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>支持docker一键部署，轻量级Docker镜像（使用Alpine Linux）</li><li>支持快速粘贴和保存，分享一些文本</li><li>公开访问，无需身份验证</li><li>随机生成的ID，可选择使用“长”ID以减少暴力攻击</li><li>支持添加过期时间</li><li>支持深色主题</li><li>可选语法高亮显示</li><li>不需要JavaScript</li><li>REST API接口</li><li>支持S3对象存储</li><li>支持缓存（内部和Redis）</li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>咕咕的Demo：<a href="https://paste-test.gugu.ovh/">https://paste-test.gugu.ovh/</a><br>GitHub官方仓库：<a href="https://github.com/enchant97/hasty-paste">https://github.com/enchant97/hasty-paste</a><br>官方文档地址：<a href="https://enchantedcode.co.uk/hasty-paste/">https://enchantedcode.co.uk/hasty-paste/</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是硅谷的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun/">点击查看</a>）或者<a href="https://blog.laoda.de/vps/">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script/">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker/">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube"><a href="#5-1-YouTube" class="headerlink" title="5.1 YouTube"></a>5.1 YouTube</h3><p>视频地址：<a href="https://youtu.be/R35imcsDfDo">https://youtu.be/R35imcsDfDo</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV12V411N7M1/">https://www.bilibili.com/video/BV12V411N7M1/</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png" style="zoom:33%;" /><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不建议用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png" style="zoom:25%;" /><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager/">https://blog.laoda.de/archives/nginxproxymanager/</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/hastypaste</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/hastypaste</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">paste-bin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/enchant97/hasty-paste:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">hasty-paste</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8000</span> <span class="comment"># 左边的8090可以自行修改成服务器上没有使用的端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/app/data</span></span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom: 25%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom: 25%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>hastypaste</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom: 25%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/hastypaste    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 777 data</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>一般情况下，我们都需要给网页加上https！让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo/">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282" style="zoom:33%;" /><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom: 33%;" /><blockquote><p>注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 hastypaste 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>hastypaste</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom: 33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom: 33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D;</p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>参考视频，或者官方文档：<a href="https://enchantedcode.co.uk/hasty-paste/install.html">https://enchantedcode.co.uk/hasty-paste/install.html</a></p><h3 id="8-1-更新-hastypaste"><a href="#8-1-更新-hastypaste" class="headerlink" title="8.1 更新 hastypaste"></a>8.1 更新 hastypaste</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/hastypaste</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/hastypaste /root/data/docker_data/hastypaste.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="8-2-卸载-hastypaste"><a href="#8-2-卸载-hastypaste" class="headerlink" title="8.2 卸载 hastypaste"></a>8.2 卸载 hastypaste</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/hastypaste</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/hastypaste  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><p>暂未发现</p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/enchant97/hasty-paste/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/enchant97/hasty-paste/">项目</a> 中来，贡献自己的一份力量！</p><blockquote><p>目前这个项目非常需要维护人员，欢迎小伙伴贡献自己的力量。</p></blockquote><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub官方仓库：<a href="https://github.com/enchant97/hasty-paste">https://github.com/enchant97/hasty-paste</a><br>官方文档地址：<a href="https://enchantedcode.co.uk/hasty-paste/">https://enchantedcode.co.uk/hasty-paste/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;Hasty Paste 是一个快速粘贴文本并共享的地方，主要用于共享调试日志等，以帮助开发人员提供技术支持。该项目的目标是既</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="DockerCompose" scheme="https://blog.laoda.de/tags/DockerCompose/"/>
    
    <category term="Docker部署" scheme="https://blog.laoda.de/tags/Docker%E9%83%A8%E7%BD%B2/"/>
    
    <category term="paste" scheme="https://blog.laoda.de/tags/paste/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客Butterfly主题配置记录（附简单聊一下之前博客的问题）</title>
    <link href="https://blog.laoda.de/archives/hexo-butterfly-config/"/>
    <id>https://blog.laoda.de/archives/hexo-butterfly-config/</id>
    <published>2023-07-15T00:54:55.000Z</published>
    <updated>2023-07-15T03:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单聊一下之前博客的问题"><a href="#简单聊一下之前博客的问题" class="headerlink" title="简单聊一下之前博客的问题"></a>简单聊一下之前博客的问题</h2><p>博客前段时间不确定是DNS解析的问题还是被攻击了，导致无法访问。（期间更换了高防服务器依旧无果，只要用<code>blog.laoda.de</code>或者<code>iwanlab.com</code>一反代，源站服务器CPU立马飙升到100%，不管是OVH还是HZ，但是换别的域名反代源站CPU占用一直保持在3-5%的水平）</p><p><img src="https://img.laoda.de/i/2023/07/12/12dg711-0.webp"></p><p>通过top查看是java的进程占用过多（机器上架设了halo，是基于Java的）</p><p><img src="https://img.laoda.de/i/2023/07/12/12ruyhd-0.webp"></p><p>但是我有其他服务器也搭建了halo的博客，那个基本只有20-60%的占用</p><p><img src="https://img.laoda.de/i/2023/07/12/12sttd0-0.webp"></p><p>折腾了好久，做了以下尝试，均没有效果：</p><p>1、利用hetzner的备份功能，直接找一台新的服务器部署，然后反代（还是用瓦工，同一个域名），源站服务器CPU在反代之前一直是0-5%占用，一旦反代，飙升到200%（2核心的）</p><p>2、 直接换反代服务器（换成了斯巴达，同一个域名），效果同上，没反代之前是cpu低占用，一旦反代，直接飙满；</p><p>3、停用Wordpress，重新用docker部署另一个halo博客，用同一个域名，依旧如上，换了一个域名之后，恢复正常。</p><p>猜想会不会是这个域名的问题，于是我用了 <a href="http://www.aaa.com/">www.aaa.com</a> 依旧采用源站+反代的模式，正常了，cpu在5%左右。</p><p>然后我把aaa.com 301重定向到了 <a href="http://www.aaa.com/">www.aaa.com</a> 今天一天正常，结果刚刚，源站服务器cpu又爆了</p><p>心力交瘁，于是就想索性换到无后台的静态博客Hexo吧，正好以前也弄过，有经验，这样后台没有数据处理，应该就没问题了。</p><blockquote><p>想不到折腾了近三年，还是回到了Hexo &#x3D; &#x3D;</p></blockquote><p>又用上了当时折腾博客一眼相中的Butterfly主题（当时记得只有300+ star，现在已经是5K+了）</p><p>因为Hexo没有后台，很多东西需要自己手动来配置一下的，期间有些内容也是网上搜索得到的答案，为了防止遗忘，咕咕这边特别记录一下一些我认为的重点，同时也给想要使用Hexo博客的新手小伙伴一些参考吧。</p><h2 id="Hexo博客配置记录"><a href="#Hexo博客配置记录" class="headerlink" title="Hexo博客配置记录"></a>Hexo博客配置记录</h2><h3 id="将Hexo博客自动部署到服务器"><a href="#将Hexo博客自动部署到服务器" class="headerlink" title="将Hexo博客自动部署到服务器"></a>将Hexo博客自动部署到服务器</h3><p>下面的很多内容网上都能找到各种解决方案，这边先把网上没有的，咕咕自己折腾的分享给大家。</p><p>之前用Hexo博客，最大的痛点就是：<strong>我怎么样才能一键把我本地生成的博客推送到我的服务器上？</strong></p><blockquote><p>其实可以推送到GitHub，但是GitHub访问比较慢，很多地区的联通宽带甚至无法访问，咕咕这边有<a href="https://bwh81.net/aff.php?aff=67086&pid=87">搬瓦工</a>的<a href="https://blog.laoda.de/archives/vps-route/">三网CN2 GIA</a>的服务器，国内访问速度很不错，所以想着部署在搬瓦工上，给国内不管是使用移动、联通还是电信宽带的小伙伴们都能提供一个良好的访问体验。</p></blockquote><p>其实，在现在的博客里有一个方法：<a href="https://blog.laoda.de/archives/hexo-building/">将 Hexo 部署到阿里云轻量服务器（保姆级教程）</a> （这个是转载的当时一位大佬的博客，大概是3年前，当时自己跟着一步一步做成功了，也很激动。）</p><p>但是这个方法说实话配置起来还是比较复杂的。</p><p>有没有简单一点的方法呢？</p><p>突然想到，现在不是有<a href="https://blog.laoda.de/archives/chatgpt-plus-depay/">ChatGPT</a>吗？之前一直不会写脚本，现在把需求给ChatGPT，让它帮忙写一个自动部署脚本不就行了？</p><p>于是有了下面要介绍的这个脚本。</p><p>先说一下我的环境与目的：</p><ul><li><a href="https://bwh81.net/aff.php?aff=67086&pid=87">搬瓦工服务器</a>一台，IP：<code>173.242.118.113</code> SSH端口:<code>3451</code> ，安装了<a href="https://blog.laoda.de/archives/nginxproxymanager/">Nginx Proxy Manager</a>（你也可以是任意的一台服务器，比如<a href="https://loll.cc/tx">腾讯云</a>、<a href="https://blog.laoda.de/vps/">Racknerd</a>等等，可以是任意系统，只要也安装上Nginx Proxy Manager即可）</li><li>本地使用MacBook Air（需要python和rsync，Windows的同学也不要慌，下面有windows的安装方法）</li><li>Hexo文件存放在<code>/Users/gugu/blog</code>，Hexo的public文件（就是我们需要上传到服务器的）路径是<code>/Users/gugu/blog/public</code></li><li>目标把本地<code>/Users/gugu/blog/public</code>的内容发送到服务器的<code>/root/data/docker_data/npm/data/blog</code></li></ul><p>直接把需求仍给ChatGPT，看看回答：</p><p>Prompt：</p><blockquote><p>我需要把本地mac电脑上，<code>/Users/gugu/blog/public</code>文件夹里面的内容，上传到服务器的<code>/root/data/docker_data/npm/data/blog</code>里，服务器的IP：<code>173.242.118.113</code> ，SSH端口：<code>3451</code> ，请帮我写一个自动化脚本。</p></blockquote><p>ChatGPT回答：</p><blockquote><p>这里是一个基本的bash脚本，使用<code>rsync</code>命令通过SSH协议上传文件，<code>rsync</code>可以保持源文件和目标文件之间的一致性，非常适合用于备份和镜像。如果<code>rsync</code>命令在你的机器上没有安装，它应该在大多数Linux发行版和MacOS上通过包管理器（如apt，yum，brew等）就可以安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义源路径、目标路径、服务器地址</span></span><br><span class="line">SOURCE_PATH=<span class="string">&#x27;/Users/gugu/blog/public&#x27;</span></span><br><span class="line">DEST_PATH=<span class="string">&#x27;/root/data/docker_data/npm/data/blog&#x27;</span></span><br><span class="line">SERVER_IP=<span class="string">&#x27;173.242.118.113&#x27;</span></span><br><span class="line">SSH_PORT=3451</span><br><span class="line"></span><br><span class="line"><span class="comment"># rsync命令</span></span><br><span class="line">rsync -avz -e <span class="string">&quot;ssh -p <span class="variable">$SSH_PORT</span>&quot;</span> --progress <span class="variable">$SOURCE_PATH</span> username@<span class="variable">$SERVER_IP</span>:<span class="variable">$DEST_PATH</span></span><br></pre></td></tr></table></figure><p>这个脚本使用了<code>rsync</code>的以下选项：</p><ul><li><code>-a</code>：这是”归档”模式，可以保留文件的所有属性和权限,同时递归地拷贝文件夹。</li><li><code>-v</code>：这是”详细”模式，表示输出详细信息。</li><li><code>-z</code>：使用gzip压缩数据，可以加快传输速度。</li><li><code>-e</code>：使用指定的传输命令，如ssh，并可以附带上其他选项，如 <code>-p</code>用于指定端口。</li></ul><p>在<code>rsync</code>命令的最后，你需要替换<code>username</code>为你登录目标服务器的用户名。请注意，这个脚本默认认为你已经设置了从你的Mac电脑到服务器的无密码SSH登录。如果尚未设置，你需要在运行脚本时手动输入密码，或者设置SSH密钥无密码登录。</p><p>将上述脚本保存为如<code>sync.sh</code>文件，你可以在终端中通过以下命令来运行它：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash sync.sh</span><br></pre></td></tr></table></figure><p>确保你的脚本有执行权限，如果没有，你可以使用下面的命令来给你的脚本添加执行权限：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x sync.sh</span><br></pre></td></tr></table></figure><p>然后你可以简单地通过以下命令运行脚本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sync.sh</span><br></pre></td></tr></table></figure></blockquote><p>注意：这边的<code>sync.sh</code>文件我们可以放在Hexo博客的根目录。</p><p>Windows安装Rsync：</p><blockquote><p>由于Windows自身并没有类似于<code>rsync</code>的命令，你需要下载和安装Cygwin，这是一个在Windows下提供类UNIX环境支持的软件，其中包含了大量GNU和开源工具，包括<code>rsync</code>。</p><p>以下是具体步骤：</p><ol><li><p>下载并安装Cygwin:</p><ul><li>访问Cygwin的官方网站（<a href="https://www.cygwin.com/%EF%BC%89%E5%B9%B6%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E7%A8%8B%E5%BA%8F%E3%80%82">https://www.cygwin.com/）并下载安装程序。</a></li><li>运行下载的<code>setup-x86.exe</code>（32位系统）或<code>setup-x86_64.exe</code>（64位系统）文件。</li><li>在Cygwin Setup的包选择界面，输入<code>rsync</code>在搜索框中，然后在搜索结果中找到对应的<code>rsync</code>包，在SpinBox中将Skip更改为对应的版本，点击下一步完成安装。</li></ul></li><li><p>设置Path环境变量:</p><ul><li>右击电脑上的“此电脑”图标或者”My Computer”，选择“属性”或者”Properties”。</li><li>在弹出界面中，选择“高级系统设置”或者”Advanced System Settings”。</li><li>在“系统属性”或者”System Properties”窗口中，点击“环境变量”或者”Environment Variables”。</li><li>在“环境变量”窗口中，系统变量栏找到Path，点击编辑或者”Edit”，在变量值的末尾添加<code>;C:\cygwin64\bin</code>（64位系统，32位系统则添加<code>;C:\cygwin\bin</code>），点击“确定”或者”OK”。</li></ul></li><li><p>测试<code>rsync</code>是否安装成功:</p><ul><li>打开命令提示符（CMD）或者Powershell，输入<code>rsync --version</code>并按回车。</li><li>如果显示rsync的版本信息，那么rsync已经安装成功。</li></ul></li></ol><p>注意：安装Cygwin时可能需要管理员权限。同时也请注意保证Cygwin软件包的完整性和安全性，以免引入恶意软件。</p></blockquote><p>Windows安装python：</p><blockquote><p>在Windows上安装Python的步骤如下：</p><ol><li><p>访问Python的官方网站： <a href="https://www.python.org/">https://www.python.org/</a></p></li><li><p>鼠标悬停在顶部菜单栏的“Downloads”选项上，它会显示最新版本的Python供你下载。如果你需要安装其他版本的Python，可以点击“Downloads”选项进入下载页面，查看并选择你需要的版本。</p></li><li><p>点击下载Python对应版本的安装器，通常你应该选择64位安装包，除非你知道自己的电脑是32位的。文件应为”python-x.x.x-amd64.exe”格式，其中”x.x.x”代表Python的版本。</p></li><li><p>运行下载的安装程序，选择“Customize installation”，然后点击“Next”。</p></li><li><p>在下一个页面，可以看到一个“Add Python to PATH”选项，记得勾选它。这样可以使得Python在你的系统路径（PATH环境变量）中，这样你就可以在命令提示符（cmd）中直接运行Python。接下来点击”Install Now”开始安装。</p></li><li><p>安装完成后，点击“Close”。</p></li><li><p>验证Python是否正确安装：打开命令提示符（cmd），然后输入<code>python --version</code>，如果正确输出了Python的版本号，那么Python就安装成功了。</p></li></ol><p>注意：介于权限问题，你可能需要管理员权限来完成Python的安装。</p></blockquote><p>我们当然是想着能偷懒就偷懒，不输入密码，于是接着提问：</p><p>Prompt：</p><blockquote><p>如何安装rsync? 我本地是mac电脑，服务器是Debian11，另外如何配置无密码访问？</p></blockquote><p>ChatGPT回答：</p><blockquote><p><strong>在Mac上安装rsync：</strong></p><p>Mac系统通常预装了rsync，你可以通过输入以下命令在终端检查rsync是否已经安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync --version</span><br></pre></td></tr></table></figure><p>如果rsync已经安装，这个命令会显示其版本号。如果rsync没有安装，你需要通过brew来安装。</p><p>首先，如果你还没有安装brew，你需要安装它。在终端执行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>然后，你可以使用brew安装rsync：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install rsync</span><br></pre></td></tr></table></figure><p><strong>在Debian11服务器上安装rsync：</strong></p><p>在Debian系统上，你可以使用apt来安装rsync。运行以下命令安装rsync：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install rsync</span><br></pre></td></tr></table></figure><p><strong>配置SSH密钥无密码访问：</strong></p><p>无密码登录的设置基于SSH公私钥对的认证。基本的步骤如下：</p><ol><li><p>在本地Mac上生成SSH公私钥对。在终端中输入以下命令：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p> 然后按提示操作。默认情况下，公私钥对会被保存在<code>~/.ssh/id_rsa.pub</code>（公钥）和<code>~/.ssh/id_rsa</code>（私钥）。如果需要，你可以在生成时设置一个密码，但是如果你想实现无密码登录，这里就不要设置密码。</p></li><li><p>将生成的公钥复制到服务器上。在终端输入以下命令：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub -p 3451 username@173.242.118.113</span><br></pre></td></tr></table></figure><p> 这里需要将<code>username</code>替换为你的用户名。这个命令会将你的公钥添加到服务器上的<code>~/.ssh/authorized_keys</code>文件中，这样服务器就可以识别你的本地机器了。</p></li><li><p>测试无密码登录。你可以尝试ssh登录服务器：</p> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -p 3451 username@173.242.118.113</span><br></pre></td></tr></table></figure><p> 如果一切顺利，你应该能够不输入密码就登录服务器了。</p></li></ol></blockquote><p>注意：这边的brew的安装，由于网络原因，用ChatGPT提供的方法可能装不上，可以尝试用这个方法：[M1 芯片 Mac 上 Homebrew 安装](M1 芯片 Mac 上 Homebrew 安装)   或者直接看作者的GitHub：<a href="https://github.com/ineo6/homebrew-install">https://github.com/ineo6/homebrew-install</a></p><p>好了，接下来我们到服务器上操作一下。</p><p>其实关于如何在把静态网站部署在NPM上，咕咕也有过分享：<a href="https://blog.laoda.de/archives/host-static-sites-on-npm/">如何在 Nginx Proxy Manager（NPM）上部署静态网站</a></p><p>直接看这篇就行了。</p><p>注意只要新建一个文件夹：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/npm/data/blog</span><br></pre></td></tr></table></figure><p>然后参考上面文章，把<code>/data/demo10.gao.ee</code>改成<code>/data/blog</code>就行。</p><p>好了，可以来测试一下了！</p><p>以后写好文章之后发布，就只需要三步：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">./sync.sh</span><br></pre></td></tr></table></figure><p>很舒服了，而且文章什么的都保存在你的本地，也比较有安全感。（当然你可以选择把这个也上传到服务器里，双保险）</p><blockquote><p>以下为咕咕在Hexo Butterfly主题下安装的插件，不过理论上是Hexo博客都可用的。</p><p>注意以下插件均到Hexo根目录安装。</p></blockquote><h3 id="Hexo-Butterfly文章置顶插件"><a href="#Hexo-Butterfly文章置顶插件" class="headerlink" title="Hexo Butterfly文章置顶插件"></a>Hexo Butterfly文章置顶插件</h3><p>卸载<code>hexo-generator-index</code>，然后安装<code>hexo-generator-index-pin-top</code></p><p>注意到Hexo根目录安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><p>使用方法：</p><p>在需要置顶的文章的Front-matter中加上top: true&#x2F;数字即可，数字越大，文章越靠前。</p><p>例如</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cover: </span><br><span class="line">top: 1 <span class="comment">#这里加一个top就行</span></span><br><span class="line">abbrlink: 1d543</span><br><span class="line"><span class="built_in">date</span>: 2023-07-15 10:32:05</span><br></pre></td></tr></table></figure><h3 id="Hexo-Butterfly-sitemap插件"><a href="#Hexo-Butterfly-sitemap插件" class="headerlink" title="Hexo Butterfly sitemap插件"></a>Hexo Butterfly sitemap插件</h3><p>站点地图即 <a href="https://baike.baidu.com/item/sitemap/6241567?fr=aladdin">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。所以我们首先需要生成一个站点地图。</p><p>安装 Google 的站点地图生成插件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>然后来到 Hexo 根目录配置文件 <code>config.yml</code>，在下面添加：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 站点地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><p>然后重新推送到服务器，访问如下 URL:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br></pre></td></tr></table></figure><p>看看网页中有没有出现代码。有的话就成功。</p><p>比如咕咕的sitemap就是：<a href="https://blog.laoda.de/sitemap.xml">https://blog.laoda.de/sitemap.xml</a></p><p>参考：<a href="https://qmike.top/posts/2a1b5a62">https://qmike.top/posts/2a1b5a62</a></p><h3 id="Hexo-Butterfly-RSS插件"><a href="#Hexo-Butterfly-RSS插件" class="headerlink" title="Hexo Butterfly RSS插件"></a>Hexo Butterfly RSS插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在hexo的主配置文件<code>_config.yml</code>中任意位置添加以下代码：</p><p><img src="https://img.laoda.de/i/2023/07/15/h2lp1b-0.webp" alt="image-20230715103228334"></p><p>比如咕咕的RSS：<a href="https://blog.laoda.de/atom.xml">https://blog.laoda.de/atom.xml</a></p><p>参考：<a href="https://www.cnblogs.com/MoYu-zc/p/14395965.html">https://www.cnblogs.com/MoYu-zc/p/14395965.html</a></p><h3 id="Hexo-Butterfly-本地搜索插件"><a href="#Hexo-Butterfly-本地搜索插件" class="headerlink" title="Hexo Butterfly 本地搜索插件"></a>Hexo Butterfly 本地搜索插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>同时修改主题配置文件：</p><p><img src="https://img.laoda.de/i/2023/07/15/h1cmwc-0.webp" alt="image-20230715103018077"></p><h3 id="持续更新中"><a href="#持续更新中" class="headerlink" title="持续更新中"></a>持续更新中</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单聊一下之前博客的问题&quot;&gt;&lt;a href=&quot;#简单聊一下之前博客的问题&quot; class=&quot;headerlink&quot; title=&quot;简单聊一下之前博客的问题&quot;&gt;&lt;/a&gt;简单聊一下之前博客的问题&lt;/h2&gt;&lt;p&gt;博客前段时间不确定是DNS解析的问题还是被攻击了，导致无法访</summary>
      
    
    
    
    <category term="网站搭建" scheme="https://blog.laoda.de/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://blog.laoda.de/tags/Hexo/"/>
    
    <category term="Butterfly" scheme="https://blog.laoda.de/tags/Butterfly/"/>
    
    <category term="ChatGPT" scheme="https://blog.laoda.de/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>开箱即用！一款注重隐私、安全可控的IOS自定义通知推送工具——Bark，配合Uptime Kuma搭建网站监控！</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-bark/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-bark/</id>
    <published>2023-07-11T07:18:17.000Z</published>
    <updated>2023-07-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>免费、简单、安全，开箱即用！</p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><img src="https://img.laoda.de/i/2023/06/26/skv0ci-0.webp" alt="IMG_8A07D54D57DD-1.jpeg" style="zoom:25%;" /><h3 id="2-1-特点"><a href="#2-1-特点" class="headerlink" title="2.1 特点"></a>2.1 特点</h3><ul><li>免费、轻量！简单调用接口即可给自己的iPhone发送推送。</li><li>依赖苹果APNs，及时、稳定、可靠</li><li>不会消耗设备的电量， 基于系统推送服务与推送扩展，APP本体并不需要运行。</li><li>隐私安全，可以通过一些方式确保包含作者本人在内的所有人都无法窃取你的隐私。点击详细了解如何保障<a href="https://bark.day.app/#/privacy">隐私安全</a></li></ul><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>GitHub官方仓库：<a href="https://github.com/Finb/bark-server">https://github.com/Finb/bark-server</a><br>官方文档地址：<a href="https://bark.day.app/">https://bark.day.app/</a><br>作者博客：<a href="https://day.app/2018/06/bark-server-document/">https://day.app/2018/06/bark-server-document/</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是硅谷的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun/">点击查看</a>）或者<a href="https://blog.laoda.de/vps/">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script/">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker/">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager/">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube"><a href="#5-1-YouTube" class="headerlink" title="5.1 YouTube"></a>5.1 YouTube</h3><p>视频地址：<a href="https://youtu.be/Pfrla3su_Js">https://youtu.be/Pfrla3su_Js</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩：<a href="https://www.bilibili.com/video/BV1qP411e7Qm/">https://www.bilibili.com/video/BV1qP411e7Qm/</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png" style="zoom:33%;" /><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不建议用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png" style="zoom:25%;" /><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png" style="zoom:25%;" /><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://iwanlab.com/nginx-proxy-manager/">https://iwanlab.com/nginx-proxy-manager/</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/bark</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bark</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">bark-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">finab/bark-server</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">bark-server</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8090:8080&quot;</span>  <span class="comment"># 左边的8090可以自行修改成服务器上没有使用的端口</span></span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom: 25%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom: 25%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>bark</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom: 25%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bark    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090/ping</code> 访问了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><img src="https://img.laoda.de/i/2023/06/26/slfwwq-0.webp" alt="5c6c9207637033970fd9f0c2c502aaa8.png" style="zoom: 33%;" /><p>出现<code>code:200</code>代表安装成功！</p><p>因为这个涉及到个人消息的，所以非常需要https！会让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://iwanlab.com/namesilo">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://iwanlab.com/namesilo/">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282" style="zoom:33%;" /><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://iwanlab.com/nginx-proxy-manager/">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom: 33%;" /><blockquote><p>注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 bark 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>bark</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom: 33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom: 33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D;</p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>参考视频，或者官方文档：<a href="https://bark.day.app/#/tutorial">https://bark.day.app/#/tutorial</a></p><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><p>在 <code>APP Store</code> 里找到 <code>Bark</code></p><p>打开 <code>APP</code>，默认指向了官方服务器 <code>api.day.app</code>，需要点右上角的 <code>+</code> 号来添加我们前面搭建的私有服务器：</p><img src="https://img.laoda.de/i/2023/06/26/sln5b0-0.webp" alt="c4a53736051c675cbff711ffeb5ec91a.png" style="zoom:33%;" /><p>在 <code>APP</code>端填入你的服务器 <code>IP</code>或域名：</p><img src="https://img.laoda.de/i/2023/06/26/sm4ws5-0.webp" alt="4feba2a8cd724a158f94c99a6c74bd59.png" style="zoom: 25%;" /><p>添加成功之后，要 <code>允许</code> 发消息通知：</p><img src="https://img.laoda.de/i/2023/06/26/sm7p7s-0.webp" alt="046502e4cd8a24680cbd22a8cb02b9b1.png" style="zoom:25%;" /><p>点中间的注册设备：</p><img src="https://img.laoda.de/i/2023/06/26/sm99xv-0.webp" alt="7d1ff1a29599ecf097782e79c8e5fdfe.png" style="zoom:25%;" /><p>会显示不同内容的发送格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  推送内容</span><br><span class="line">https://bark.gugu.ovh/Xy4ssdd2pARjLfFY/这里改成你自己的推送内容</span><br><span class="line"></span><br><span class="line"># 推送标题</span><br><span class="line">https://bark.gugu.ovh/Xy4ssdd2pARjLfFY/推送标题/这里改成你自己的推送内容</span><br></pre></td></tr></table></figure><img src="https://img.laoda.de/i/2023/06/26/smb7z9-0.webp" alt="53d945659fd6737f4d92e320f9168274.png" style="zoom:25%;" /><p>其中域名后面的一串字符 <code>Xy4ssdd2pARjLfFY</code> 就是用来标识设备的唯一码，别人知道这个码，然后知道你的这个域名，就可以给你推送消息了，所以注意保管好不要泄漏。</p><p>接下来你就可以用命令行、<code>API</code> 调试工具或者 <code>chrome</code>插件，来向<code>iphone</code> 发送消息</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p>Chrome插件：</p><img src="https://img.laoda.de/i/2023/06/26/smlz9c-0.webp" alt="1da8b329d0b6944511fa1fee3cb2890b.png" style="zoom:33%;" /><p>安装完成后，点浏览器上的插件图标，会弹出提示</p><p><img src="https://img.laoda.de/i/2023/06/26/smo92x-0.webp" alt="img"></p><p><code>Default Push Content</code> 是指缺省推送的内容，<code>Clipboard</code>是剪贴板中的内容，<code>Current page URL</code> 是当前打开网页的地址</p><p>找到下面的<code>New device push URL</code></p><img src="https://img.laoda.de/i/2023/06/26/sms193-0.webp" alt="img" style="zoom: 67%;" /><p>填入前面获取的地址，<code>https://bark.gugu.ovh/Xy4ssdd2pARjLfFY</code></p><blockquote><p>如果你有多台iPhone，<code>Alias</code> （别名）要填一下，用来区分不同的手机</p></blockquote><img src="https://img.laoda.de/i/2023/06/26/smuj1p-0.webp" alt="02e03b76ec16769b43e87e11f8b989a0.png" style="zoom: 33%;" /><p>在网页上选取内容后，右键找到 <code>Push To Device</code></p><img src="https://img.laoda.de/i/2023/06/26/smwwj4-0.webp" alt="405c404554edc2acd7d08560154265a3.png" style="zoom:33%;" /><p>手机端就会收到发送的消息</p><img src="https://img.laoda.de/i/2023/06/26/sn7970-0.webp" alt="9badcd63aeda2536be39ab6e09ab1e0a.png" style="zoom:25%;" /><h3 id="Uptim-Kuma使用实例"><a href="#Uptim-Kuma使用实例" class="headerlink" title="Uptim Kuma使用实例"></a>Uptim Kuma使用实例</h3><p>安装教程：<a href="https://iwanlab.com/uptimekuma-install/">【好玩的Docker项目】搭建一个专属自己的网站监控——Uptime Kuma</a></p><p>进入设置：</p><img src="https://img.laoda.de/i/2023/06/26/sn97tm-0.webp" alt="ff0682029b207137bf40dc0ad24817a6.png" style="zoom:33%;" /><p>选择Bark：</p><img src="https://img.laoda.de/i/2023/06/26/snb4ae-0.webp" alt="74b5be25747d23f7cf5cff9de1a6b465.png" style="zoom:33%;" /><p>接入点填写：</p><p><code>https://域名/设备ID</code></p><p>Bark群组这边记得填写英文：</p><img src="https://img.laoda.de/i/2023/06/26/sncw7j-0.webp" alt="53f2d32d9db9ab87dbbbb8e209b2071d.png" style="zoom:33%;" /><p>如果你填写了中文，需要把他转成浏览器可以识别的字符：</p><img src="https://img.laoda.de/i/2023/06/26/snf7iu-0.webp" alt="24b0ae4007dba9fed69761602b00cf93.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/06/26/snhfl3-0.webp" alt="8af6535933c9ddfe753529c10952df4d.png" style="zoom:33%;" /><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%E7%BD%91%E7%AB%99%E7%8A%B6%E6%80%81%E9%80%9A%E7%9F%A5</span><br></pre></td></tr></table></figure><p>否则会遇到<code>Request path contains unescaped characters </code>的错误</p><img src="https://img.laoda.de/i/2023/06/26/snjbyv-0.webp" alt="23c14183a9b7cde5a89a2eb6b9f7a226.png" style="zoom:33%;" /><p>测试成功，iPhone上会收到这样的信息：</p><img src="https://img.laoda.de/i/2023/06/26/snuwzc-0.webp" alt="IMG_11A65204D6F2-1.jpeg" style="zoom:25%;" /><h3 id="8-1-更新-bark"><a href="#8-1-更新-bark" class="headerlink" title="8.1 更新 bark"></a>8.1 更新 bark</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bark</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/bark /root/data/docker_data/bark.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="8-2-卸载-bark"><a href="#8-2-卸载-bark" class="headerlink" title="8.2 卸载 bark"></a>8.2 卸载 bark</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/bark</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/bark  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><p>参考官方FAQ：<a href="https://bark.day.app/#/faq">https://bark.day.app/#/faq</a></p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/Finb/bark-server/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/Finb/bark-server">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub官方仓库：<a href="https://github.com/Finb/bark-server">https://github.com/Finb/bark-server</a></p><p>官方文档地址：<a href="https://bark.day.app/">https://bark.day.app</a></p><p>作者博客：<a href="https://day.app/2018/06/bark-server-document/">https://day.app/2018/06/bark-server-document/</a></p><p><a href="https://www.v2ex.com/t/467407">https://www.v2ex.com/t/467407</a></p><p><a href="https://day.app/2018/06/bark-server-document/">https://day.app/2018/06/bark-server-document/</a></p><p><a href="https://github.com/Finb/Bark/blob/master/README.md">https://github.com/Finb/Bark/blob/master/README.md</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;免费、简单、安全，开箱即用！&lt;/p&gt;
&lt;h2 id=&quot;2-项目展示&quot;&gt;&lt;a href=&quot;#2-项目展示&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="DockerCompose" scheme="https://blog.laoda.de/tags/DockerCompose/"/>
    
    <category term="Docker部署" scheme="https://blog.laoda.de/tags/Docker%E9%83%A8%E7%BD%B2/"/>
    
    <category term="Bark" scheme="https://blog.laoda.de/tags/Bark/"/>
    
  </entry>
  
  <entry>
    <title>博客换域名+框架啦！</title>
    <link href="https://blog.laoda.de/archives/turn-to-wordpress/"/>
    <id>https://blog.laoda.de/archives/turn-to-wordpress/</id>
    <published>2023-06-19T03:36:46.165Z</published>
    <updated>2023-06-19T13:47:17.026Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img.laoda.de/i/2023/06/19/ilixux-0.webp" alt="image-20230619112451731"></p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="YouTube："><a href="#YouTube：" class="headerlink" title="YouTube："></a>YouTube：</h3><p>视频地址：<a href="https://youtu.be/LM4WmyVtLjY">https://youtu.be/LM4WmyVtLjY</a></p><h3 id="哔哩哔哩"><a href="#哔哩哔哩" class="headerlink" title="哔哩哔哩"></a>哔哩哔哩</h3><p>【高清版本可以点击去吐槽到 B 站观看】：</p><p><joe-bilibili bvid="BV1Mm4y1i7tY"></joe-bilibili></p><p>为了给小伙伴们更好地体验，咕咕斥巨资购买了<a href="https://gao.ee/justnews">justnews</a>主题，博客又换回了<a href="https://iwanlab.com/">WordPress</a>了。</p><p>同时为了照顾大家的习惯，尽可能还原了之前Halo主题的风格。</p><p>Wordpress之前咕咕也和大家有过介绍——<a href="https://iwanlab.com/blog-choosing/">Hexo还是Hugo？Typecho还是WordPress？读完这篇或许你就有答案了！</a>，基本上就是相对Halo比较笨重，自定义程度更高（<del>意味着可以放更多的广告位了</del>），后续会逐步把文章搬过来，以后就在新的博客这边更新内容！</p><p>新的博客地址：<a href="https://iwanlab.com/">https://iwanlab.com/</a></p><p>因为后续考虑到会更新一些加密货币、Web3、数字移民的内容，所以咕咕给网站取名为：“<strong>爱玩实验室</strong>”，<code>iwan</code>（爱玩）+<code>lab</code>（实验室）并采用了主流的<code>com</code>域名后缀。</p><p>之后，旧的博客就不再维护更新啦，以后的内容都放在<a href="https://iwanlab.com/">爱玩实验室</a>这个新网站里</p><p>希望能和大家一直一起折腾捣鼓一些好玩儿的东西。</p><h2 id="几大更新"><a href="#几大更新" class="headerlink" title="几大更新"></a>几大更新</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>因为咕咕一直用的<a href="https://halo.run/">Halo</a>的<a href="https://github.com/qinhua/halo-theme-joe2.0">Joe</a>这款主题，主题作者可能工作比较忙，暂时还未适配Halo2.0，而Halo1.x 已经停止维护了，Halo1.x有一个普遍的问题就是搜索有时候可能不是很准（不过在Halo2.0以后已经有一个非常强大的搜索系统了），可能有不少小伙伴遇到过部分关键词搜索不到结果的情况，这次换新之后应该会好一些了。</p><h3 id="快讯"><a href="#快讯" class="headerlink" title="快讯"></a>快讯</h3><p>右侧栏目新增了快讯功能，会第一时间更新一些VPS到货或者是即时性比较强的信息。</p><h2 id="待完善"><a href="#待完善" class="headerlink" title="待完善"></a>待完善</h2><p>这个主题有一个缺点就是友情链接不太好整，只能显示在首页底部，之前加友链的小伙伴们比较多，全部显示出来不现实，后续尝试看看能不能搞个专门的页面来显示。</p><p>后续可能会考虑加入论坛功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://img.laoda.de/i/2023/06/19/ilixux-0.webp&quot; alt=&quot;image-20230619112451731&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;视频&quot;&gt;&lt;a href=&quot;#视频&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="网站搭建" scheme="https://blog.laoda.de/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="爱玩实验室" scheme="https://blog.laoda.de/tags/%E7%88%B1%E7%8E%A9%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    <category term="博客迁移" scheme="https://blog.laoda.de/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>打开Pandora的魔盒，丝滑地使用ChatGPT！不用API，完全免费，甚至可以搭建在本地！</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-pandora/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-pandora/</id>
    <published>2023-06-11T01:17:09.323Z</published>
    <updated>2023-06-11T01:17:52.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ChatGPT使用时可能会遇到："><a href="#ChatGPT使用时可能会遇到：" class="headerlink" title="ChatGPT使用时可能会遇到："></a>ChatGPT使用时可能会遇到：</h3><h4 id="1-Please-stand-by-while-we-are-checking-your-browser…"><a href="#1-Please-stand-by-while-we-are-checking-your-browser…" class="headerlink" title="1. Please stand by, while we are checking your browser…"></a>1. Please stand by, while we are checking your browser…</h4><p>动不动来一下，有时候还不动或者出人机验证。痛！</p><p><img src="https://img.laoda.de/i/2023/06/05/o2jy8g-0.webp"></p><h4 id="2-Access-denied-Sorry-you-have-been-blocked"><a href="#2-Access-denied-Sorry-you-have-been-blocked" class="headerlink" title="2. Access denied. Sorry, you have been blocked"></a>2. Access denied. Sorry, you have been blocked</h4><p>经典问题，只能到处找可用VPN，费时费力，更费钱。移动端访问更难。痛！</p><p><img src="https://img.laoda.de/i/2023/06/05/o2lqoj-0.webp"></p><h4 id="3-ChatGPT-is-at-capacity-right-now"><a href="#3-ChatGPT-is-at-capacity-right-now" class="headerlink" title="3. ChatGPT is at capacity right now"></a>3. ChatGPT is at capacity right now</h4><p>系统负载高，白嫖用户不给用。痛！</p><p><img src="https://img.laoda.de/i/2023/06/05/o2vnlk-0.webp"></p><h4 id="4-This-content-may-violate-our-content-policy"><a href="#4-This-content-may-violate-our-content-policy" class="headerlink" title="4. This content may violate our content policy."></a>4. This content may violate our content policy.</h4><p>道德审查，多触发几次可能就封号了。痛！！！</p><p><img src="https://img.laoda.de/i/2023/06/05/o2x813-0.webp"></p><h4 id="5-Something-went-wrong"><a href="#5-Something-went-wrong" class="headerlink" title="5. Something went wrong."></a>5. Something went wrong.</h4><p>吃着火锅唱着歌，突然就出故障了。痛！</p><p><img src="https://img.laoda.de/i/2023/06/05/o2y6df-0.webp"></p><h4 id="6-手机和电脑的模型不通用，顾这个就顾不到那个，痛！"><a href="#6-手机和电脑的模型不通用，顾这个就顾不到那个，痛！" class="headerlink" title="6. 手机和电脑的模型不通用，顾这个就顾不到那个，痛！"></a>6. 手机和电脑的模型不通用，顾这个就顾不到那个，痛！</h4><p><img src="https://img.laoda.de/i/2023/06/05/o31y0l-0.webp"></p><h4 id="7-蹦字慢吞吞，卡顿不流畅，不知道的甚至想换电脑。痛！"><a href="#7-蹦字慢吞吞，卡顿不流畅，不知道的甚至想换电脑。痛！" class="headerlink" title="7. 蹦字慢吞吞，卡顿不流畅，不知道的甚至想换电脑。痛！"></a>7. 蹦字慢吞吞，卡顿不流畅，不知道的甚至想换电脑。痛！</h4><h4 id="8-想把-ChatGPT-接到其他系统，结果只能接个差强人意的-gpt-3-5-turbo。痛！"><a href="#8-想把-ChatGPT-接到其他系统，结果只能接个差强人意的-gpt-3-5-turbo。痛！" class="headerlink" title="8. 想把 ChatGPT 接到其他系统，结果只能接个差强人意的 gpt-3.5-turbo。痛！"></a>8. 想把 <code>ChatGPT</code> 接到其他系统，结果只能接个差强人意的 <code>gpt-3.5-turbo</code>。痛！</h4><p>一次看完上面的噩梦，血压上来了，拳头硬了！太痛了！！！以上痛点，<code>Pandora</code> 一次全部解决。</p><p>咕咕在之前有介绍过<a href="https://blog.laoda.de/archives/docker-compose-install-chatgpt-next-web">【好玩儿的Docker项目】任何地方无障碍快速访问！ChatGPT Next Web——一键免费部署你的私人 ChatGPT 网页应用</a>，这个是采用调用OpenAI的API的方式来实现的无需富强使用ChatGPT的方法。（付费，需要绑定支付方式）</p><p>不过，小伙伴们如果认真对比，就会发现，同样的问题，你通过ChatGPT Next Web问和通过ChatGPT官网提问，ChatGPT Next Web似乎回答的要“笨”一些。</p><p>具体咕咕在这篇文章中也有过提及：<a href="https://blog.laoda.de/archives/chatgpt-and-openai">大白话！简单解释ChatGPT和OpenAI还有API KEYS</a> 有兴趣的可以看一下。</p><p>今天我们就是来解决这个“笨”的问题的。</p><p>我们今天直接来搭建一个和ChatGPT官网99%一样的网站，让你感受一下比直接访问ChatGPT官网还丝滑的体验。（可以完全免费使用）</p><p>PS：本项目还可以搭建在软路由上，局域网内使用！</p><p>本地搭建的话，装好docker，其他的操作步骤和下文一致。</p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p>CLI版本界面：</p><p><img src="https://img.laoda.de/i/2023/06/05/o3jsxv-0.webp" alt="alt Screenshot5"></p><p>Web版本：</p><p><img src="https://img.laoda.de/i/2023/06/05/o3p1iz-0.webp" alt="alt Screenshot10"></p><p><img src="https://img.laoda.de/i/2023/06/05/sc27ij-0.webp" alt="8427936d974f5a3cc4f6992adb6554c8.png"></p><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>GitHub官方仓库：<a href="https://github.com/pengzhile/pandora">https://github.com/pengzhile/pandora</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是硅谷的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun">点击查看</a>）或者<a href="https://blog.laoda.de/vps.html">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script#dd%E7%9B%B8%E5%85%B3">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote><h2 id="5-搭建视频（晚点补一个）"><a href="#5-搭建视频（晚点补一个）" class="headerlink" title="5. 搭建视频（晚点补一个）"></a>5. 搭建视频（晚点补一个）</h2><h3 id="5-1-YouTube："><a href="#5-1-YouTube：" class="headerlink" title="5.1 YouTube："></a>5.1 YouTube：</h3><p>视频地址：</p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩【高清版本可以点击去吐槽到 B 站观看】：<joe-bilibili bvid=""></joe-bilibili></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png"></p><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不要用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png"></p><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager">https://blog.laoda.de/archives/nginxproxymanager</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/pandora</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/pandora</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="获取Access-Token"><a href="#获取Access-Token" class="headerlink" title="获取Access Token"></a>获取Access Token</h2><p>官方登录（有且仅有这一步需要魔法上网），然后访问 <a href="http://chat.openai.com/api/auth/session">这里</a> 拿 <code>Access Token</code></p><p><img src="https://img.laoda.de/i/2023/06/05/sc5kxz-0.webp" alt="0acf608e58c86a0a8624191320e75f5b.png"></p><p>这边我们不直接粘贴到yaml文件里，先保存起来，后续登录的时候我们再粘贴。</p><p>Access Token 有效期 <del>14</del> 30 天，期间访问不需要梯子。这意味着你在手机上也可随意使用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pengzhile/pandora</span> <span class="comment"># 不带tga的话，总是使用 latest ,更新时重新 pull 该 tag 镜像即可</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8090</span>  <span class="comment"># 左边的3002可以自行修改成服务器上没有使用的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">PANDORA_CLOUD:</span> <span class="string">cloud</span></span><br><span class="line">      <span class="comment"># 二选一</span></span><br><span class="line">      <span class="attr">PANDORA_SERVER:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8090</span></span><br><span class="line">      <span class="comment">#PANDORA_ACCESS_TOKEN: eyxxxx</span></span><br></pre></td></tr></table></figure><p>这边我们环境变量选择了<code>PANDORA_SERVER:</code>,当然你如果是局域网使用也可以选<code>PANDORA_ACCESS_TOKEN</code></p><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom:33%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom:33%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>pandora</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom:33%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/pandora    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问安装了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>有的小伙伴可能想搭建起来分享给其他人使用，如果后续想要分享给别人，IP + 端口太不优雅了，而且这个涉及到密码的，还是非常需要做https的！会让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282"></p><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom:50%;" /><blockquote><p> 注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 pandora 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>pandora</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom:50%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom:50%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom:50%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D; </p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>输入IP+端口或者是域名之后，</p><p><img src="https://img.laoda.de/i/2023/06/05/sci877-0.webp" alt="23a3ea1fdfe6197db3158800b4b6df84.png"></p><p>点击<code>Continue with Access Token</code>，然后输入我们前面获取的<code>Access Token</code>就可以开始愉快使用啦！</p><h3 id="8-1-更新-pandora"><a href="#8-1-更新-pandora" class="headerlink" title="8.1 更新 pandora"></a>8.1 更新 pandora</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/pandora</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/pandora /root/data/docker_data/pandora.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="8-2-卸载-pandora"><a href="#8-2-卸载-pandora" class="headerlink" title="8.2 卸载 pandora"></a>8.2 卸载 pandora</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/pandora</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/pandora  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="9-注意事项"><a href="#9-注意事项" class="headerlink" title="9. 注意事项"></a>9. 注意事项</h2><ul><li>这项目代理部分是闭源的，绑了信用卡或者对隐私要求高的需要考虑一下</li><li>开源项目可以魔改，但请保留原作者信息。确需去除，请联系作者，以免失去技术支持。</li><li>因为之后<code>ChatGPT</code>的API变动，作者可能不会跟进修复。</li></ul><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/pengzhile/pandora/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/pengzhile/pandora">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub仓库：<a href="https://github.com/pengzhile/pandora">https://github.com/pengzhile/pandora</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ChatGPT使用时可能会遇到：&quot;&gt;&lt;a href=&quot;#ChatGPT使用时可能会遇到：&quot; class=&quot;headerlink&quot; title=&quot;ChatGPT使用时可能会遇到：&quot;&gt;&lt;/a&gt;ChatGPT使用时可能会遇到：&lt;/h3&gt;&lt;h4 id=&quot;1-Please-</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="ChatGPT" scheme="https://blog.laoda.de/tags/ChatGPT/"/>
    
    <category term="OpenAI" scheme="https://blog.laoda.de/tags/OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>利用Docker搭建独角数卡的USDT支付方式，轻松收取加密货币！｜好玩儿的Docker项目</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-epusdt/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-epusdt/</id>
    <published>2023-05-29T13:48:17.430Z</published>
    <updated>2023-05-29T13:48:19.551Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>邮件smtp的配置忘记讲了，大家可以到谷歌搜索一下应该有很多教程，关键词“smtp配置”</p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>继上一篇<a href="https://blog.laoda.de/archives/docker-compose-install-dujiaoka">利用Docker轻松搭建独角发卡！人人都可以开一个线上小店｜好玩儿的Docker项目</a>之后，我们今天来为我们的小店搭建一个USDT的付款方式。（支付宝当面付也可以搭建，用门头照，不过之前有个梗——“当面付当面抓”；第三方支付也可以搭建，但是咕咕没什么经验，里面手续费有的抽成很高，故这俩都不再展开，有兴趣的自行谷歌搜索）</p><p>搭建方式首发于<a href="https://www.ioiox.com/archives/167.html">Stille大佬</a></p><p>咕咕这边附自己的实操记录，补充一些细节部分。</p><p><img src="https://img.laoda.de/i/2023/05/29/u81tv0-0.webp" alt="2fdbd82cb67713a57fc4f6f3c46d255d.png"></p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><img src="https://img.laoda.de/i/2023/05/29/u8d1x6-0.webp" alt="3272e7b023b72356ccf3451105e63bc4.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/05/29/u8esvt-0.webp" alt="190d22480fa75637480428044b863aad.png" style="zoom:33%;" /><img src="https://img.laoda.de/i/2023/05/29/u8gacv-0.webp" alt="b73c19b402e63a45f52be419463429ac.png" style="zoom:33%;" /><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>咕咕的Demo：<a href="https://shop.gugu.ee/">https://shop.gugu.ee</a></p><p>GitHub官方仓库：<a href="https://github.com/assimon/epusdt">https://github.com/assimon/epusdt</a></p><p>此次用到的GitHub仓库：<a href="https://github.com/stilleshan/dockerfiles/tree/main/epusdt">https://github.com/stilleshan/dockerfiles/tree/main/epusdt</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：咕咕自己搭建用的是<a href="https://blog.laoda.de/vps.html">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）这个涉及支付和加密货币，不建议用国内的服务器</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script#dd%E7%9B%B8%E5%85%B3">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>）</li><li>一个telegram号<blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote></li></ul><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube："><a href="#5-1-YouTube：" class="headerlink" title="5.1 YouTube："></a>5.1 YouTube：</h3><p>视频地址：<a href="https://youtu.be/QeKk5O-B2DQ">https://youtu.be/QeKk5O-B2DQ</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager">https://blog.laoda.de/archives/nginxproxymanager</a></p><h3 id="6-2-新建telegram机器人并获取token"><a href="#6-2-新建telegram机器人并获取token" class="headerlink" title="6.2 新建telegram机器人并获取token"></a>6.2 新建telegram机器人并获取token</h3><img src="https://img.laoda.de/i/2023/05/29/u8nsrh-0.webp" alt="d724b2a0ee43b9093a9cc1f6e20793f4.png" style="zoom:33%;" /><p>搜索<code>BotFather</code> 注意有很多假冒的，别弄错了</p><img src="https://img.laoda.de/i/2023/05/29/u8yirv-0.webp" alt="18cf40c8db0a5715a4629d08e7cfb909.png" style="zoom:33%;" /><p><code>/newbot</code> 一步一步按照提示创建即可</p><img src="https://img.laoda.de/i/2023/05/29/u9mces-0.webp" alt="826c0c730672266a6780c31d978b048f.png" style="zoom:33%;" /><p>创建成功之后，这边就会获得一个API的token，类似：<code>6247111111:Asdajkdaksdhkajshi6aUa6pXH4Rxc</code></p><h3 id="6-3-获取telegram-id"><a href="#6-3-获取telegram-id" class="headerlink" title="6.3 获取telegram id"></a>6.3 获取telegram id</h3><p>搜索：<code>https://t.me/getmyid_bot</code></p><img src="https://img.laoda.de/i/2023/05/29/u9o4d3-0.webp" alt="979c7ad1a8834b4607d8a85147acb4f0.png" style="zoom:33%;" /><p>得到你的user ID，类似：<code>980888097</code></p><h3 id="6-4-创建安装目录"><a href="#6-4-创建安装目录" class="headerlink" title="6.4 创建安装目录"></a>6.4 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/epusdt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/epusdt</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这边我们直接用 docker 的方式安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:focal</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=changeyourpassword</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=epusdt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=epusdt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=changeyourpassword</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">epusdt:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">stilleshan/epusdt</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./epusdt.conf:/app/.env</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8000</span><span class="string">:8000</span></span><br></pre></td></tr></table></figure><ul><li>修改<code>MYSQL_ROOT_PASSWORD</code>数据库<code>root</code>密码</li><li>修改<code>MYSQL_PASSWORD</code>数据库用户密码</li><li>用户名和数据库名不用修改</li><li>如服务器<code>8000</code>端口可能被占用,需修改epusdt映射端口,例如<code>58000:8000</code></li></ul><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim epusdt.conf</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app_name=epusdt</span><br><span class="line">#下面配置你的域名，收银台会需要</span><br><span class="line">app_uri=https://你的域名</span><br><span class="line">#是否开启debug，默认false</span><br><span class="line">app_debug=false</span><br><span class="line">#http服务监听端口</span><br><span class="line">http_listen=:8000</span><br><span class="line"></span><br><span class="line">#静态资源文件目录</span><br><span class="line">static_path=/static</span><br><span class="line">#缓存路径</span><br><span class="line">runtime_root_path=/runtime</span><br><span class="line"></span><br><span class="line">#日志配置</span><br><span class="line">log_save_path=/logs</span><br><span class="line">log_max_size=32</span><br><span class="line">log_max_age=7</span><br><span class="line">max_backups=3</span><br><span class="line"></span><br><span class="line"># mysql配置</span><br><span class="line">mysql_host=db</span><br><span class="line">mysql_port=3306</span><br><span class="line">mysql_user=epusdt</span><br><span class="line">mysql_passwd=changeyourpassword</span><br><span class="line"># 请修改 epusdt 数据库密码</span><br><span class="line">mysql_database=epusdt</span><br><span class="line">mysql_table_prefix=</span><br><span class="line">mysql_max_idle_conns=10</span><br><span class="line">mysql_max_open_conns=100</span><br><span class="line">mysql_max_life_time=6</span><br><span class="line"></span><br><span class="line"># redis配置</span><br><span class="line">redis_host=redis</span><br><span class="line">redis_port=6379</span><br><span class="line">redis_passwd=</span><br><span class="line">redis_db=5</span><br><span class="line">redis_pool_size=5</span><br><span class="line">redis_max_retries=3</span><br><span class="line">redis_idle_timeout=1000</span><br><span class="line"></span><br><span class="line"># 消息队列配置</span><br><span class="line">queue_concurrency=10</span><br><span class="line">queue_level_critical=6</span><br><span class="line">queue_level_default=3</span><br><span class="line">queue_level_low=1</span><br><span class="line"></span><br><span class="line">#机器人Apitoken</span><br><span class="line">tg_bot_token=你的tg机器人token</span><br><span class="line">#telegram代理url(大陆地区服务器可使用一台国外服务器做反代tg的url)，如果运行的本来就是境外服务器，则无需填写</span><br><span class="line">tg_proxy=</span><br><span class="line">#管理员userid</span><br><span class="line">tg_manage=你的tgid</span><br><span class="line"></span><br><span class="line">#api接口认证token</span><br><span class="line">api_auth_token=changeyourpassword</span><br><span class="line"></span><br><span class="line">#订单过期时间(单位分钟)</span><br><span class="line">order_expiration_time=10</span><br><span class="line"></span><br><span class="line">#强制汇率(设置此参数后每笔交易将按照此汇率计算，例如:6.4)</span><br><span class="line">forced_usdt_rate=</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>修改第 3 行<code>app_uri</code>为上文为<code>epusdt</code>准备的独立域名</li><li>修改第 24 行<code>mysql_passwd</code>为上节<code>MYSQL_PASSWORD</code>的<strong>用户密码</strong><code>(注意:非 root 密码)</code></li><li>修改第 55 行<code>api_auth_token=123qweASD</code>创建一个密码用于<code>dujiaoka 支付设置</code>中使用</li><li>注意:因为本项目是独立部署到 docker compose 内,所以第 21,33 行已经修改为<code>db</code>,<code>redis</code>,<code>不能使用 127.0.0.1</code>.</li><li>修改第 48 行<code>tg_bot_token=</code>为上文创建的 Telegram Bot 的<code>Token</code></li><li>修改第 52 行<code>tg_manage=</code>为上文创建的 Telegram Bot 的<code>ID</code></li></ul><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim epusdt.sql</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- auto-generated definition</span><br><span class="line">create table orders</span><br><span class="line">(</span><br><span class="line">    id                   int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    trade_id             varchar(32)    not null comment &#x27;epusdt订单号&#x27;,</span><br><span class="line">    order_id             varchar(32)    not null comment &#x27;客户交易id&#x27;,</span><br><span class="line">    block_transaction_id varchar(128)   null comment &#x27;区块唯一编号&#x27;,</span><br><span class="line">    actual_amount        decimal(19, 4) not null comment &#x27;订单实际需要支付的金额，保留4位小数&#x27;,</span><br><span class="line">    amount               decimal(19, 4) not null comment &#x27;订单金额，保留4位小数&#x27;,</span><br><span class="line">    token                varchar(50)    not null comment &#x27;所属钱包地址&#x27;,</span><br><span class="line">    status               int default 1  not null comment &#x27;1：等待支付，2：支付成功，3：已过期&#x27;,</span><br><span class="line">    notify_url           varchar(128)   not null comment &#x27;异步回调地址&#x27;,</span><br><span class="line">    redirect_url         varchar(128)   null comment &#x27;同步回调地址&#x27;,</span><br><span class="line">    callback_num         int default 0  null comment &#x27;回调次数&#x27;,</span><br><span class="line">    callback_confirm     int default 2  null comment &#x27;回调是否已确认？ 1是 2否&#x27;,</span><br><span class="line">    created_at           timestamp      null,</span><br><span class="line">    updated_at           timestamp      null,</span><br><span class="line">    deleted_at           timestamp      null,</span><br><span class="line">    constraint orders_order_id_uindex</span><br><span class="line">        unique (order_id),</span><br><span class="line">    constraint orders_trade_id_uindex</span><br><span class="line">        unique (trade_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create index orders_block_transaction_id_index</span><br><span class="line">    on orders (block_transaction_id);</span><br><span class="line"></span><br><span class="line">-- auto-generated definition</span><br><span class="line">create table wallet_address</span><br><span class="line">(</span><br><span class="line">    id         int auto_increment</span><br><span class="line">        primary key,</span><br><span class="line">    token      varchar(50)   not null comment &#x27;钱包token&#x27;,</span><br><span class="line">    status     int default 1 not null comment &#x27;1:启用 2:禁用&#x27;,</span><br><span class="line">    created_at timestamp     null,</span><br><span class="line">    updated_at timestamp     null,</span><br><span class="line">    deleted_at timestamp     null</span><br><span class="line">)</span><br><span class="line">    comment &#x27;钱包表&#x27;;</span><br><span class="line"></span><br><span class="line">create index wallet_address_token_index</span><br><span class="line">    on wallet_address (token);</span><br></pre></td></tr></table></figure><p>不用修改，直接切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom:33%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom:33%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>epusdt</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom:33%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/epusdt    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><h3 id="6-6-初始化数据库"><a href="#6-6-初始化数据库" class="headerlink" title="6.6 初始化数据库"></a>6.6 初始化数据库</h3><p>将下述命令中的<code>-pCHANGE_YOUR_PASSWORD</code>的密码改为上述设置的新密码,注意需要保留前缀<code>-p</code>,例如上文修改密码<code>MYSQL_PASSWORD=aaabbbccc</code>,此处则为<code>-paaabbbccc</code>.</p><p>如下图执行后无任何显示代表成功,否则将会报错.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -i epusdt-db-1 sh -c <span class="string">&#x27;exec mysql -uepusdt -pCHANGE_YOUR_PASSWORD epusdt&#x27;</span> &lt; epusdt.sql</span><br></pre></td></tr></table></figure><h3 id="6-7-重启服务"><a href="#6-7-重启服务" class="headerlink" title="6.7 重启服务"></a>6.7 重启服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 或 restart 重启</span></span><br><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure><h3 id="6-8-检查服务"><a href="#6-8-检查服务" class="headerlink" title="6.8 检查服务"></a>6.8 检查服务</h3><p>查看<code>epusdt</code>服务,如下图所示<code>http server started on [::]:8000</code>则表示成功.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f 你的容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure><p>通过docker ps 可以查看到容器id</p><p><img src="https://img.laoda.de/i/2023/05/29/u9t99y-0.webp" alt="13835bd2f7c08e284127581808a5d544.png"></p><p>咕咕这边就是：<code>usdt_epusdt_1</code></p><p>所以：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f usdt_epusdt_1</span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问安装了，但是我们这边先做反代。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>这个涉及到钱的，还是非常需要做https的！会让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h3 id="6-4-更新-epusdt"><a href="#6-4-更新-epusdt" class="headerlink" title="6.4 更新 epusdt"></a>6.4 更新 epusdt</h3><p>插一个更新和卸载的方法，docker搭建通用。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/epusdt</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/epusdt /root/data/docker_data/epusdt.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="6-5-卸载-epusdt"><a href="#6-5-卸载-epusdt" class="headerlink" title="6.5 卸载 epusdt"></a>6.5 卸载 epusdt</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/epusdt</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/epusdt  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282"></p><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/29/udf30a-0.webp" alt="image-20230529183650557" style="zoom:33%;" /><blockquote><p> 注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 epusdt 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:33%;" /><p>否则直接填 <code>epusdt</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:33%;" /><p>然后就可以用域名来安装访问了。</p><p>访问域名显示<code>hello epusdt, https://github.com/assimon/epusdt</code>表示成功。</p><img src="https://img.laoda.de/i/2023/05/29/udytv6-0.webp" alt="image-20230529183743600" style="zoom:33%;" /><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom:33%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom:33%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom:33%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D; </p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><h3 id="8-1-配置支付-dujiaoka"><a href="#8-1-配置支付-dujiaoka" class="headerlink" title="8.1 配置支付 - dujiaoka"></a>8.1 配置支付 - dujiaoka</h3><h4 id="登录-dujiaoka-后台-配置-支付配置"><a href="#登录-dujiaoka-后台-配置-支付配置" class="headerlink" title="登录 dujiaoka 后台 - 配置 - 支付配置"></a>登录 dujiaoka 后台 - 配置 - 支付配置</h4><p>最下面开启<code>epusdt</code>,并点击编辑.<br>注意:dujiaoka 2.0.5 版本及以上才默认支持<code>epusdt</code>,其他版本请自行升级或者手动安装插件.<br><img src="https://img.laoda.de/i/2023/05/29/ufhyvy-0.webp" alt="image-20230529183959619"></p><h4 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h4><ul><li>商户ID修改为上述创建的密码<code>changeyourpassword</code></li><li>商户密钥填写API地址<code>https://上文准备的usdt域名.com/api/v1/order/create-transaction</code> 比如咕咕这边就是：<code>https://testusdt.gugu.ovh/api/v1/order/create-transaction</code></li></ul><p><img src="https://img.laoda.de/i/2023/05/29/ug9qoz-0.webp" alt="image-20230529184130322"></p><h4 id="设置-usdt-收款地址"><a href="#设置-usdt-收款地址" class="headerlink" title="设置 usdt 收款地址"></a>设置 usdt 收款地址</h4><p>先点击机器人，</p><img src="https://img.laoda.de/i/2023/05/29/uaafap-0.webp" alt="dbe73336a273ccecfba4cb5bb7820590.png" style="zoom:33%;" /><p>再创建<code>usdt</code>收款地址则完成所有部署。</p><img src="https://img.laoda.de/i/2023/05/29/uaclb6-0.webp" alt="7f6416593f82007ce4ba65aa88be0812.png" style="zoom:33%;" /><p>可以自己测试一下。</p><h2 id="9-结尾"><a href="#9-结尾" class="headerlink" title="9. 结尾"></a>9. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/assimon/epusdt/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/assimon/epusdt">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub仓库：<a href="https://github.com/assimon/epusdt">https://github.com/assimon/epusdt</a><br>用到的Stille大佬镜像：<a href="https://github.com/stilleshan/dockerfiles/tree/main/epusdt">https://github.com/stilleshan/dockerfiles/tree/main/epusdt</a><br>Stille大佬博客：<a href="https://www.ioiox.com/archives/167.html">https://www.ioiox.com/archives/167.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;p&gt;邮件smtp的配置忘记讲了，大家可以到谷歌搜索一下应该有很多教程，关键词“smtp配置”&lt;/p&gt;
&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="USDT" scheme="https://blog.laoda.de/tags/USDT/"/>
    
    <category term="独角发卡" scheme="https://blog.laoda.de/tags/%E7%8B%AC%E8%A7%92%E5%8F%91%E5%8D%A1/"/>
    
    <category term="个人商店" scheme="https://blog.laoda.de/tags/%E4%B8%AA%E4%BA%BA%E5%95%86%E5%BA%97/"/>
    
  </entry>
  
  <entry>
    <title>利用Docker轻松搭建独角发卡！人人都可以开一个线上小店｜好玩儿的Docker项目</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-dujiaoka/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-dujiaoka/</id>
    <published>2023-05-27T10:14:45.930Z</published>
    <updated>2023-05-27T10:14:47.891Z</updated>
    
    <content type="html"><![CDATA[<p>今天来和大家分享10分钟搭建一个发卡网站（发卡自动售货系统），人人都可以开一个自己的小店！</p><p><img src="https://img.laoda.de/i/2023/05/27/ltjwxy-0.webp" alt="2fdbd82cb67713a57fc4f6f3c46d255d.png"></p><h2 id="1-独角数卡简单介绍"><a href="#1-独角数卡简单介绍" class="headerlink" title="1. 独角数卡简单介绍"></a>1. 独角数卡简单介绍</h2><h3 id="系统优势"><a href="#系统优势" class="headerlink" title="系统优势"></a>系统优势</h3><ul><li>采用业界流行的laravel框架，安全及稳定性提升。</li><li>支持自定义前端模板功能</li><li>支持国际化多语言包（需自行翻译）</li><li>代码全部开源，所有扩展包采用composer加载，代码所有内容可溯源！</li><li>长期技术更新支持！</li></ul><h3 id="支付接口已集成"><a href="#支付接口已集成" class="headerlink" title="支付接口已集成"></a>支付接口已集成</h3><ul><li>支付宝当面付</li><li>支付宝PC支付</li><li>支付宝手机支付</li><li>payjs微信扫码.</li><li>Paysapi(支付宝&#x2F;微信).</li><li>码支付(QQ&#x2F;支付宝&#x2F;微信)</li><li>微信企业扫码支付</li><li>Paypal支付(默认美元)</li><li>V免签支付</li><li>全网易支付支持(通用彩虹版)</li><li>stripe</li></ul><p>附上GitHub上的免责声明：</p><ul><li>独角数卡程序是免费开源的产品，仅用于学习交流使用！</li><li>不可用于任何违反中华人民共和国(含台湾省)或使用者所在地区法律法规的用途。</li><li>因为作者即本人仅完成代码的开发和开源活动(开源即任何人都可以下载使用)，从未参与用户的任何运营和盈利活动。</li><li>且不知晓用户后续将程序源代码用于何种用途，故用户使用过程中所带来的任何法律责任即由用户自己承担。</li></ul><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p>官方unicorn模板<br><img src="https://img.laoda.de/i/2023/05/27/ltx2qq-0.webp" alt="b2dadec68644afb18d40ff0ec8c505c2.png"></p><p>luna模板<br><img src="https://img.laoda.de/i/2023/05/27/lu5gfb-0.webp" alt="bcdad678a33552c231b29848b6a7ae74.png"></p><p>hyper模板</p><p><img src="https://img.laoda.de/i/2023/05/27/lu6q2p-0.webp" alt="33f8dd0a6ad28d1c9ab6215f6535fa65.png"></p><p><img src="https://img.laoda.de/i/2023/05/27/lu7vnx-0.webp" alt="52bcda74f3021e1d47f6a4937c03e315.png"></p><p><img src="https://img.laoda.de/i/2023/05/27/lu8v2j-0.webp" alt="947496dab4b8c28453339aa9577ad4c4.png"></p><p><img src="https://img.laoda.de/i/2023/05/27/luinl8-0.webp" alt="6ea2947a4f4321c77d6a5119d229e26e.png"></p><p><img src="https://img.laoda.de/i/2023/05/27/lujxtf-0.webp" alt="15ee4197043787f8f6c26cdf8f96084f.png"></p><h2 id="3-相关地址"><a href="#3-相关地址" class="headerlink" title="3. 相关地址"></a>3. 相关地址</h2><p>咕咕的Demo：<a href="https://shop.gugu.ee/">https://shop.gugu.ee</a><br>GitHub官方仓库：<a href="https://github.com/assimon/dujiaoka">https://github.com/assimon/dujiaoka</a><br>Docker镜像地址：<a href="https://hub.docker.com/r/stilleshan/dujiaoka">https://hub.docker.com/r/stilleshan/dujiaoka</a> （同时支持 X86 和 ARM 架构）来自：<a href="https://www.ioiox.com/archives/159.html">Stille大佬</a></p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是硅谷的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun">点击查看</a>）或者<a href="https://blog.laoda.de/vps.html">Racknerd</a>的高性价比服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script#dd%E7%9B%B8%E5%85%B3">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube："><a href="#5-1-YouTube：" class="headerlink" title="5.1 YouTube："></a>5.1 YouTube：</h3><p>视频地址：<a href="https://youtu.be/V_lCnvu8aDY">https://youtu.be/V_lCnvu8aDY</a></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png"></p><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不要用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png"></p><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager">https://blog.laoda.de/archives/nginxproxymanager</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/shop</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/shop</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> storage uploads</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 777 storage uploads</span><br><span class="line"><span class="comment"># 创建数据目录用于挂载</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> env.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> -R 777 env.conf</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这边我们直接用 docker 的方式安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">stilleshan/dujiaoka</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">        <span class="comment"># - INSTALL=false</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">INSTALL=true</span></span><br><span class="line">        <span class="comment"># - MODIFY=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./env.conf:/dujiaoka/.env</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./uploads:/dujiaoka/public/uploads</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./storage:/dujiaoka/storage</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:80</span>         <span class="comment"># 8090可以改成任意服务器没有使用过的端口，80不要修改</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:focal</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=changeyourpassword</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=dujiaoka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=dujiaoka</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=changeyourpassword</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis:/data</span></span><br></pre></td></tr></table></figure><p><code>changeyourpassword</code>可以修改成自己的密码。</p><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim env.conf</span><br></pre></td></tr></table></figure><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APP_NAME=咕咕的小卖部</span><br><span class="line">APP_ENV=local</span><br><span class="line">APP_KEY=base64:rKwRuI6eRpCw/9e2XZKKGj/Yx3iZy5e7+FQ6+aQl8Zg=</span><br><span class="line">APP_DEBUG=true</span><br><span class="line">APP_URL=https://你的域名</span><br><span class="line"></span><br><span class="line">LOG_CHANNEL=stack</span><br><span class="line"></span><br><span class="line"># 数据库配置</span><br><span class="line">DB_CONNECTION=mysql</span><br><span class="line">DB_HOST=db</span><br><span class="line">DB_PORT=3306</span><br><span class="line">DB_DATABASE=dujiaoka</span><br><span class="line">DB_USERNAME=dujiaoka</span><br><span class="line">DB_PASSWORD=changeyourpassword</span><br><span class="line"></span><br><span class="line"># redis配置</span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">REDIS_PASSWORD=</span><br><span class="line">REDIS_PORT=6379</span><br><span class="line"></span><br><span class="line">BROADCAST_DRIVER=log</span><br><span class="line">SESSION_DRIVER=file</span><br><span class="line">SESSION_LIFETIME=120</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 缓存配置</span><br><span class="line"># file为磁盘文件  redis为内存级别</span><br><span class="line"># redis为内存需要安装好redis服务端并配置</span><br><span class="line">CACHE_DRIVER=redis</span><br><span class="line"></span><br><span class="line"># 异步消息队列</span><br><span class="line"># sync为同步  redis为异步</span><br><span class="line"># 使用redis异步需要安装好redis服务端并配置</span><br><span class="line">QUEUE_CONNECTION=redis</span><br><span class="line"></span><br><span class="line"># 后台语言</span><br><span class="line">## zh_CN 简体中文</span><br><span class="line">## zh_TW 繁体中文</span><br><span class="line">## en    英文</span><br><span class="line">DUJIAO_ADMIN_LANGUAGE=zh_CN</span><br><span class="line"></span><br><span class="line"># 后台登录地址</span><br><span class="line">ADMIN_ROUTE_PREFIX=/admin</span><br><span class="line"></span><br><span class="line"># 是否开启https (前端开启了后端也必须为true)</span><br><span class="line"># 后台登录出现0err或者其他登录异常问题，大概率是开启了https而后台没有开启，把下面的false改为true即可</span><br><span class="line">ADMIN_HTTPS=true</span><br></pre></td></tr></table></figure><p>这边可以不用动，因为后续我们安装的时候填的信息会覆盖这里面的内容，修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom:33%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom:33%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>shop</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom:33%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/shop    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问安装了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>有的小伙伴可能想搭建起来分享给其他人使用，如果后续想要分享给别人，IP + 端口太不优雅了，而且这个涉及到密码的，还是非常需要做https的！会让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h3 id="6-4-更新-shop"><a href="#6-4-更新-shop" class="headerlink" title="6.4 更新 shop"></a>6.4 更新 shop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/shop</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/shop /root/data/docker_data/shop.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="6-5-卸载-shop"><a href="#6-5-卸载-shop" class="headerlink" title="6.5 卸载 shop"></a>6.5 卸载 shop</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/shop</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/shop  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282"></p><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/27/lvep5w-0.webp" alt="image-20230527132253249" style="zoom:50%;" /><blockquote><p> 注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 shop 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp" style="zoom:50%;" /><p>否则直接填 <code>shop</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324" style="zoom:50%;" /><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725" style="zoom:50%;" /><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867" style="zoom:50%;" /><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128" style="zoom:50%;" /><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D; </p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>成功登录之后，我们填写信息，</p><p>注意数据库地址填<code>db</code>，Redis填<code>redis</code></p><p>填写完成后，点击保存。</p><p>提示默认的账户名和密码都是<code>admin</code></p><p>此时，我们先停止容器。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/data/docker_data/shop</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><p>接着我们修改一下<code>docker-compose.yml</code>以及<code>env.conf</code>里面的内容。</p><p>分别把<code>- INSTALL=true</code> 改成<code>- INSTALL=false</code></p><p>把<code>APP_DEBUG=true</code>改成<code>APP_DEBUG=false</code></p><p>之后运行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>然后在域名后面加上<code>/admin</code>，输入默认的账户密码<code>admin</code>就可以正常登录后台了！</p><p>记得改一下用户名和密码！</p><p><img src="https://img.laoda.de/i/2023/05/27/lw0kft-0.webp" alt="52bcda74f3021e1d47f6a4937c03e315.png"></p><h2 id="9-常见问题"><a href="#9-常见问题" class="headerlink" title="9. 常见问题"></a>9. 常见问题</h2><p>常见问题集锦：<a href="https://github.com/assimon/dujiaoka/wiki/problems">https://github.com/assimon/dujiaoka/wiki/problems</a></p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/assimon/dujiaoka/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/assimon/dujiaoka">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>GitHub仓库：<a href="https://github.com/assimon/dujiaoka">https://github.com/assimon/dujiaoka</a><br>用到的Stille大佬镜像：<a href="https://hub.docker.com/r/stilleshan/dujiaoka">https://hub.docker.com/r/stilleshan/dujiaoka</a><br>Stille大佬博客：<a href="https://www.ioiox.com/archives/159.html">https://www.ioiox.com/archives/159.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天来和大家分享10分钟搭建一个发卡网站（发卡自动售货系统），人人都可以开一个自己的小店！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img.laoda.de/i/2023/05/27/ltjwxy-0.webp&quot; alt=&quot;2fdbd82cb67713a57fc4</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="独角发卡" scheme="https://blog.laoda.de/tags/%E7%8B%AC%E8%A7%92%E5%8F%91%E5%8D%A1/"/>
    
    <category term="个人商店" scheme="https://blog.laoda.de/tags/%E4%B8%AA%E4%BA%BA%E5%95%86%E5%BA%97/"/>
    
    <category term="发卡网站" scheme="https://blog.laoda.de/tags/%E5%8F%91%E5%8D%A1%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>不用虚拟信用卡如何在iOS上开通ChatGPT Plus（附3分钟免费完成美区ID申请）</title>
    <link href="https://blog.laoda.de/archives/ios-with-chatgpt/"/>
    <id>https://blog.laoda.de/archives/ios-with-chatgpt/</id>
    <published>2023-05-19T10:09:02.304Z</published>
    <updated>2023-05-25T00:53:55.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2023-05-02"><a href="#2023-05-02" class="headerlink" title="2023-05-02"></a>2023-05-02</h3><p>有小伙伴反馈支付宝的礼品卡也不是非常稳，联系客服可能会有问题，建议大家还是用官网的礼品卡。</p><hr><p>补充说明，部分小伙伴新注册美区Apple ID会遇到礼品卡充值后在ChatGPT里面付款失败的情况。原因是这个Apple ID是新的，触发了风控。</p><p>这里有小伙伴提出了解决方法，大家可以试试。</p><p>问题：</p><blockquote><p>礼品卡充好了，为什么在chatgpt里付款的时候失败了呀</p></blockquote><p>解决方法：</p><blockquote><p>联系了美国apple客服，聊天解决的，需要客服后台帮你给权限，因为是新用户，只能付费购买APP，而付费订阅不行。</p><p>可以直接在线联系的，不需要什么理由，你就说发现注册完账号之后进行了充值，发现余额只能用来买APP，无法进行订阅付费。全程说英语，有礼貌一些，别着急，会给你处理好的。</p><p>昨天打了400电话问了下，客服说是我的美区id被风控了（可能是注册以来都用礼品卡或者没绑定银行卡的原因，没细问），询问了客服说明情况就给解除了风控（但是因为国内国外客服处理问题等了一天），刚才试了下已经可以开通并续费了。 (来自YouTube和评论区的反馈)</p></blockquote><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="YouTube："><a href="#YouTube：" class="headerlink" title="YouTube："></a>YouTube：</h3><p>视频地址：<a href="https://youtu.be/tg75b0gZ5_U">https://youtu.be/tg75b0gZ5_U</a></p><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>今天凌晨，OpenAI 正式在 App Store 推出了 ChatGPT 的 iOS app。</p><img src="https://img.laoda.de/i/2023/05/19/qsikzh-0.webp" alt="IMG_1E0E492F8321-1.jpeg" style="zoom:33%;" /><p>🔗  下载直达：<a href="https://apps.apple.com/app/openai-chatgpt/id6448311069">https://apps.apple.com/app/openai-chatgpt/id6448311069</a></p><p>注意，系统需要更新到iOS 16以上。</p><p>不过目前有且仅有美区Apple ID登录的App store才可以下载。（后面出个教程，5分钟搞定美区ID的免费申请）</p><blockquote><p>PS：<br>1、OpenAI 表示在未来几周内将会在更多国家和地区上线。<br>2、OpenAI 表示， ChatGPT 的 Android 应用很快就会到来。</p></blockquote><p>咕咕体验了一下，程序免费下载，界面简洁无任何广告，且支持跨设备同步历史记录。它还集成了 OpenAI 的开源语音识别系统 Whisper，支持语音输入。</p><p>ChatGPT app 很好地调动了 iPhone 中的 Haptic Engine，可以提供优秀的震动反馈。（在设置里会有 Haptic Feedback 震动反馈的开关）</p><p>🤖OpenAI 官方总结了 ChatGPT iOS 应用的几个功能亮点:</p><ul><li>即时回答: 不需要筛选广告或多个结果就能获得准确的信息。</li><li>量身定制的建议: 寻求烹饪、旅行计划或精心制作的信息方面的指导。</li><li>创作灵感: 产生礼物的想法，提纲演示，或者写一首完美的诗。</li><li>专业工具: 通过想法反馈、笔记总结和技术主题协助提高生产力。</li><li>学习机会: 探索新的语言，现代历史，更多领域可以你根据自己的需求挖掘。</li></ul><p>同时，ChatGPT Plus 用户可以在 iOS 上直接使用 GPT-4 。</p><p>之前苦恼如何开通 Plus 服务的朋友们，现在 iOS App 可以解决这个烦恼了。在 app 里登陆了账号之后，打开个人中心，可以直接选择升级到 ChatGPT Plus，然后通过 App Store 完成订阅支付，价格是依然是 US$19.99&#x2F;月。</p><p>咕咕将介绍两种付费购买的方式，无需海外信用卡！</p><h2 id="2-申请美区-Apple-ID"><a href="#2-申请美区-Apple-ID" class="headerlink" title="2. 申请美区 Apple ID"></a>2. 申请美区 Apple ID</h2><p>全程可以使用手机完成，而且无需开启魔法工具。</p><p>需要用到一个<a href="https://www.meiguodizhi.com/usa-address/oregon">美国地址</a>。</p><p>比如我们用这个：</p><p><img src="https://img.laoda.de/i/2023/05/19/qskxnn-0.webp" alt="c180c84bc77f713f01909c1a8bbb6aeb.png"></p><p>第一步，打开苹果官网，点击”账户”</p><p><img src="https://img.laoda.de/i/2023/05/19/qslxws-0.webp" alt="b9a50a2bc9a211320ca2ef70cccb88a9.png"></p><p>第二步，点击“立即创建您的Apple ID”</p><p>并按提示输入你的信息，唯一注意点是国家选择“美国”</p><p>电话号码用+86的，邮箱用qq邮箱都可以。</p><p><img src="https://img.laoda.de/i/2023/05/19/qsna32-0.webp" alt="6e7c26bbfc38efb4930c45a648d1405e.png"></p><p>注册过程中需要输入邮箱和手机接受到的验证码，完成注册后就可以退出或者直接关闭浏览器了。</p><p>然后我们打开手机上的“app store”</p><p>如果你这边已经登录了账号，可以先退出，然后在这边登录我们刚刚申请的Apple ID以及密码。</p><img src="https://img.laoda.de/i/2023/05/19/qsoz8v-0.webp" alt="4fff4789333463c99d2b7f6b67a98c7f.png" style="zoom:33%;" /><p>不出意外，成功登录上了，然后页面会刷新一下，你会看到此时app里面显示的都是英文了。</p><img src="https://img.laoda.de/i/2023/05/19/qsr3yp-0.webp" alt="b63ab947c46572ab52d168be55c5a8ce.png" style="zoom: 33%;" /><p>然后，随意下载一个app，会弹出来一个验证。</p><p>点击下一步，会让你添加支付方式和账单地址信息。</p><p>支付方式我们不用管。</p><p>直接填地址，用上面地址生成器产生的地址即可。（选填项可以不填）</p><p>填完之后确认，至此，你已经完成了美区Apple ID的申请，可以愉快下载东西了！</p><blockquote><p>一个经验分享：<br>我们有了一个美区和一个国区ID了，建议平时还是用国区的，美区的下载完之后就退掉，切回国区。不然你可能会不经意就用美区的id下载了好多应用，然后在换手机的时候你就会非常蛋疼。</p></blockquote><h2 id="3-充值开通ChatGPT-Plus"><a href="#3-充值开通ChatGPT-Plus" class="headerlink" title="3. 充值开通ChatGPT Plus"></a>3. 充值开通ChatGPT Plus</h2><h3 id="3-1-绑定美区PayPal充值"><a href="#3-1-绑定美区PayPal充值" class="headerlink" title="3.1 绑定美区PayPal充值"></a>3.1 绑定美区PayPal充值</h3><p>这边需要申请一个美区的 PayPal，然后绑定到你的Apple ID上。</p><p>美区的 PayPal是可以绑定国内发行的VISA卡的，不过风控比较厉害，咕咕因为是老号了，使用起来目前还算稳定。</p><p>绑定好之后的好处就是自动扣费，不用每个月去手动续费了。</p><p>如果大家有需求，后续可以考虑出个注册美区PayPal的教程。</p><p>没有美区PayPal的同学，这边建议大家用下面的礼品卡的方式来充值。</p><h3 id="3-2-通过礼品卡充值"><a href="#3-2-通过礼品卡充值" class="headerlink" title="3.2 通过礼品卡充值"></a>3.2 通过礼品卡充值</h3><p>重要提醒：礼品卡淘宝上也有卖，但是容易买到黑卡（简单来说就是通过盗刷信用卡或者不干净的钱撸的卡）如果你用这些卡充值了Apple ID，有极大的概率会导致Apple ID被封！尤其是如果这是你的主力Apple ID的话，风险极大，所以不建议大家在淘宝购买礼品卡。</p><h4 id="Apple官方礼品卡"><a href="#Apple官方礼品卡" class="headerlink" title="Apple官方礼品卡"></a>Apple官方礼品卡</h4><p>官方礼品卡地址：<a href="https://www.apple.com/shop/buy-giftcard/giftcard">https://www.apple.com/shop/buy-giftcard/giftcard</a></p><p><img src="https://img.laoda.de/i/2023/05/19/qssh83-0.webp" alt="3023d402375e1dbe8fd1c54e55967f80.png"></p><h4 id="支付宝礼品卡"><a href="#支付宝礼品卡" class="headerlink" title="支付宝礼品卡"></a>支付宝礼品卡</h4><ul><li>打开支付宝切换到美国的地址“旧金山”</li><li>点击最下面的中间一栏【出境】选项，选择【折扣礼卡】</li><li>拉到最下面一栏选择【更多大牌折扣礼卡】，点进去在搜索栏搜索“app store”，注册邮箱账号密码然后就可以选择美元金额充值</li><li>充值成功就可以点进去查看礼品卡号码，有的甚至秒到账。</li></ul><p><img src="https://img.laoda.de/i/2023/05/19/qstw8c-0.webp" alt="05e05f21a2a4994e1687d2aafa397d46.png"></p><p>Plus用户还可以开家庭共享！</p><img src="https://img.laoda.de/i/2023/05/19/twnep2-0.webp" alt="IMG_7602 2" style="zoom:33%;" /><p>祝大家使用愉快！</p><p>有问题可以在留言区交流！</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.laoda.de/archives/chatgpt-plus-depay">【保姆级教程】从零开通ChatGPT Plus</a></p><p><a href="https://blog.laoda.de/archives/chatgpt-plugins-prompts">玩转ChatGPT必备的插件&amp;客户端&amp;Prompts</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot; class=&quot;headerlink&quot; title=&quot;更新&quot;&gt;&lt;/a&gt;更新&lt;/h2&gt;&lt;h3 id=&quot;2023-05-02&quot;&gt;&lt;a href=&quot;#2023-05-02&quot; class=&quot;headerlink&quot; title=&quot;2023-</summary>
      
    
    
    
    <category term="有用的小知识" scheme="https://blog.laoda.de/categories/%E6%9C%89%E7%94%A8%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="ChatGPT" scheme="https://blog.laoda.de/tags/ChatGPT/"/>
    
    <category term="ChatGPT Plus" scheme="https://blog.laoda.de/tags/ChatGPT-Plus/"/>
    
    <category term="OpenAI" scheme="https://blog.laoda.de/tags/OpenAI/"/>
    
  </entry>
  
  <entry>
    <title>RackNerd 洛杉矶DC-02优化线路VPS促销，$14.99/年，可申请IPv6</title>
    <link href="https://blog.laoda.de/archives/racknerd-memorial-day-sale-dc02/"/>
    <id>https://blog.laoda.de/archives/racknerd-memorial-day-sale-dc02/</id>
    <published>2023-05-13T06:43:58.594Z</published>
    <updated>2023-05-13T06:43:58.594Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.laoda.de/tags/racknerd/">RackNerd</a>的洛杉矶优化线路VPS开始促销，具体机房为该商家的洛杉矶DC-02优化线路机房，最低配为$14.99&#x2F;年，配置为1核心&#x2F;1GB内存&#x2F;20GB SSD空间&#x2F;3TB流量&#x2F;1Gbps端口&#x2F;KVM虚拟。性价比不错，付款商家支持支付宝，PayPal等。</p><p><img src="https://img.laoda.de/i/2023/05/13/nr0h3n-0.webp" alt="image-20230513143559388"></p><h2 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h2><p><strong>官方网站：<a href="https://my.racknerd.com/aff.php?aff=1158">https://www.racknerd.com</a></strong></p><p><strong>Racknerd相关介绍：</strong> <a href="https://blog.laoda.de/archives/vps-racknerd">【VPS选购分享】Racknerd——曾经的“四大金刚”，如今的性价比之王</a></p><p>以下是racknerd目前的促销便宜VPS，可以围观。</p><p><a href="https://blog.laoda.de/vps.html">RackNerd 在售机型推荐</a></p><h2 id="2、洛杉矶优化线路-DC-02"><a href="#2、洛杉矶优化线路-DC-02" class="headerlink" title="2、洛杉矶优化线路-DC-02"></a>2、洛杉矶优化线路-DC-02</h2><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><p>Los Angeles DC02 (Test IP: 204.13.154.3)</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>1G</td><td>20G</td><td>3T&#x2F;月</td><td>$14.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=770">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>30G</td><td>4T&#x2F;月</td><td>$23.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=771">链接</a></strong></td></tr><tr><td>2核</td><td>3G</td><td>38G</td><td>5T&#x2F;月</td><td>$33.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=772">链接</a></strong></td></tr><tr><td>3核</td><td>4G</td><td>50G</td><td>6T&#x2F;月</td><td>$49.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=773">链接</a></strong></td></tr></tbody></table><h2 id="3、以下为racknerd的往期促销"><a href="#3、以下为racknerd的往期促销" class="headerlink" title="3、以下为racknerd的往期促销"></a>3、以下为racknerd的往期促销</h2><h3 id="复活节促销VPS"><a href="#复活节促销VPS" class="headerlink" title="复活节促销VPS"></a>复活节促销VPS</h3><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。可选节点为西雅图&#x2F;圣何塞&#x2F;达拉斯&#x2F;芝加哥&#x2F;新泽西&#x2F;亚特兰大&#x2F;纽约。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>840M</td><td>10G</td><td>1T&#x2F;月</td><td>$10.78&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=766">链接</a></strong></td></tr><tr><td>1核</td><td>1.2G</td><td>30G</td><td>3T&#x2F;月</td><td>$14.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=767">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>45G</td><td>5T&#x2F;月</td><td>$21.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=768">链接</a></strong></td></tr><tr><td>3核</td><td>5G</td><td>100G</td><td>10T&#x2F;月</td><td>$58.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=769">链接</a></strong></td></tr></tbody></table><h3 id="2023年元旦-中国春节促销"><a href="#2023年元旦-中国春节促销" class="headerlink" title="2023年元旦+中国春节促销"></a>2023年元旦+中国春节促销</h3><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><p>可选节点为洛杉矶DC-02, 芝加哥, 达拉斯, 新泽西, 亚特兰大, 圣何塞, 西雅图, 纽约。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>512M</td><td>10G</td><td>1.5T&#x2F;月</td><td>$10.18&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=734">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>25G</td><td>4T&#x2F;月</td><td>$12.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=735">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>45G</td><td>6T&#x2F;月</td><td>$24.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=736">链接</a></strong></td></tr><tr><td>4核</td><td>4G</td><td>70G</td><td>10T&#x2F;月</td><td>$46.68&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=737">链接</a></strong></td></tr></tbody></table><h3 id="其他年付10美元左右VPS"><a href="#其他年付10美元左右VPS" class="headerlink" title="其他年付10美元左右VPS"></a>其他年付10美元左右VPS</h3><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>768M</td><td>10G</td><td>1T&#x2F;月</td><td>$10.28&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=695">链接</a></strong></td></tr><tr><td>1核</td><td>768M</td><td>10G</td><td>2T&#x2F;月</td><td>$11.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=679">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>16G</td><td>3T&#x2F;月</td><td>$14.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=680">链接</a></strong></td></tr><tr><td>1核</td><td>1.2G</td><td>18G</td><td>2T&#x2F;月</td><td>$14.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=670">链接</a></strong></td></tr><tr><td>1核</td><td>1.5G</td><td>30G</td><td>3T&#x2F;月</td><td>$16.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=696">链接</a></strong></td></tr></tbody></table><h3 id="年付60刀-5个ipv4"><a href="#年付60刀-5个ipv4" class="headerlink" title="年付60刀 - 5个ipv4"></a>年付60刀 - 5个ipv4</h3><p>默认配置5个ipv4。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>1.5G</td><td>20G</td><td>3T&#x2F;月</td><td>$60&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=563">链接</a></strong></td></tr></tbody></table><h3 id="内存1-5G-2-5G套餐"><a href="#内存1-5G-2-5G套餐" class="headerlink" title="内存1.5G-2.5G套餐"></a>内存1.5G-2.5G套餐</h3><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>1.5G</td><td>30G</td><td>3T&#x2F;月</td><td>$25.95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=319">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>25G</td><td>4T&#x2F;月</td><td>$20.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=681">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>35G</td><td>4T&#x2F;月</td><td>$38.78&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=280">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>3T&#x2F;月</td><td>$25.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=671">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>60G</td><td>7T&#x2F;月</td><td>$28.55&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=697">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>5T&#x2F;月</td><td>$29.50&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=211">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>50G</td><td>5T&#x2F;月</td><td>$39.95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=320">链接</a></strong></td></tr></tbody></table><h3 id="内存3G-8G套餐"><a href="#内存3G-8G套餐" class="headerlink" title="内存3G-8G套餐"></a>内存3G-8G套餐</h3><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2核</td><td>3G</td><td>35G</td><td>5T&#x2F;月</td><td>$29.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=473">链接</a></strong></td></tr><tr><td>3核</td><td>3.5G</td><td>36G</td><td>5T&#x2F;月</td><td>$30.19&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=125">链接</a></strong></td></tr><tr><td>2核</td><td>3.5G</td><td>60G</td><td>6T&#x2F;月</td><td>$35.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=672">链接</a></strong></td></tr><tr><td>2核</td><td>3.5G</td><td>80G</td><td>10T&#x2F;月</td><td>$38.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=698">链接</a></strong></td></tr><tr><td>3核</td><td>4G</td><td>50G</td><td>10T&#x2F;月</td><td>$45.89&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=474">链接</a></strong></td></tr><tr><td>3核</td><td>4.5G</td><td>100G</td><td>12T&#x2F;月</td><td>$48.77&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=699">链接</a></strong></td></tr><tr><td>4核</td><td>8G</td><td>100G</td><td>5T&#x2F;月</td><td>$89.00&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=312">链接</a></strong></td></tr></tbody></table><h3 id="AMD-NVMe系列便宜VPS套餐"><a href="#AMD-NVMe系列便宜VPS套餐" class="headerlink" title="AMD+NVMe系列便宜VPS套餐"></a>AMD+NVMe系列便宜VPS套餐</h3><p>可选纽约，圣何塞，达拉斯，亚特兰大。特征，kvm虚拟，AMD Ryzen 9 3900X、DDR4、NVMe SSD、1Gbps口带宽，默认一个IPv4，不支持Windows。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>NVMe</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>512M</td><td>6G</td><td>400G&#x2F;月</td><td>$15&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=302">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>20G</td><td>2T&#x2F;月</td><td>$32&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=303">链接</a></strong></td></tr><tr><td>1核</td><td>1.5G</td><td>22G</td><td>3T&#x2F;月</td><td>$35&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=308">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>6T&#x2F;月</td><td>$69&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=309">链接</a></strong></td></tr></tbody></table><h3 id="AMD-NVME系列windows-vps套餐"><a href="#AMD-NVME系列windows-vps套餐" class="headerlink" title="AMD+NVME系列windows vps套餐"></a>AMD+NVME系列windows vps套餐</h3><p>可选机房洛杉矶，达拉斯，纽约，亚特兰大。</p><p>VPS特征：KVM虚拟，AMD Ryzen 9 3900x+ddr4+NVMe SSD阵列+1Gbps带宽，默认一个IPv4，solusvm管理，windows中英文授权版系统（版本为2012和2016系统）。</p><table><thead><tr><th><strong>内存</strong></th><th><strong>CPU</strong></th><th><strong>NVMe</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2G</td><td>1核</td><td>35G</td><td>2T&#x2F;月</td><td>$60&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=700">链接</a></strong></td></tr><tr><td>2.5G</td><td>1核</td><td>40G</td><td>3.5T&#x2F;月</td><td>$69&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=435">链接</a></strong></td></tr><tr><td>3G</td><td>2核</td><td>35G</td><td>3T&#x2F;月</td><td>$78.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=346">链接</a></strong></td></tr><tr><td>3.5G</td><td>2核</td><td>60G</td><td>3.5T&#x2F;月</td><td>$99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=701">链接</a></strong></td></tr><tr><td>4G</td><td>3核</td><td>60G</td><td>6T&#x2F;月</td><td>$115&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=436">链接</a></strong></td></tr><tr><td>8G</td><td>3核</td><td>150G</td><td>10T&#x2F;月</td><td>$219&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=702">链接</a></strong></td></tr><tr><td>12G</td><td>4核</td><td>160G</td><td>12T&#x2F;月</td><td>$289&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=437">链接</a></strong></td></tr></tbody></table><h3 id="稍大硬盘VPS套餐"><a href="#稍大硬盘VPS套餐" class="headerlink" title="稍大硬盘VPS套餐"></a>稍大硬盘VPS套餐</h3><p>可选机房：圣何塞&#x2F;达拉斯&#x2F;芝加哥&#x2F;新泽西&#x2F;亚特兰大&#x2F;纽约&#x2F;荷兰</p><p><strong>特征</strong>：1Gbps带宽，自带一个IPv4，solusvm管理，硬盘SSD cached，洛杉矶MC机房！</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>硬盘</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2核</td><td>2G</td><td>50G</td><td>4T&#x2F;月</td><td>$36&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=61">链接</a></strong></td></tr><tr><td>3核</td><td>4G</td><td>80G</td><td>5T&#x2F;月</td><td>$59&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=62">链接</a></strong></td></tr><tr><td>4核</td><td>6G</td><td>140G</td><td>6T&#x2F;月</td><td>$95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=63">链接</a></strong></td></tr><tr><td>4核</td><td>8G</td><td>100G</td><td>5T&#x2F;月</td><td>$89&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=1158&pid=312"><strong>链接</strong></a></td></tr><tr><td>4核</td><td>8G</td><td>200G</td><td>8T&#x2F;月</td><td>$135&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=64">链接</a></strong></td></tr></tbody></table><h2 id="4、网络测试"><a href="#4、网络测试" class="headerlink" title="4、网络测试"></a>4、网络测试</h2><p><strong>洛杉矶DC02：</strong> 204.13.154.3，<a href="http://lg-lax02.racknerd.com/1000MB.test">http://lg-lax02.racknerd.com/1000MB.test</a></p><p><strong>洛杉矶DC05：</strong> 5.181.135.8，<a href="http://lg-lax05.racknerd.com/1000MB.test">http://lg-lax05.racknerd.com/1000MB.test</a></p><p><strong>圣何塞：</strong> 192.210.207.88，<a href="http://lg-sj.racknerd.com/1000MB.test">http://lg-sj.racknerd.com/1000MB.test</a></p><p><strong>西雅图：</strong> 192.3.253.2，<a href="http://lg-sea.racknerd.com/1000MB.test">http://lg-sea.racknerd.com/1000MB.test</a></p><p><strong>新泽西：</strong> 192.3.165.30，<a href="http://lg-nj.racknerd.com/1000MB.test">http://lg-nj.racknerd.com/1000MB.test</a></p><p><strong>达拉斯</strong>：198.23.249.100，<a href="http://lg-dal.racknerd.com/1000MB.test">http://lg-dal.racknerd.com/1000MB.test</a></p><p><strong>芝加哥：</strong> 198.23.228.15，<a href="http://lg-chi.racknerd.com/1000MB.test">http://lg-chi.racknerd.com/1000MB.test</a></p><p><strong>阿什本</strong>：107.173.166.10，<a href="http://lg-ash.racknerd.com/1000MB.test">http://lg-ash.racknerd.com/1000MB.test</a></p><p><strong>亚特兰大：</strong> 107.173.164.160，<a href="http://lg-atl.racknerd.com/1000MB.test">http://lg-atl.racknerd.com/1000MB.test</a></p><p><strong>荷兰.阿姆斯特丹：</strong> 23.94.101.88，<a href="http://lg-ams.racknerd.com/1000MB.test">http://lg-ams.racknerd.com/1000MB.test</a></p><p><strong>水牛城：</strong> 192.3.81.8，<a href="http://lg-ny.racknerd.com/1000MB.test">http://lg-ny.racknerd.com/1000MB.test</a></p><h2 id="5、推荐阅读"><a href="#5、推荐阅读" class="headerlink" title="5、推荐阅读"></a>5、推荐阅读</h2><p><a href="https://blog.laoda.de/vps.html">RackNerd 在售机型推荐</a></p><p><a href="https://blog.laoda.de/archives/vps-racknerd">【VPS选购分享】Racknerd——曾经的“四大金刚”，如今的性价比之王</a></p><p><a href="https://blog.laoda.de/archives/cheap-vps-racknerd">【国外便宜高性价比的VPS 推荐】——RackNerd</a></p><p><a href="https://blog.laoda.de/archives/racknerd-easter-2023">2023 - RackNerd 活动汇总 整理帖！附最新复活节活动套餐</a></p><p><a href="https://blog.laoda.de/archives/racknerd-vps-issues">RackNerd（RN）双十一优惠&amp;&amp; RN VPS在售促销特价+流量翻倍+迁移+邮箱+push方法整理</a></p><p><a href="https://blog.laoda.de/archives/racknerd-bf-2022-01?cid=5016">#2022黑五# RackNerd：美国便宜VPS低至$10&#x2F;年～</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.laoda.de/tags/racknerd/&quot;&gt;RackNerd&lt;/a&gt;的洛杉矶优化线路VPS开始促销，具体机房为该商家的洛杉矶DC-02优化线路机房，最低配为$14.99&amp;#x2F;年，配置为1核心&amp;#x2F;1GB内存&amp;#x</summary>
      
    
    
    
    <category term="VPS推荐" scheme="https://blog.laoda.de/categories/VPS%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="Racknerd" scheme="https://blog.laoda.de/tags/Racknerd/"/>
    
    <category term="美国VPS" scheme="https://blog.laoda.de/tags/%E7%BE%8E%E5%9B%BDVPS/"/>
    
  </entry>
  
  <entry>
    <title>【VPS选购经验分享】可解锁ChatGPT！莱卡云新上线美国三网回程CN2 GIA线路测评</title>
    <link href="https://blog.laoda.de/archives/lca-us-cn2-gia/"/>
    <id>https://blog.laoda.de/archives/lca-us-cn2-gia/</id>
    <published>2023-05-08T15:08:15.473Z</published>
    <updated>2023-05-08T15:11:55.599Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://gao.ee/lca">莱卡云</a>是一家国内正规备案的云服务器商家，隶属于广东莱卡信息技术有限公司，主要从事VPS、虚拟主机等云计算产品业务，目前有香港CN2 GIA，美国CN2 GIA，日本CN2 等线路售卖，之前我们介绍过香港CN2 GIA（相对大陆来说最好的非大陆线路）——<a href="https://blog.laoda.de/archives/vps-lcayun">【VPS选购分享】莱卡云 —— 三网香港CN2 GIA，香港服务器又多了一个选择，可以月付尝鲜～</a>，上一期好玩儿的Docker项目也提到了新上线的美国三网CN2 GIA的线路，这边就来简单测评一下。</p><h2 id="1、机器情况"><a href="#1、机器情况" class="headerlink" title="1、机器情况"></a>1、机器情况</h2><p>咕咕测试的机器基本情况：</p><ul><li>CPU核心：2核</li><li>内存：1G</li><li>硬盘：30G</li><li>带宽：10Mbps</li><li>IP地址：1IPv4</li><li>线路：三网 CN2 GIA</li><li>系统：Debian 11</li></ul><p>购买地址：<a href="https://gao.ee/lca">莱卡云美国三网CN2 GIA服务器</a></p><p><img src="https://img.laoda.de/i/2023/05/08/1142pmz-0.webp" alt="image-20230508224407283"></p><p><img src="https://img.laoda.de/i/2023/05/08/1284ppd-0.webp" alt="image-20230508231135178"></p><p>服务器下行有50M，上传是10M，不适合用来魔法，自带一个快照，非常适合建站或者用来反代尤其是美国的服务器。</p><h2 id="2、IP信息测试"><a href="#2、IP信息测试" class="headerlink" title="2、IP信息测试"></a>2、IP信息测试</h2><p><img src="https://img.laoda.de/i/2023/05/07/j2kwxa-0.webp" alt="image-20230507115317961"></p><h2 id="3、ChatGPT解锁测试"><a href="#3、ChatGPT解锁测试" class="headerlink" title="3、ChatGPT解锁测试"></a>3、ChatGPT解锁测试</h2><p><img src="https://img.laoda.de/i/2023/05/07/ismtrm-0.webp" alt="image-20230507113646273"></p><h2 id="4、三网线路测试"><a href="#4、三网线路测试" class="headerlink" title="4、三网线路测试"></a>4、三网线路测试</h2><h3 id="电信"><a href="#电信" class="headerlink" title="电信"></a>电信</h3><p><img src="https://img.laoda.de/i/2023/05/07/j0b6zs-0.webp" alt="image-20230507114932830"></p><h3 id="联通"><a href="#联通" class="headerlink" title="联通"></a>联通</h3><p><img src="https://img.laoda.de/i/2023/05/07/j0q21d-0.webp"></p><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p><img src="https://img.laoda.de/i/2023/05/07/j0xb1n-0.webp" alt="image-20230507115039401"></p><h3 id="教育网"><a href="#教育网" class="headerlink" title="教育网"></a>教育网</h3><p><img src="https://img.laoda.de/i/2023/05/07/j1bhky-0.webp" alt="image-20230507115104896"></p><h2 id="5、Ping值测试"><a href="#5、Ping值测试" class="headerlink" title="5、Ping值测试"></a>5、Ping值测试</h2><h3 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h3><p><img src="https://img.laoda.de/i/2023/05/07/j1x1al-0.webp" alt="image-20230507115205743"></p><h3 id="海外"><a href="#海外" class="headerlink" title="海外"></a>海外</h3><p><img src="https://img.laoda.de/i/2023/05/07/j2018r-0.webp" alt="image-20230507115218823"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="6、抖动、丢包情况（晚上10-49分-晚高峰）"><a href="#6、抖动、丢包情况（晚上10-49分-晚高峰）" class="headerlink" title="6、抖动、丢包情况（晚上10:49分 晚高峰）"></a>6、抖动、丢包情况（晚上10:49分 晚高峰）</h2><p><img src="https://img.laoda.de/i/2023/05/08/117urop-0.webp" alt="img_ObWlK3s2"></p><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p>总体来说还是不错的，这个机器最看重的就是线路，三网回程CN2 GIA，属于顶级线路（电信双程CN2，联通回程CN2，去程骨干直连，移动回程CN2，去程CMI），晚高峰也不会卡顿，舒服的一匹，CPU一般，磁盘IO也还行，自带一个快照，非常适合建站或者做反向代理服务器。</p><p>不适合富强的用户！</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.laoda.de/vps.html">VPS在售推荐</a></p><p><a href="https://blog.laoda.de/archives/vps-choose">VPS服务器选购不完全指南</a></p><p><a href="https://blog.laoda.de/archives/cn2">【VPS各种线路】如何分辨CN2 GIA与CN2 GT？</a></p><p><a href="https://blog.laoda.de/archives/vps-lcayun">【VPS选购分享】莱卡云 —— 三网香港CN2 GIA，香港服务器又多了一个选择，可以月付尝鲜～</a></p><p><a href="https://blog.laoda.de/archives/vps-route">【VPS选购小常识】VPS线路解析不完全指南 什么是CN2 GIA？什么是AS9929、AS4837？什么是CU VIP？什么是移动CMI？如何判断回程路由？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://gao.ee/lca&quot;&gt;莱卡云&lt;/a&gt;是一家国内正规备案的云服务器商家，隶属于广东莱卡信息技术有限公司，主要从事VPS、虚拟主机等云计算产品业务，目前有香港CN2 GIA，美国CN2 GIA，日本CN2 等线路售卖，之前我们介绍过香港CN2</summary>
      
    
    
    
    <category term="VPS推荐" scheme="https://blog.laoda.de/categories/VPS%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="美国VPS" scheme="https://blog.laoda.de/tags/%E7%BE%8E%E5%9B%BDVPS/"/>
    
    <category term="CN2 GIA" scheme="https://blog.laoda.de/tags/CN2-GIA/"/>
    
    <category term="香港VPS" scheme="https://blog.laoda.de/tags/%E9%A6%99%E6%B8%AFVPS/"/>
    
    <category term="莱卡云" scheme="https://blog.laoda.de/tags/%E8%8E%B1%E5%8D%A1%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>【好玩儿的Docker项目】随时随地访问你的VPS！Sshwifty——一款专为Web设计的SSH和Telnet连接器</title>
    <link href="https://blog.laoda.de/archives/docker-compose-install-sshwifty/"/>
    <id>https://blog.laoda.de/archives/docker-compose-install-sshwifty/</id>
    <published>2023-05-08T14:02:57.481Z</published>
    <updated>2023-05-08T15:15:11.838Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咕咕咕咕，我也是你的老粉丝了，从b站追到油管，很感谢你的教程，跟着你玩了很多有意思的docker项目。请问可不可以出一期docker webssh的教程呀，就是搭建网页版ssh工具，毕竟网页版更方便，有的电脑没装putty和finalshell。</p></blockquote><p>最近小伙伴@风雪纸鸢 反馈想要搞个方便SSH的工具，其实Mac（或者Linux）是直接可以用系统的终端（terminal）来进行SSH的，但是考虑到看咕咕博客的小伙伴还是以Windows系统居多，</p><p><img src="https://img.laoda.de/i/2023/05/06/r2pb6z-0.webp" alt="image-20230506163711113"></p><p>而且有时候电脑不在身边，可能也会有用手机来登录服务器的需求，咕咕决定还是来水一个教程。</p><blockquote><p>什么是SSH？</p><p>SSH（Secure Shell）是一种网络协议，用于安全地远程登录到计算机系统。它提供了加密的通信和身份验证，因此可以在不安全的网络上安全地传输数据。通过SSH，您可以远程连接到运行SSH服务器的计算机，并使用远程终端访问该计算机的命令行界面。SSH协议支持密码和公钥认证，您可以使用密码和用户名对远程服务器进行身份验证，或者使用公钥认证机制来更加安全地完成身份验证。SSH协议是Linux系统中非常重要的一个组件，尤其是在远程管理服务器时，SSH可以保障管理的安全性和可靠性。</p></blockquote><p>简单来说，就是你可以通过SSH来远程登录到你的Linux服务器。（类似的如果是Windows的话，咕咕推荐用的是 Microsoft Remote Desktop）</p><h2 id="1-Sshwifty简单介绍"><a href="#1-Sshwifty简单介绍" class="headerlink" title="1. Sshwifty简单介绍"></a>1. Sshwifty简单介绍</h2><p><img src="https://img.laoda.de/i/2023/05/02/oxutah-0.webp" alt="image-20230502150802907"></p><p>Sshwifty是一款专为Web设计的SSH和Telnet连接器。它可以部署在您的计算机或服务器上，为任何兼容（标准）的Web浏览器提供SSH和Telnet访问界面。</p><p><img src="https://img.laoda.de/i/2023/05/06/rbqz7o-0.webp" alt="80ecb8fccea8e6d12e28deb45cfc6669.png"></p><p>为什么你需要一个这个玩意儿呢？其实对于咕咕来说，还挺有用的，因为服务器多，有的服务器从国内访问线路很垃圾，如果用的本地的SSH，容易断连，非常影响心情，现在如果用一台对国内线路比较好一点的机器搭建（比如说之前旧款的<a href="https://loll.cc/tx">腾讯云香港轻量</a>或者之前介绍过的<a href="https://gao.ee/lca">莱卡云香港CN2 GIA</a> ），然后一般这个机器到你原来本地线路垃圾的服务器之间的线路会好很多，这样你再SSH登录，就不卡了！（有点<a href="https://blog.laoda.de/archives/nginxproxymanager">反向代理</a>的味道在里面）</p><p><a href="https://gao.ee/lca">莱卡云美国CN2 GIA</a>购买地址：<a href="https://gao.ee/lca">https://gao.ee/lca</a></p><p><img src="https://img.laoda.de/i/2023/05/08/1296g6q-0.webp" alt="image-20230508231311759"></p><p>机房位置在美国zenlayer数据中心，三网CN2优化线路，大陆访问快速响应，支持<a href="https://blog.laoda.de/archives/chatgpt-plus-depay">ChatGPT</a> 。</p><p><img src="https://img.laoda.de/i/2023/05/07/ismtrm-0.webp" alt="image-20230507113646273"></p><p>测评后续放出。</p><p>测评：<a href="https://blog.laoda.de/archives/lca-us-cn2-gia">【VPS选购经验分享】可解锁ChatGPT！莱卡云新上线美国三网回程CN2 GIA线路测评</a></p><h2 id="2-项目展示"><a href="#2-项目展示" class="headerlink" title="2. 项目展示"></a>2. 项目展示</h2><p>直接丢几个图：</p><p><img src="https://img.laoda.de/i/2023/05/02/oz1611-0.webp" alt="image-20230502151000790"></p><p>填入你服务器的<code>IP:SSH端口</code>，用户名等信息：</p><p><img src="https://img.laoda.de/i/2023/05/02/ozue9x-0.webp" alt="image-20230502151137584"></p><p>同意！<br><img src="https://img.laoda.de/i/2023/05/02/p09wwt-0.webp" alt="image-20230502151210223"></p><p>输入服务器密码：</p><p><img src="https://img.laoda.de/i/2023/05/02/p0eolj-0.webp" alt="image-20230502151232423"></p><p>成功连接！</p><p><img src="https://img.laoda.de/i/2023/05/02/p0t5m7-0.webp" alt="image-20230502151300152"></p><p>还可以查看延时：</p><p><img src="https://img.laoda.de/i/2023/05/02/p0x966-0.webp" alt="image-20230502151319150"></p><p>查看授信的服务（这些都是在你的本地浏览器端的，并不会泄漏你的服务器信息）：</p><p><img src="https://img.laoda.de/i/2023/05/02/p1jov0-0.webp" alt="image-20230502151423770"></p><p>还可以改变字体大小：</p><p><img src="https://img.laoda.de/i/2023/05/02/p1pc3c-0.webp" alt="image-20230502151449135"></p><p><img src="https://img.laoda.de/i/2023/05/02/p2te03-0.webp" alt="image-20230502151635926"></p><p><img src="https://img.laoda.de/i/2023/05/06/rboc65-0.webp" alt="image-20230502151731968"></p><p>大致就这些了，主要就用一下登录功能其实，更多细节大家可以自行尝试。</p><p>官方演示 Demo: <a href="https://sshwifty-demo.nirui.org/">https://sshwifty-demo.nirui.org</a><br>咕咕的Demo：<a href="https://webssh.gugu.ovh/">https://webssh.gugu.ovh</a><br>Docker镜像地址：<a href="https://hub.docker.com/r/niruix/sshwifty">https://hub.docker.com/r/niruix/sshwifty</a><br>GitHub官方地址：<a href="https://github.com/nirui/sshwifty">https://github.com/nirui/sshwifty</a></p><p>你其实可以直接使用官方的demo，但是可能官方demo你访问起来也卡，我们今天是来折腾的，就搭建一个真正属于自己的这个应用！</p><h2 id="3-快速开始"><a href="#3-快速开始" class="headerlink" title="3. 快速开始"></a>3. 快速开始</h2><p>这边直接丢出核心的 <code>docker-compose.yaml</code> 文件，熟悉 docker 环境的老伙伴儿们可以直接拷贝搭建！</p><p>sshwifty 部署：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">sshwifty:</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8090:8182&#x27;</span>             <span class="comment"># 8090可以改成任意服务器没有使用过的端口，8182不要修改</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">sshwifty</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;niruix/sshwifty:latest&#x27;</span></span><br></pre></td></tr></table></figure><p>没有看错，就是这么简短，而且并没有文件夹映射到服务器上。</p><p>以下是服务器部署的详细搭建教程。</p><h2 id="4-搭建环境"><a href="#4-搭建环境" class="headerlink" title="4. 搭建环境"></a>4. 搭建环境</h2><ul><li>服务器：<del>腾讯香港轻量应用服务器 24 元 &#x2F; 月 VPS 一台</del> 咕咕自己搭建用的是硅谷的<a href="https://loll.cc/tx">腾讯轻量应用服务器</a> ，（这次最好选 非大陆的，而且线路还不错的机器）如果是小白刚开始玩的话，也可以选择 <a href="https://gao.ee/lca">莱卡云 美国CN2 GIA</a> 的服务器，（莱卡云服务器介绍：<a href="https://blog.laoda.de/archives/vps-lcayun">点击查看</a>）或者<a href="https://blog.laoda.de/vps.html">Racknerd</a>的玩具服务器（注意地区选美国西部城市的）</li><li>系统：Debian 11 （<a href="https://blog.laoda.de/archives/useful-script#dd%E7%9B%B8%E5%85%B3">DD 脚本</a> 非必需 DD，用原来的系统也 OK，之后教程都是用 Debian 或者 Ubuntu 搭建～）</li><li>安装好 Docker、Docker-compose（<a href="https://blog.laoda.de/archives/hello-docker#5%E5%AE%89%E8%A3%85dockerdocker-compose">相关脚本</a>）</li><li>【非必需但建议】域名一枚，并做好解析到服务器上（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</li><li>【非必需】提前安装好宝塔面板海外版本 aapanel，并安装好 Nginx（<a href="https://forum.aapanel.com/d/9-aapanel-linux-panel-6812-installation-tutorial">安装地址</a>）</li><li>【非必需本教程选用】安装好 Nginx Proxy Manager（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>）</li></ul><blockquote><p>服务器要求：内存建议1G，能安装Docker即可～</p></blockquote><h2 id="5-搭建视频"><a href="#5-搭建视频" class="headerlink" title="5. 搭建视频"></a>5. 搭建视频</h2><h3 id="5-1-YouTube："><a href="#5-1-YouTube：" class="headerlink" title="5.1 YouTube："></a>5.1 YouTube：</h3><p>视频地址：<a href="https://youtu.be/8ajRc7EyQnE">https://youtu.be/8ajRc7EyQnE</a></p><h3 id="5-2-哔哩哔哩"><a href="#5-2-哔哩哔哩" class="headerlink" title="5.2 哔哩哔哩"></a>5.2 哔哩哔哩</h3><p>哔哩哔哩【高清版本可以点击去吐槽到 B 站观看】：<joe-bilibili bvid="BV1ko4y1c7NQ"></joe-bilibili></p><h2 id="6-搭建方式"><a href="#6-搭建方式" class="headerlink" title="6. 搭建方式"></a>6. 搭建方式</h2><p>如果你不是用的腾讯云的轻量应用服务器，可以直接跳到 6.1 部分。</p><h3 id="安装系统（腾讯云轻量应用服务器）"><a href="#安装系统（腾讯云轻量应用服务器）" class="headerlink" title="安装系统（腾讯云轻量应用服务器）"></a>安装系统（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlyhcz-2.webp" alt="e59713fba8726d3cb55ae11bca83fe3c.png"></p><p>腾讯云轻量服务器最大的特点就是 “轻量”，相比 CVM，更适合小白上手，这边我们之间选择 Docker 基础镜像，就可以省去后面安装 Docker 的步骤 <del>（如果你非要用国内的服务器，这边装的 Docker 镜像还会帮你配置好国内镜像源，让你加速访问 docker 镜像资源）</del> 不要用国内的 。</p><h3 id="登陆（腾讯云轻量应用服务器）"><a href="#登陆（腾讯云轻量应用服务器）" class="headerlink" title="登陆（腾讯云轻量应用服务器）"></a>登陆（腾讯云轻量应用服务器）</h3><p><img src="https://img.laoda.de/i/2022/08/16/zlzlj7-2.webp" alt="2722040ee311eb4a9ebf2a4945bf38f4.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm0gv8-2.webp" alt="c0b5d360053746c4095d592967ee401f.png"></p><p><img src="https://img.laoda.de/i/2022/08/16/zm1vqw-2.webp" alt="e0ba858f021b846ad0abc27acf5008c2.png"></p><h3 id="6-1-安装-Docker-与-Nginx-Proxy-Manager"><a href="#6-1-安装-Docker-与-Nginx-Proxy-Manager" class="headerlink" title="6.1 安装 Docker 与 Nginx Proxy Manager"></a>6.1 安装 Docker 与 Nginx Proxy Manager</h3><p>可以直接参考这篇内容：</p><p><a href="https://blog.laoda.de/archives/nginxproxymanager">https://blog.laoda.de/archives/nginxproxymanager</a></p><h3 id="6-2-创建安装目录"><a href="#6-2-创建安装目录" class="headerlink" title="6.2 创建安装目录"></a>6.2 创建安装目录</h3><p>创建一下安装的目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /root/data/docker_data/sshwifty</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /root/data/docker_data/sshwifty</span><br></pre></td></tr></table></figure><p>这边我们直接用 docker 的方式安装。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><p>英文输入法下，按 <code>i</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">sshwifty:</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&#x27;8090:8182&#x27;</span>             <span class="comment"># 8090可以改成任意服务器没有使用过的端口，8182不要修改</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">sshwifty</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">&#x27;niruix/sshwifty:latest&#x27;</span></span><br></pre></td></tr></table></figure><p>修改好之后，注意切换成英文输入法，然后按一下 <code>esc</code>，然后 <code>:wq</code> 保存退出。</p><h3 id="6-3-打开服务器防火墙（非必需）并访问网页"><a href="#6-3-打开服务器防火墙（非必需）并访问网页" class="headerlink" title="6.3 打开服务器防火墙（非必需）并访问网页"></a>6.3 打开服务器防火墙（非必需）并访问网页</h3><p>打开防火墙的端口 <code>8090</code></p><p>举例，腾讯云打开方法如下（部分服务商没有自带的面板防火墙，就不用这步操作了）：</p><img src="https://img.laoda.de/i/2022/06/30/zlio5h-2.webp" alt="image-20220630215240864" style="zoom:33%;" /><img src="https://img.laoda.de/i/2022/06/30/10h3dqt-2.webp" alt="image-20220630220546335" style="zoom:33%;" /><p>图中示例填的是 <code>5230</code>，备注填的是 <code>memos</code>，这边我们填 <code>8090</code>，示例填 <code>sshwifty</code> ，确定即可（如果你在 docker-compose 文件里换了 <code>9009</code>，这边就需要填 <code>9009</code>，以此类推）</p><img src="https://img.laoda.de/i/2022/08/19/o4byqz-2.webp" alt="image-20220819145844555" style="zoom:33%;" /><p>查看端口是否被占用（以 <code>8090</code> 为例），输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsof -i:8090  <span class="comment">#查看 8090 端口是否被占用，如果被占用，重新自定义一个端口</span></span><br></pre></td></tr></table></figure><p>如果啥也没出现，表示端口未被占用，我们可以继续下面的操作了～</p><p>如果出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-bash: lsof: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install lsof  <span class="comment">#安装 lsof</span></span><br></pre></td></tr></table></figure><p>如果端口没有被占用（被占用了就修改一下端口，比如改成 <code>8081</code>，注意 docker 命令行里和防火墙都要改）</p><p>最后：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/sshwifty    <span class="comment"># 来到 dockercompose 文件所在的文件夹下</span></span><br><span class="line"></span><br><span class="line">docker-compose up -d </span><br></pre></td></tr></table></figure><p>理论上我们就可以输入 <code>http://ip:8090</code> 访问安装了。</p><blockquote><p><strong>注意：</strong></p><p>1、不知道服务器 IP，可以直接在命令行输入：<code>curl ip.sb</code>，会显示当前服务器的 IP。</p><p>2、遇到访问不了的情况，请再次检查在宝塔面板的防火墙和服务商的后台防火墙是否打开对应了端口。</p></blockquote><p>有的小伙伴可能想搭建起来分享给其他人使用，如果后续想要分享给别人，IP + 端口太不优雅了，而且这个涉及到密码的，还是非常需要做https的！会让网页更安全！</p><p> <a href="https://loll.cc/ns">namesilo</a> 上面 xyz 后缀的域名一年就 7 块钱，可以年抛。（冷知识，namesilo上 6位数字的xyz续费永远都是0.99美元 &#x3D; &#x3D;）</p><p>如果想要长期使用，还是建议买 com 后缀的域名，更加正规一些，可以输入 <code>laodade</code> 来获得 1 美元的优惠（不知道现在还有没有）</p><p><a href="https://loll.cc/ns">namesilo</a> 自带隐私保护，咕咕一直在用这家，价格也是这些注册商里面比较低的，关键是他家不像其他家域名注册商，没有七七八八的套路！（就是后台界面有些<del>丑</del> 古老 &#x3D; &#x3D;）</p><p><a href="https://blog.laoda.de/archives/namesilo">【域名购买】Namesilo 优惠码和域名解析教程（附带服务器购买推荐和注意事项）</a></p><p>我们接着往下看！</p><h3 id="6-4-更新-sshwifty"><a href="#6-4-更新-sshwifty" class="headerlink" title="6.4 更新 sshwifty"></a>6.4 更新 sshwifty</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/sshwifty</span><br><span class="line"></span><br><span class="line">docker-compose down </span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r /root/data/docker_data/sshwifty /root/data/docker_data/sshwifty.archive  <span class="comment"># 万事先备份，以防万一</span></span><br><span class="line"></span><br><span class="line">docker-compose pull</span><br><span class="line"></span><br><span class="line">docker-compose up -d    <span class="comment"># 请不要使用 docker-compose stop 来停止容器，因为这么做需要额外的时间等待容器停止；docker-compose up -d 直接升级容器时会自动停止并立刻重建新的容器，完全没有必要浪费那些时间。</span></span><br><span class="line"></span><br><span class="line">docker image prune  <span class="comment"># prune 命令用来删除不再使用的 docker 对象。删除所有未被 tag 标记和未被容器使用的镜像</span></span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] </span><br></pre></td></tr></table></figure><p>输入 <code>y</code></p><p>利用 Docker 搭建的应用，更新非常容易～</p><h3 id="6-5-卸载-sshwifty"><a href="#6-5-卸载-sshwifty" class="headerlink" title="6.5 卸载 sshwifty"></a>6.5 卸载 sshwifty</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/data/docker_data/sshwifty</span><br><span class="line"></span><br><span class="line">docker-compose down</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -rf /root/data/docker_data/sshwifty  <span class="comment"># 完全删除映射到本地的数据</span></span><br></pre></td></tr></table></figure><p>可以卸载得很干净。</p><h2 id="7-反向代理"><a href="#7-反向代理" class="headerlink" title="7. 反向代理"></a>7. 反向代理</h2><p>我们要用域名而不是IP+端口的方式来访问我们的服务！</p><h3 id="7-1-利用-Nginx-Proxy-Manager"><a href="#7-1-利用-Nginx-Proxy-Manager" class="headerlink" title="7.1 利用 Nginx Proxy Manager"></a>7.1 利用 Nginx Proxy Manager</h3><p>在添加反向代理之前，确保你已经完成了域名解析，不会的可以看这个：<strong>域名一枚，并做好解析到服务器上</strong>（<a href="https://blog.laoda.de/archives/namesilo">域名购买、域名解析</a> <a href="https://www.bilibili.com/video/BV1Sy4y1k7kZ/">视频教程</a>）</p><p><img src="https://img.laoda.de/i/2022/10/16/n6t02e-2.webp" alt="image-20221016140213282"></p><p>之后，登陆 Nginx Proxy Manager（不会的看这个：<strong>安装 Nginx Proxy Manager</strong>（<a href="https://blog.laoda.de/archives/nginxproxymanager">相关教程</a>））</p><blockquote><p><strong>注意：</strong></p><p>Nginx Proxy Manager（以下简称 NPM）会用到 <code>80</code>、<code>443</code> 端口，所以本机不能占用（比如原来就有 Nginx）</p></blockquote><p>直接丢几张图：</p><img src="https://img.laoda.de/i/2022/05/02/kfes4s_7.webp" alt="image-20220502123517401" style="zoom: 33%;" /><img src="https://img.laoda.de/i/2023/05/08/itr6ch-0.webp" alt="image-20230403155113921" style="zoom:50%;" /><p>记得要打开NPM的<code>websocket support</code> !</p><blockquote><p> 注意填写对应的 <code>域名</code>、<code>IP</code> 和 <code>端口</code>，按文章来的话，应该是 <code>8090</code></p></blockquote><p><strong>IP 填写：</strong></p><p>如果 Nginx Proxy Manager 和 sshwifty 在同一台服务器上，可以在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip addr show docker0</span><br></pre></td></tr></table></figure><p>查看对应的 Docker 容器内部 IP。</p><p><img src="https://img.laoda.de/i/2022/09/29/pcdnz5-2.webp"></p><p>否则直接填 <code>sshwifty</code> 所在的服务器 IP 就行。</p><img src="https://img.laoda.de/i/2022/04/03/h9azjx_7.webp" alt="image-20220403104353185" style="zoom: 33%;" /><p>再次打开，勾选这些：</p><p><img src="https://img.laoda.de/i/2022/10/16/n7nn6e-2.webp" alt="image-20221016140356324"></p><p>然后就可以用域名来安装访问了。</p><h3 id="7-2-利用宝塔面板"><a href="#7-2-利用宝塔面板" class="headerlink" title="7.2 利用宝塔面板"></a>7.2 利用宝塔面板</h3><p>发现还是有不少小伙伴习惯用宝塔面板，这边也贴一个宝塔面板的反代配置：</p><p>直接新建一个站点，不要数据库，不要 php，纯静态即可。</p><p>然后打开下面的配置，修改 Nginx 的配置。</p><p><img src="https://img.laoda.de/i/2022/08/19/ov4xrt-2.webp" alt="image-20220819150345725"></p><p><img src="https://img.laoda.de/i/2022/08/19/owbbkb-2.webp" alt="image-20220819150542867"></p><p>代码如下：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:8090/;       <span class="comment"># 注意改成你实际使用的端口</span></span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> Upgrade-Insecure-Requests <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法对 90% 的反向代理都能生效，然后就可以用域名来安装访问了。</p><p>有同学可能会问，为什么不直接用宝塔自带的反向代理功能。</p><p><img src="https://img.laoda.de/i/2022/08/19/oxf800-2.webp" alt="image-20220819150730128"></p><p>也可以，不过咕咕自己之前遇到过当有多个网站需要反代的时候，在这边设置会报错的情况 &#x3D; &#x3D; </p><p>所以后来就不用了，直接用上面的方法来操作了。</p><h2 id="8-使用教程"><a href="#8-使用教程" class="headerlink" title="8. 使用教程"></a>8. 使用教程</h2><p>前面已经展示过了！这边等录视频的时候可以再说说，大家自己摸索一下！</p><h2 id="9-待完善的地方"><a href="#9-待完善的地方" class="headerlink" title="9. 待完善的地方"></a>9. 待完善的地方</h2><p>暂无</p><h2 id="10-结尾"><a href="#10-结尾" class="headerlink" title="10. 结尾"></a>10. 结尾</h2><p>祝大家用得开心，有问题可以去 GitHub 提 <a href="https://github.com/nirui/sshwifty/issues">Issues</a>，也可以在评论区互相交流探讨。</p><p>同时，有能力给项目做贡献的同学，也欢迎积极加入到 <a href="https://github.com/nirui/sshwifty">项目</a> 中来，贡献自己的一份力量！</p><p>最后，感谢开发人员们的辛苦付出，让我们能用到这么优秀的项目！</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>官方演示 Demo: sshwifty-demo.nirui.org<br>Docker镜像地址：<a href="https://hub.docker.com/r/niruix/sshwifty">https://hub.docker.com/r/niruix/sshwifty</a><br>GitHub官方地址：<a href="https://github.com/nirui/sshwifty">https://github.com/nirui/sshwifty</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;咕咕咕咕，我也是你的老粉丝了，从b站追到油管，很感谢你的教程，跟着你玩了很多有意思的docker项目。请问可不可以出一期docker webssh的教程呀，就是搭建网页版ssh工具，毕竟网页版更方便，有的电脑没装putty和finalshell。&lt;</summary>
      
    
    
    
    <category term="Docker系列" scheme="https://blog.laoda.de/categories/Docker%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="SSH中断" scheme="https://blog.laoda.de/tags/SSH%E4%B8%AD%E6%96%AD/"/>
    
    <category term="SSH" scheme="https://blog.laoda.de/tags/SSH/"/>
    
    <category term="远程访问" scheme="https://blog.laoda.de/tags/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>RackNerd VPS自助IPv4更换功能正式上线，72小时内更换免费！</title>
    <link href="https://blog.laoda.de/archives/racknerd-free-ipv4-replacement-within-72-hours/"/>
    <id>https://blog.laoda.de/archives/racknerd-free-ipv4-replacement-within-72-hours/</id>
    <published>2023-04-30T04:37:57.305Z</published>
    <updated>2023-04-30T04:38:23.414Z</updated>
    
    <content type="html"><![CDATA[<p>首先祝小伙伴们劳动节快乐！最近咕咕比较忙，等空下来马上继续和大家分享好玩的项目 &#x3D; &#x3D; </p><p>今天在路上刷tg的时候看到RackNerd VPS自助IPv4更换功能正式上线了，这对一些小伙伴来说绝对是一个好消息，就来水一篇文章～</p><p>操作非常简单，只需要到你的用户后台，点击你需要更换的VPS，在左边有一个”Change IP”的选项 (如图)，点击后按照说明操作即可。</p><p><img src="https://img.laoda.de/i/2023/04/30/k75u2w-0.webp" alt="IMG_7407"></p><ul><li>VPS如果是3天内 (购买后72小时内)，更换IP是免费的，系统不会生成账单；</li><li>VPS如果是购买后72小时需要更换IP的，系统会生成一个$3的一次性付费账单，支付后系统会自动更换IP。</li></ul><blockquote><p>注意：如果您有工单（ticket）是OPEN的状态，更换IP的按钮是不可用的，必须先关闭工单。</p></blockquote><h2 id="1、官网"><a href="#1、官网" class="headerlink" title="1、官网"></a>1、官网</h2><p><strong>官方网站：<a href="https://my.racknerd.com/aff.php?aff=1158">https://www.racknerd.com</a></strong></p><p><strong>Racknerd相关介绍：</strong> <a href="https://blog.laoda.de/archives/vps-racknerd">【VPS选购分享】Racknerd——曾经的“四大金刚”，如今的性价比之王</a></p><p>以下是racknerd目前的促销便宜VPS，可以围观。</p><p><a href="https://blog.laoda.de/vps.html">RackNerd 在售机型推荐</a></p><h2 id="2、复活节促销VPS"><a href="#2、复活节促销VPS" class="headerlink" title="2、复活节促销VPS"></a>2、复活节促销VPS</h2><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。可选节点为西雅图&#x2F;圣何塞&#x2F;达拉斯&#x2F;芝加哥&#x2F;新泽西&#x2F;亚特兰大&#x2F;纽约。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>840M</td><td>10G</td><td>1T&#x2F;月</td><td>$10.78&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=766">链接</a></strong></td></tr><tr><td>1核</td><td>1.2G</td><td>30G</td><td>3T&#x2F;月</td><td>$14.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=767">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>45G</td><td>5T&#x2F;月</td><td>$21.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=768">链接</a></strong></td></tr><tr><td>3核</td><td>5G</td><td>100G</td><td>10T&#x2F;月</td><td>$58.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=769">链接</a></strong></td></tr></tbody></table><p><strong>以下是往期促销，还可以买！</strong></p><h2 id="2、2023年元旦-中国春节促销"><a href="#2、2023年元旦-中国春节促销" class="headerlink" title="2、2023年元旦+中国春节促销"></a>2、2023年元旦+中国春节促销</h2><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><p>可选节点为洛杉矶DC-02, 芝加哥, 达拉斯, 新泽西, 亚特兰大, 圣何塞, 西雅图, 纽约。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>512M</td><td>10G</td><td>1.5T&#x2F;月</td><td>$10.18&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=734">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>25G</td><td>4T&#x2F;月</td><td>$12.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=735">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>45G</td><td>6T&#x2F;月</td><td>$24.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=736">链接</a></strong></td></tr><tr><td>4核</td><td>4G</td><td>70G</td><td>10T&#x2F;月</td><td>$46.68&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=737">链接</a></strong></td></tr></tbody></table><h2 id="3、其他年付10美元左右VPS"><a href="#3、其他年付10美元左右VPS" class="headerlink" title="3、其他年付10美元左右VPS"></a>3、其他年付10美元左右VPS</h2><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>768M</td><td>10G</td><td>1T&#x2F;月</td><td>$10.28&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=695">链接</a></strong></td></tr><tr><td>1核</td><td>768M</td><td>10G</td><td>2T&#x2F;月</td><td>$11.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=679">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>16G</td><td>3T&#x2F;月</td><td>$14.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=680">链接</a></strong></td></tr><tr><td>1核</td><td>1.2G</td><td>18G</td><td>2T&#x2F;月</td><td>$14.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=670">链接</a></strong></td></tr><tr><td>1核</td><td>1.5G</td><td>30G</td><td>3T&#x2F;月</td><td>$16.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=696">链接</a></strong></td></tr></tbody></table><h2 id="4、年付60刀-5个ipv4"><a href="#4、年付60刀-5个ipv4" class="headerlink" title="4、年付60刀 - 5个ipv4"></a>4、年付60刀 - 5个ipv4</h2><p>默认配置5个ipv4。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>1.5G</td><td>20G</td><td>3T&#x2F;月</td><td>$60&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=563">链接</a></strong></td></tr></tbody></table><h2 id="5、内存1-5G-2-5G套餐"><a href="#5、内存1-5G-2-5G套餐" class="headerlink" title="5、内存1.5G-2.5G套餐"></a>5、内存1.5G-2.5G套餐</h2><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>1.5G</td><td>30G</td><td>3T&#x2F;月</td><td>$25.95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=319">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>25G</td><td>4T&#x2F;月</td><td>$20.98&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=681">链接</a></strong></td></tr><tr><td>2核</td><td>2G</td><td>35G</td><td>4T&#x2F;月</td><td>$38.78&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=280">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>3T&#x2F;月</td><td>$25.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=671">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>60G</td><td>7T&#x2F;月</td><td>$28.55&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=697">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>5T&#x2F;月</td><td>$29.50&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=211">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>50G</td><td>5T&#x2F;月</td><td>$39.95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=320">链接</a></strong></td></tr></tbody></table><h2 id="6、内存3G-8G套餐"><a href="#6、内存3G-8G套餐" class="headerlink" title="6、内存3G-8G套餐"></a>6、内存3G-8G套餐</h2><p>数据中心可选：洛杉矶、圣何塞、达拉斯、芝加哥、新泽西、亚特兰大、纽约、荷兰(阿姆斯特丹)</p><p>VPS特征：KVM虚拟，纯SSD raid10阵列，1Gbps带宽，自带一个IPv4，支持rdns，solusvm面板管理。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>SSD</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2核</td><td>3G</td><td>35G</td><td>5T&#x2F;月</td><td>$29.99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=473">链接</a></strong></td></tr><tr><td>3核</td><td>3.5G</td><td>36G</td><td>5T&#x2F;月</td><td>$30.19&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=125">链接</a></strong></td></tr><tr><td>2核</td><td>3.5G</td><td>60G</td><td>6T&#x2F;月</td><td>$35.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=672">链接</a></strong></td></tr><tr><td>2核</td><td>3.5G</td><td>80G</td><td>10T&#x2F;月</td><td>$38.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=698">链接</a></strong></td></tr><tr><td>3核</td><td>4G</td><td>50G</td><td>10T&#x2F;月</td><td>$45.89&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=474">链接</a></strong></td></tr><tr><td>3核</td><td>4.5G</td><td>100G</td><td>12T&#x2F;月</td><td>$48.77&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=699">链接</a></strong></td></tr><tr><td>4核</td><td>8G</td><td>100G</td><td>5T&#x2F;月</td><td>$89.00&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=312">链接</a></strong></td></tr></tbody></table><h2 id="7、AMD-NVMe系列便宜VPS套餐"><a href="#7、AMD-NVMe系列便宜VPS套餐" class="headerlink" title="7、AMD+NVMe系列便宜VPS套餐"></a>7、AMD+NVMe系列便宜VPS套餐</h2><p>可选纽约，圣何塞，达拉斯，亚特兰大。特征，kvm虚拟，AMD Ryzen 9 3900X、DDR4、NVMe SSD、1Gbps口带宽，默认一个IPv4，不支持Windows。</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>NVMe</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>1核</td><td>512M</td><td>6G</td><td>400G&#x2F;月</td><td>$15&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=302">链接</a></strong></td></tr><tr><td>1核</td><td>1G</td><td>20G</td><td>2T&#x2F;月</td><td>$32&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=303">链接</a></strong></td></tr><tr><td>1核</td><td>1.5G</td><td>22G</td><td>3T&#x2F;月</td><td>$35&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=308">链接</a></strong></td></tr><tr><td>2核</td><td>2.5G</td><td>40G</td><td>6T&#x2F;月</td><td>$69&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=309">链接</a></strong></td></tr></tbody></table><h2 id="8、AMD-NVME系列windows-vps套餐"><a href="#8、AMD-NVME系列windows-vps套餐" class="headerlink" title="8、AMD+NVME系列windows vps套餐"></a>8、AMD+NVME系列windows vps套餐</h2><p>可选机房洛杉矶，达拉斯，纽约，亚特兰大。</p><p>VPS特征：KVM虚拟，AMD Ryzen 9 3900x+ddr4+NVMe SSD阵列+1Gbps带宽，默认一个IPv4，solusvm管理，windows中英文授权版系统（版本为2012和2016系统）。</p><table><thead><tr><th><strong>内存</strong></th><th><strong>CPU</strong></th><th><strong>NVMe</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2G</td><td>1核</td><td>35G</td><td>2T&#x2F;月</td><td>$60&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=700">链接</a></strong></td></tr><tr><td>2.5G</td><td>1核</td><td>40G</td><td>3.5T&#x2F;月</td><td>$69&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=435">链接</a></strong></td></tr><tr><td>3G</td><td>2核</td><td>35G</td><td>3T&#x2F;月</td><td>$78.88&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=346">链接</a></strong></td></tr><tr><td>3.5G</td><td>2核</td><td>60G</td><td>3.5T&#x2F;月</td><td>$99&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=701">链接</a></strong></td></tr><tr><td>4G</td><td>3核</td><td>60G</td><td>6T&#x2F;月</td><td>$115&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=436">链接</a></strong></td></tr><tr><td>8G</td><td>3核</td><td>150G</td><td>10T&#x2F;月</td><td>$219&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=702">链接</a></strong></td></tr><tr><td>12G</td><td>4核</td><td>160G</td><td>12T&#x2F;月</td><td>$289&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=437">链接</a></strong></td></tr></tbody></table><h2 id="9、稍大硬盘VPS套餐"><a href="#9、稍大硬盘VPS套餐" class="headerlink" title="9、稍大硬盘VPS套餐"></a>9、稍大硬盘VPS套餐</h2><p>可选机房：圣何塞&#x2F;达拉斯&#x2F;芝加哥&#x2F;新泽西&#x2F;亚特兰大&#x2F;纽约&#x2F;荷兰</p><p><strong>特征</strong>：1Gbps带宽，自带一个IPv4，solusvm管理，硬盘SSD cached，洛杉矶MC机房！</p><table><thead><tr><th><strong>CPU</strong></th><th><strong>内存</strong></th><th><strong>硬盘</strong></th><th><strong>流量</strong></th><th><strong>价格</strong></th><th><strong>购买</strong></th></tr></thead><tbody><tr><td>2核</td><td>2G</td><td>50G</td><td>4T&#x2F;月</td><td>$36&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=61">链接</a></strong></td></tr><tr><td>3核</td><td>4G</td><td>80G</td><td>5T&#x2F;月</td><td>$59&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=62">链接</a></strong></td></tr><tr><td>4核</td><td>6G</td><td>140G</td><td>6T&#x2F;月</td><td>$95&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=63">链接</a></strong></td></tr><tr><td>4核</td><td>8G</td><td>100G</td><td>5T&#x2F;月</td><td>$89&#x2F;年</td><td><a href="https://my.racknerd.com/aff.php?aff=1158&pid=312"><strong>链接</strong></a></td></tr><tr><td>4核</td><td>8G</td><td>200G</td><td>8T&#x2F;月</td><td>$135&#x2F;年</td><td><strong><a href="https://my.racknerd.com/aff.php?aff=1158&pid=64">链接</a></strong></td></tr></tbody></table><h2 id="10、网络测试"><a href="#10、网络测试" class="headerlink" title="10、网络测试"></a>10、网络测试</h2><p><strong>洛杉矶DC02：</strong> 204.13.154.3，<a href="http://lg-lax02.racknerd.com/1000MB.test">http://lg-lax02.racknerd.com/1000MB.test</a></p><p><strong>洛杉矶DC05：</strong> 5.181.135.8，<a href="http://lg-lax05.racknerd.com/1000MB.test">http://lg-lax05.racknerd.com/1000MB.test</a></p><p><strong>圣何塞：</strong> 192.210.207.88，<a href="http://lg-sj.racknerd.com/1000MB.test">http://lg-sj.racknerd.com/1000MB.test</a></p><p><strong>西雅图：</strong> 192.3.253.2，<a href="http://lg-sea.racknerd.com/1000MB.test">http://lg-sea.racknerd.com/1000MB.test</a></p><p><strong>新泽西：</strong> 192.3.165.30，<a href="http://lg-nj.racknerd.com/1000MB.test">http://lg-nj.racknerd.com/1000MB.test</a></p><p><strong>达拉斯</strong>：198.23.249.100，<a href="http://lg-dal.racknerd.com/1000MB.test">http://lg-dal.racknerd.com/1000MB.test</a></p><p><strong>芝加哥：</strong> 198.23.228.15，<a href="http://lg-chi.racknerd.com/1000MB.test">http://lg-chi.racknerd.com/1000MB.test</a></p><p><strong>阿什本</strong>：107.173.166.10，<a href="http://lg-ash.racknerd.com/1000MB.test">http://lg-ash.racknerd.com/1000MB.test</a></p><p><strong>亚特兰大：</strong> 107.173.164.160，<a href="http://lg-atl.racknerd.com/1000MB.test">http://lg-atl.racknerd.com/1000MB.test</a></p><p><strong>荷兰.阿姆斯特丹：</strong> 23.94.101.88，<a href="http://lg-ams.racknerd.com/1000MB.test">http://lg-ams.racknerd.com/1000MB.test</a></p><p><strong>水牛城：</strong> 192.3.81.8，<a href="http://lg-ny.racknerd.com/1000MB.test">http://lg-ny.racknerd.com/1000MB.test</a></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.laoda.de/vps.html">RackNerd 在售机型推荐</a></p><p><a href="https://blog.laoda.de/archives/vps-racknerd">【VPS选购分享】Racknerd——曾经的“四大金刚”，如今的性价比之王</a></p><p><a href="https://blog.laoda.de/archives/cheap-vps-racknerd">【国外便宜高性价比的VPS 推荐】——RackNerd</a></p><p><a href="https://blog.laoda.de/archives/racknerd-easter-2023">2023 - RackNerd 活动汇总 整理帖！附最新复活节活动套餐</a></p><p><a href="https://blog.laoda.de/archives/racknerd-vps-issues">RackNerd（RN）双十一优惠&amp;&amp; RN VPS在售促销特价+流量翻倍+迁移+邮箱+push方法整理</a></p><p><a href="https://blog.laoda.de/archives/racknerd-bf-2022-01?cid=5016">#2022黑五# RackNerd：美国便宜VPS低至$10&#x2F;年～</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先祝小伙伴们劳动节快乐！最近咕咕比较忙，等空下来马上继续和大家分享好玩的项目 &amp;#x3D; &amp;#x3D; &lt;/p&gt;
&lt;p&gt;今天在路上刷tg的时候看到RackNerd VPS自助IPv4更换功能正式上线了，这对一些小伙伴来说绝对是一个好消息，就来水一篇文章～&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="VPS推荐" scheme="https://blog.laoda.de/categories/VPS%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="Racknerd" scheme="https://blog.laoda.de/tags/Racknerd/"/>
    
    <category term="美国VPS" scheme="https://blog.laoda.de/tags/%E7%BE%8E%E5%9B%BDVPS/"/>
    
    <category term="欧洲VPS" scheme="https://blog.laoda.de/tags/%E6%AC%A7%E6%B4%B2VPS/"/>
    
  </entry>
  
</feed>
